{"text": "Instance: pandas.MultiIndex.set_levels\nOutput:\n```python\nidx.set_levels([['x', 'y', 'z'], [10, 20, 30]], level=[0, 1])\n```", "code": "idx.set_levels([['x', 'y', 'z'], [10, 20, 30]], level=[0, 1])"}
{"text": "Instance: pandas.MultiIndex.set_codes\nOutput:\n```python\nidx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n```", "code": "idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])"}
{"text": "Instance: pandas.MultiIndex.to_flat_index\nOutput:\n```python\nindex = pd.MultiIndex.from_product(\n    [['foo', 'bar'], ['baz', 'qux']],\n    names=['a', 'b'])\nindex.to_flat_index()\n# Index([('foo', 'baz'), ('foo', 'qux'), ('bar', 'baz'), ('bar', 'qux')],\n#       dtype='object')\n```", "code": "index = pd.MultiIndex.from_product(\n    [['foo', 'bar'], ['baz', 'qux']],\n    names=['a', 'b'])\nindex.to_flat_index()\n# Index([('foo', 'baz'), ('foo', 'qux'), ('bar', 'baz'), ('bar', 'qux')],\n#       dtype='object')"}
{"text": "Instance: pandas.MultiIndex.to_frame\nOutput:\n```python\ndf = mi.to_frame()\ndf\n```\n```python\ndf = mi.to_frame(index=False)\ndf\n```\n```python\ndf = mi.to_frame(name=['category1', 'category2'])\ndf\n```", "code": "df = mi.to_frame()\ndf\ndf = mi.to_frame(index=False)\ndf\ndf = mi.to_frame(name=['category1', 'category2'])\ndf"}
{"text": "Instance: pandas.MultiIndex.sortlevel\nOutput:\n```python\nmi.sortlevel()\n```\n```python\nmi.sortlevel(sort_remaining=False)\n```\n```python\nmi.sortlevel(1)\n```\n```python\nmi.sortlevel(1, ascending=False)\n```", "code": "mi.sortlevel()\nmi.sortlevel(sort_remaining=False)\nmi.sortlevel(1)\nmi.sortlevel(1, ascending=False)"}
{"text": "Instance: pandas.MultiIndex.droplevel\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['city', 'population', 'area'])\nmi.droplevel()\n```\n```python\nmi.droplevel(2)\n```\n```python\nmi.droplevel('area')\n```\n```python\nmi.droplevel(['city', 'population'])\n```", "code": "mi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['city', 'population', 'area'])\nmi.droplevel()\nmi.droplevel(2)\nmi.droplevel('area')\nmi.droplevel(['city', 'population'])"}
{"text": "Instance: pandas.MultiIndex.swaplevel\nOutput:\n```python\nmi = pd.MultiIndex(levels=[['apple', 'banana'], ['red', 'yellow']],\n                   codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\nmi.swaplevel(0, 1)\n```", "code": "mi = pd.MultiIndex(levels=[['apple', 'banana'], ['red', 'yellow']],\n                   codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\nmi.swaplevel(0, 1)"}
{"text": "Instance: pandas.MultiIndex.reorder_levels\nOutput:\n```python\nmi.reorder_levels(order=[1, 0])\n```\n```python\nmi.reorder_levels(order=['y', 'x'])\n```", "code": "mi.reorder_levels(order=[1, 0])\nmi.reorder_levels(order=['y', 'x'])"}
{"text": "Instance: pandas.MultiIndex.remove_unused_levels\nOutput:\n```python\nmi = pd.MultiIndex.from_product([range(2), list('ab')])\nmi2 = mi[2:].remove_unused_levels()\nmi2.levels # outputs FrozenList([[1], ['a', 'b']])\n```", "code": "mi = pd.MultiIndex.from_product([range(2), list('ab')])\nmi2 = mi[2:].remove_unused_levels()\nmi2.levels # outputs FrozenList([[1], ['a', 'b']])"}
{"text": "Instance: pandas.MultiIndex.drop\nOutput:\n```python\nidx.drop([(1, 'green'), (2, 'purple')])\nidx.drop('green', level='color')\nidx.drop([1, 2], level=0)\n```", "code": "idx.drop([(1, 'green'), (2, 'purple')])\nidx.drop('green', level='color')\nidx.drop([1, 2], level=0)"}
{"text": "Instance: pandas.MultiIndex.copy\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.copy() # Output: MultiIndex([('apple', 'banana', 'cherry')],\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.copy() # Output: MultiIndex([('apple', 'banana', 'cherry')],"}
{"text": "Instance: pandas.MultiIndex.append\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple'], ['banana']])\nmi.append(mi) # MultiIndex([('apple', 'banana'), ('apple', 'banana')])\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple'], ['banana']])\nmi.append(mi) # MultiIndex([('apple', 'banana'), ('apple', 'banana')])"}
{"text": "Instance: pandas.MultiIndex.truncate\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple', 'banana', 'cherry'], ['red', 'yellow', 'pink']])\nmi.truncate(before='apple', after='banana')\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple', 'banana', 'cherry'], ['red', 'yellow', 'pink']])\nmi.truncate(before='apple', after='banana')"}
{"text": "Instance: pandas.MultiIndex.get_loc\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_loc('b') # slice(1, 3, None)\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_loc('b') # slice(1, 3, None)"}
{"text": "Instance: pandas.MultiIndex.get_locs\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_locs('b') # array([1, 2], dtype=int64)\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_locs('b') # array([1, 2], dtype=int64)"}
{"text": "Instance: pandas.MultiIndex.get_loc_level\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abc'), list('def')], names=['Category', 'Type'])\nmi.get_loc_level('b')\n```\n```python\nmi.get_loc_level('e', level='Type')\n```\n```python\nmi.get_loc_level(['b', 'e'])\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abc'), list('def')], names=['Category', 'Type'])\nmi.get_loc_level('b')\nmi.get_loc_level('e', level='Type')\nmi.get_loc_level(['b', 'e'])"}
{"text": "Instance: pandas.MultiIndex.get_indexer\nOutput:\n```python\nindex = pd.MultiIndex.from_tuples([('A', 'X'), ('B', 'Y'), ('C', 'Z')])\nindex.get_indexer([('B', 'Y'), ('C', 'Z'), ('D', 'W')])\n# array([1, 2, -1])\n```", "code": "index = pd.MultiIndex.from_tuples([('A', 'X'), ('B', 'Y'), ('C', 'Z')])\nindex.get_indexer([('B', 'Y'), ('C', 'Z'), ('D', 'W')])\n# array([1, 2, -1])"}
{"text": "Instance: pandas.MultiIndex.get_level_values\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\nmi.names = ['level_1', 'level_2']\n\nmi.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object', name='level_1')\nmi.get_level_values('level_2') # Index(['d', 'e', 'f'], dtype='object', name='level_2')\n```", "code": "mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\nmi.names = ['level_1', 'level_2']\n\nmi.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object', name='level_1')\nmi.get_level_values('level_2') # Index(['d', 'e', 'f'], dtype='object', name='level_2')"}
{"text": "Instance: pandas.IndexSlice\nOutput:\n```python\nidx = pd.IndexSlice\ndfmi.loc[idx[:, 'B0':'B1'], :]\n```", "code": "idx = pd.IndexSlice\ndfmi.loc[idx[:, 'B0':'B1'], :]"}
{"text": "Instance: pandas.DatetimeIndex\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx"}
{"text": "Instance: pandas.DatetimeIndex.year\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year"}
{"text": "Instance: pandas.DatetimeIndex.month\nOutput:\n```python\ndatetime_series.dt.month # returns the month component of the DatetimeIndex\n```", "code": "datetime_series.dt.month # returns the month component of the DatetimeIndex"}
{"text": "Instance: pandas.DatetimeIndex.day\nOutput:\n```python\ndatetime_series.dt.day # returns the day component of the datetime series\n```", "code": "datetime_series.dt.day # returns the day component of the datetime series"}
{"text": "Instance: pandas.DatetimeIndex.hour\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour"}
{"text": "Instance: pandas.DatetimeIndex.minute\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute"}
{"text": "Instance: pandas.DatetimeIndex.second\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second"}
{"text": "Instance: pandas.DatetimeIndex.microsecond\nOutput:\n```python\ndatetime_series.dt.microsecond\n```", "code": "datetime_series.dt.microsecond"}
{"text": "Instance: pandas.DatetimeIndex.nanosecond\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond"}
{"text": "Instance: pandas.DatetimeIndex.date\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.date # array([datetime.date(2020, 1, 1), datetime.date(2020, 2, 1)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.date # array([datetime.date(2020, 1, 1), datetime.date(2020, 2, 1)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.time\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.time # array([datetime.time(10, 0), datetime.time(11, 0)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.time # array([datetime.time(10, 0), datetime.time(11, 0)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.timetz\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.timetz\n# array([datetime.time(10, 0, tzinfo=datetime.timezone.utc), datetime.time(11, 0, tzinfo=datetime.timezone.utc)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.timetz\n# array([datetime.time(10, 0, tzinfo=datetime.timezone.utc), datetime.time(11, 0, tzinfo=datetime.timezone.utc)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.dayofyear\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear # Index([1, 32], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear # Index([1, 32], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.day_of_year\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear\n# Output: Index([1, 32], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear\n# Output: Index([1, 32], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.dayofweek\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.day_of_week\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.weekday\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.quarter\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.quarter # Index([1, 1], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.quarter # Index([1, 1], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.tz\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.tz # datetime.timezone.utc\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.tz # datetime.timezone.utc"}
{"text": "Instance: pandas.DatetimeIndex.freq\nOutput:\n```python\ndt_index = pd.date_range(start='1/1/2022', periods=5, freq='D')\nfreq = dt_index.freq # outputs <Day>\n```", "code": "dt_index = pd.date_range(start='1/1/2022', periods=5, freq='D')\nfreq = dt_index.freq # outputs <Day>"}
{"text": "Instance: pandas.DatetimeIndex.freqstr\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\"], freq=\"D\")\nidx.freqstr # Output: 'D'\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\"], freq=\"D\")\nidx.freqstr # Output: 'D'"}
{"text": "Instance: pandas.DatetimeIndex.is_month_start\nOutput:\n```python\nidx = pd.date_range(\"2022-01-01\", periods=3)\nidx.is_month_start # array([True, False, False])\n```", "code": "idx = pd.date_range(\"2022-01-01\", periods=3)\nidx.is_month_start # array([True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_month_end\nOutput:\n```python\nidx = pd.date_range(\"2018-02-27\", periods=3)\nidx.is_month_end # array([False, True, False])\n```", "code": "idx = pd.date_range(\"2018-02-27\", periods=3)\nidx.is_month_end # array([False, True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_quarter_start\nOutput:\n```python\nidx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_start # array([False, False,  True, False])\n```", "code": "idx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_start # array([False, False,  True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_quarter_end\nOutput:\n```python\nidx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_end # array([False,  True, False, False])\n```", "code": "idx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_end # array([False,  True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_year_start\nOutput:\n```python\nidx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_start # array([False, False,  True])\n```", "code": "idx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_start # array([False, False,  True])"}
{"text": "Instance: pandas.DatetimeIndex.is_year_end\nOutput:\n```python\nidx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_end # array([False,  True, False])\n```", "code": "idx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_end # array([False,  True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_leap_year\nOutput:\n```python\nidx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"YE\")\nidx.is_leap_year\n# Output: array([ True, False, False])\n```", "code": "idx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"YE\")\nidx.is_leap_year\n# Output: array([ True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.inferred_freq\nOutput:\n```python\nidx = pd.DatetimeIndex([\"2018-01-01\", \"2018-01-03\", \"2018-01-05\"])\nidx.inferred_freq\n# Output: '2D'\n```", "code": "idx = pd.DatetimeIndex([\"2018-01-01\", \"2018-01-03\", \"2018-01-05\"])\nidx.inferred_freq\n# Output: '2D'"}
{"text": "Instance: pandas.DatetimeIndex.indexer_at_time\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00\", \"2/1/2020 11:00\", \"3/1/2020 10:00\"])\nidx.indexer_at_time(\"10:00\") # array([0, 2])\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00\", \"2/1/2020 11:00\", \"3/1/2020 10:00\"])\nidx.indexer_at_time(\"10:00\") # array([0, 2])"}
{"text": "Instance: pandas.DatetimeIndex.indexer_between_time\nOutput:\n```python\nidx = pd.date_range(\"2023-01-01\", periods=4, freq=\"h\")\nidx.indexer_between_time(\"00:00\", \"2:00\", include_end=False) # array([0, 1])\n```", "code": "idx = pd.date_range(\"2023-01-01\", periods=4, freq=\"h\")\nidx.indexer_between_time(\"00:00\", \"2:00\", include_end=False) # array([0, 1])"}
{"text": "Instance: pandas.DatetimeIndex.normalize\nOutput:\n```python\nidx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()\n```", "code": "idx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()"}
{"text": "Instance: pandas.DatetimeIndex.strftime\nOutput:\n```python\nrng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')\n```", "code": "rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')"}
{"text": "Instance: pandas.DatetimeIndex.snap\nOutput:\n```python\nidx = pd.DatetimeIndex(['2023-01-01', '2023-01-02', '2023-02-01', '2023-02-02'])\nidx.snap('MS') # snaps the DatetimeIndex to the start of the month\n```", "code": "idx = pd.DatetimeIndex(['2023-01-01', '2023-01-02', '2023-02-01', '2023-02-02'])\nidx.snap('MS') # snaps the DatetimeIndex to the start of the month"}
{"text": "Instance: pandas.DatetimeIndex.tz_convert\nOutput:\n```python\ndti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')\n```", "code": "dti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')"}
{"text": "Instance: pandas.DatetimeIndex.tz_localize\nOutput:\n```python\ntz_aware = tz_naive.tz_localize(tz='US/Eastern')\n```", "code": "tz_aware = tz_naive.tz_localize(tz='US/Eastern')"}
{"text": "Instance: pandas.DatetimeIndex.round\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the DatetimeIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the DatetimeIndex to the nearest hour"}
{"text": "Instance: pandas.DatetimeIndex.floor\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)"}
{"text": "Instance: pandas.DatetimeIndex.ceil\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h')\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h')"}
{"text": "Instance: pandas.DatetimeIndex.month_name\nOutput:\n```python\nidx = pd.date_range(start='2018-01', freq='ME', periods=3)\nidx.month_name()\n```", "code": "idx = pd.date_range(start='2018-01', freq='ME', periods=3)\nidx.month_name()"}
{"text": "Instance: pandas.DatetimeIndex.day_name\nOutput:\n```python\nidx = pd.date_range(start='2018-01-01', freq='D', periods=3)\nidx.day_name()\n# Index(['Monday', 'Tuesday', 'Wednesday'], dtype='object')\n```", "code": "idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\nidx.day_name()\n# Index(['Monday', 'Tuesday', 'Wednesday'], dtype='object')"}
{"text": "Instance: pandas.DatetimeIndex.as_unit\nOutput:\n```python\nidx = pd.DatetimeIndex(['2020-01-02 01:02:03.004005006'])\nidx.as_unit('s') # DatetimeIndex(['2020-01-02 01:02:03'], dtype='datetime64[s]', freq=None)\n```", "code": "idx = pd.DatetimeIndex(['2020-01-02 01:02:03.004005006'])\nidx.as_unit('s') # DatetimeIndex(['2020-01-02 01:02:03'], dtype='datetime64[s]', freq=None)"}
{"text": "Instance: pandas.DatetimeIndex.to_period\nOutput:\n```python\ndf.index.to_period(\"M\") # Converts DatetimeIndex to PeriodIndex with monthly frequency\n```", "code": "df.index.to_period(\"M\") # Converts DatetimeIndex to PeriodIndex with monthly frequency"}
{"text": "Instance: pandas.DatetimeIndex.to_pydatetime\nOutput:\n```python\nidx = pd.date_range('2018-02-27', periods=3)\nidx.to_pydatetime()\n# array([datetime.datetime(2018, 2, 27, 0, 0),\n#        datetime.datetime(2018, 2, 28, 0, 0),\n#        datetime.datetime(2018, 3, 1, 0, 0)], dtype=object)\n```", "code": "idx = pd.date_range('2018-02-27', periods=3)\nidx.to_pydatetime()\n# array([datetime.datetime(2018, 2, 27, 0, 0),\n#        datetime.datetime(2018, 2, 28, 0, 0),\n#        datetime.datetime(2018, 3, 1, 0, 0)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.to_series\nOutput:\n```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()"}
{"text": "```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()"}
{"text": "Instance: pandas.DatetimeIndex.mean\nOutput:\n```python\nidx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.mean() # Outputs Timestamp('2001-01-02 00:00:00')\n```", "code": "idx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.mean() # Outputs Timestamp('2001-01-02 00:00:00')"}
{"text": "Instance: pandas.DatetimeIndex.std\nOutput:\n```python\nidx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.std() # outputs Timedelta('1 days 00:00:00')\n```", "code": "idx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.std() # outputs Timedelta('1 days 00:00:00')"}
{"text": "Instance: pandas.TimedeltaIndex\nOutput:\n```python\ntimedelta_index = pd.TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'])\n```", "code": "timedelta_index = pd.TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'])"}
{"text": "Instance: pandas.TimedeltaIndex.days\nOutput:\n```python\ntdelta_idx.days # Index([0, 10, 20], dtype='int64')\n```", "code": "tdelta_idx.days # Index([0, 10, 20], dtype='int64')"}
{"text": "Instance: pandas.TimedeltaIndex.seconds\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='s')\ntdelta_idx.seconds\n# Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='s')\ntdelta_idx.seconds\n# Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.microseconds\nOutput:\n```python\ntdelta_idx.microseconds # Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx.microseconds # Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.nanoseconds\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='ns')\ntdelta_idx.nanoseconds # Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='ns')\ntdelta_idx.nanoseconds # Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.components\nOutput:\n```python\ntdelta_idx.components\n```", "code": "tdelta_idx.components"}
{"text": "Instance: pandas.TimedeltaIndex.inferred_freq\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([\"0 days\", \"10 days\", \"20 days\"])\ntdelta_idx.inferred_freq # '10D'\n```", "code": "tdelta_idx = pd.to_timedelta([\"0 days\", \"10 days\", \"20 days\"])\ntdelta_idx.inferred_freq # '10D'"}
{"text": "Instance: pandas.TimedeltaIndex.as_unit\nOutput:\n```python\ntdelta_idx = pd.to_timedelta(['1 day 3 min 2 us 42 ns'])\ntdelta_idx.as_unit('s') # TimedeltaIndex(['1 days 00:03:00'], dtype='timedelta64[s]', freq=None)\n```", "code": "tdelta_idx = pd.to_timedelta(['1 day 3 min 2 us 42 ns'])\ntdelta_idx.as_unit('s') # TimedeltaIndex(['1 days 00:03:00'], dtype='timedelta64[s]', freq=None)"}
{"text": "Instance: pandas.TimedeltaIndex.to_pytimedelta\nOutput:\n```python\ntdelta_idx.to_pytimedelta()\n# array([datetime.timedelta(days=1), datetime.timedelta(days=2), datetime.timedelta(days=3)], dtype=object)\n```", "code": "tdelta_idx.to_pytimedelta()\n# array([datetime.timedelta(days=1), datetime.timedelta(days=2), datetime.timedelta(days=3)], dtype=object)"}
{"text": "Instance: pandas.TimedeltaIndex.to_series\nOutput:\n```python\nidx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\n\nseries = idx.to_series()\nprint(series)\n# Output:\n# duration\n# 1 days   1 days\n# 2 days   2 days\n# 3 days   3 days\n# Name: duration, dtype: timedelta64[ns]\n```", "code": "idx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\n\nseries = idx.to_series()\nprint(series)\n# Output:\n# duration\n# 1 days   1 days\n# 2 days   2 days\n# 3 days   3 days\n# Name: duration, dtype: timedelta64[ns]"}
{"text": "Instance: pandas.TimedeltaIndex.round\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the TimedeltaIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the TimedeltaIndex to the nearest hour"}
{"text": "Instance: pandas.TimedeltaIndex.floor\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)"}
{"text": "Instance: pandas.TimedeltaIndex.ceil\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h') # Ceil the TimedeltaIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h') # Ceil the TimedeltaIndex to the nearest hour"}
{"text": "Instance: pandas.TimedeltaIndex.to_frame\nOutput:\n```python\nidx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\ndf = idx.to_frame()\n```", "code": "idx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\ndf = idx.to_frame()"}
{"text": "Instance: pandas.TimedeltaIndex.mean\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='D')\ntdelta_idx.mean() # Outputs Timedelta('2 days 00:00:00')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='D')\ntdelta_idx.mean() # Outputs Timedelta('2 days 00:00:00')"}
{"text": "Instance: pandas.PeriodIndex\nOutput:\n```python\nidx = pd.PeriodIndex.from_fields(year=[2000, 2002], quarter=[1, 3])\nidx # outputs PeriodIndex(['2000Q1', '2002Q3'], dtype='period[Q-DEC]')\n```", "code": "idx = pd.PeriodIndex.from_fields(year=[2000, 2002], quarter=[1, 3])\nidx # outputs PeriodIndex(['2000Q1', '2002Q3'], dtype='period[Q-DEC]')"}
{"text": "Instance: pandas.PeriodIndex.day\nOutput:\n```python\nidx = pd.PeriodIndex(['2020-01-31', '2020-02-28'], freq='D')\nidx.day # Index([31, 28], dtype='int64')\n```", "code": "idx = pd.PeriodIndex(['2020-01-31', '2020-02-28'], freq='D')\nidx.day # Index([31, 28], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.dayofweek\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.dayofweek\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.dayofweek"}
{"text": "Instance: pandas.PeriodIndex.day_of_week\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.day_of_week\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.day_of_week"}
{"text": "Instance: pandas.PeriodIndex.dayofyear\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.day_of_year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.days_in_month\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.daysinmonth\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.end_time\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.end_time\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.end_time"}
{"text": "Instance: pandas.PeriodIndex.freq\nOutput:\n```python\nperiod_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nperiod_index.freq # outputs 'M'\n```", "code": "period_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nperiod_index.freq # outputs 'M'"}
{"text": "Instance: pandas.PeriodIndex.freqstr\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-1\", \"2023-2\", \"2023-3\"], freq=\"M\")\nidx.freqstr # Output: 'M'\n```", "code": "idx = pd.PeriodIndex([\"2023-1\", \"2023-2\", \"2023-3\"], freq=\"M\")\nidx.freqstr # Output: 'M'"}
{"text": "Instance: pandas.PeriodIndex.hour\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:00\", \"2023-01-01 11:00\"], freq='h')\nidx.hour # Index([10, 11], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:00\", \"2023-01-01 11:00\"], freq='h')\nidx.hour # Index([10, 11], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.is_leap_year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.is_leap_year # array([False, True, False])\n```", "code": "idx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.is_leap_year # array([False, True, False])"}
{"text": "Instance: pandas.PeriodIndex.minute\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:30:00\", \"2023-01-01 11:50:00\"], freq='min')\nidx.minute\n# Output: Index([30, 50], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:30:00\", \"2023-01-01 11:50:00\"], freq='min')\nidx.minute\n# Output: Index([30, 50], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.month\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.month # Output: Index([1, 2, 3], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.month # Output: Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.quarter\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.quarter # Output: Index([1, 1, 1], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.quarter # Output: Index([1, 1, 1], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.qyear\nOutput:\n```python\nperiod_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nquarter = period_index.qyear\n```", "code": "period_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nquarter = period_index.qyear"}
{"text": "Instance: pandas.PeriodIndex.second\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:00:30\", \"2023-01-01 10:00:31\"], freq='s')\nidx.second # Index([30, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:00:30\", \"2023-01-01 10:00:31\"], freq='s')\nidx.second # Index([30, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.start_time\nOutput:\n```python\nperiod = pd.Period('2012-1-1', freq='D')\nperiod.start_time # Timestamp('2012-01-01 00:00:00')\n```", "code": "period = pd.Period('2012-1-1', freq='D')\nperiod.start_time # Timestamp('2012-01-01 00:00:00')"}
{"text": "Instance: pandas.PeriodIndex.week\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.weekday\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.weekday # Output: Index([6, 0, 1], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.weekday # Output: Index([6, 0, 1], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.weekofyear\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.year # Index([2023, 2024, 2025], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.year # Index([2023, 2024, 2025], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.asfreq\nOutput:\n```python\npidx = pd.period_range('2010-01-01', '2015-01-01', freq='Y')\npidx.asfreq('M', how='S')\n```", "code": "pidx = pd.period_range('2010-01-01', '2015-01-01', freq='Y')\npidx.asfreq('M', how='S')"}
{"text": "Instance: pandas.PeriodIndex.strftime\nOutput:\n```python\nrng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')\n```", "code": "rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')"}
{"text": "Instance: pandas.PeriodIndex.to_timestamp\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.to_timestamp()\n# DatetimeIndex(['2023-01-01', '2023-02-01', '2023-03-01'], dtype='datetime64[ns]', freq='MS')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.to_timestamp()\n# DatetimeIndex(['2023-01-01', '2023-02-01', '2023-03-01'], dtype='datetime64[ns]', freq='MS')"}
{"text": "Instance: pandas.PeriodIndex.from_fields\nOutput:\n```python\nperiods = pd.PeriodIndex.from_fields(year=[2020, 2021, 2022], month=[1, 2, 3], day=[15, 20, 25])\n```", "code": "periods = pd.PeriodIndex.from_fields(year=[2020, 2021, 2022], month=[1, 2, 3], day=[15, 20, 25])"}
{"text": "Instance: pandas.PeriodIndex.from_ordinals\nOutput:\n```python\nordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)\n```", "code": "ordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)"}
{"text": "Instance: pandas.api.types.is_scalar\nOutput:\n```python\npd.api.types.is_scalar(5) # True\n```", "code": "pd.api.types.is_scalar(5) # True"}
{"text": "Instance: pandas.Index\nOutput:\n```python\nindex = pd.Index(['apple', 'banana', 'cherry'])\n```", "code": "index = pd.Index(['apple', 'banana', 'cherry'])"}
{"text": "Instance: pandas.tseries.offsets.DateOffset\nOutput:\n```python\nts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')\n```", "code": "ts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.name\nOutput:\n```python\noffset = pd.offsets.Hour()\noffset.name # 'h'\n```", "code": "offset = pd.offsets.Hour()\noffset.name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.nanos\nOutput:\n```python\noffset = pd.DateOffset(nanos=500)\n```", "code": "offset = pd.DateOffset(nanos=500)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.normalize\nOutput:\n```python\noffset = pd.DateOffset(years=2, months=3, days=5)\nnormalized_offset = offset.normalize()\n```", "code": "offset = pd.DateOffset(years=2, months=3, days=5)\nnormalized_offset = offset.normalize()"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.rule_code\nOutput:\n```python\noffset = pd.tseries.offsets.DateOffset(rule_code='W')\n```", "code": "offset = pd.tseries.offsets.DateOffset(rule_code='W')"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.n\nOutput:\n```python\noffset = pd.DateOffset(n=3)\n```", "code": "offset = pd.DateOffset(n=3)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\n(ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M') # 'Fri 16 Dec 2022 15:00'\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\n(ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M') # 'Fri 16 Dec 2022 15:00'"}
{"text": "Instance: pandas.tseries.offsets.BDay\nOutput:\n```python\noffset = pd.tseries.offsets.BDay(5) # Business day offset of 5 days\n```", "code": "offset = pd.tseries.offsets.BDay(5) # Business day offset of 5 days"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # outputs '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # outputs '2bh'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.name\nOutput:\n```python\npd.offsets.BusinessDay().name # 'B'\n```", "code": "pd.offsets.BusinessDay().name # 'B'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(nanos=1000000000)\n```", "code": "offset = pd.tseries.offsets.BusinessDay(nanos=1000000000)"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.normalize\nOutput:\n```python\nbd = pd.tseries.offsets.BusinessDay()\nbd.normalize(pd.Timestamp('2022-12-25')) # Output: Timestamp('2022-12-26 00:00:00')\n```", "code": "bd = pd.tseries.offsets.BusinessDay()\nbd.normalize(pd.Timestamp('2022-12-25')) # Output: Timestamp('2022-12-26 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.rule_code\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(n=1)\noffset.rule_code # 'B'\n```", "code": "offset = pd.tseries.offsets.BusinessDay(n=1)\noffset.rule_code # 'B'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.n\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(n=2)\n```", "code": "offset = pd.tseries.offsets.BusinessDay(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.weekmask\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessDay(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "bm = pd.tseries.offsets.BusinessDay(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.BusinessDay().holidays(start='2022-01-01', end='2022-12-31')\n```", "code": "holidays = pd.tseries.offsets.BusinessDay().holidays(start='2022-01-01', end='2022-12-31')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.calendar\nOutput:\n```python\nbday = pd.tseries.offsets.BusinessDay(calendar=pd.tseries.offsets.USFederalHolidayCalendar())\n```", "code": "bday = pd.tseries.offsets.BusinessDay(calendar=pd.tseries.offsets.USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 8)\nts + pd.offsets.BusinessHour(n=5) # Timestamp('2022-12-09 14:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 8)\nts + pd.offsets.BusinessHour(n=5) # Timestamp('2022-12-09 14:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # '2bh'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.nanos\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nbh.nanos # 3600000000000\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nbh.nanos # 3600000000000"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.normalize\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nnormalized_date = bh.normalize(pd.Timestamp('2022-12-25 15:30:00'))\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nnormalized_date = bh.normalize(pd.Timestamp('2022-12-25 15:30:00'))"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.rule_code\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nbh.rule_code # outputs 'BH'\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nbh.rule_code # outputs 'BH'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.n\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(n=2)\n```", "code": "bh = pd.tseries.offsets.BusinessHour(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.start\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(start='09:00')\n```", "code": "bh = pd.tseries.offsets.BusinessHour(start='09:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.end\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nend_time = bh.end('2022-12-31 15:00:00')\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nend_time = bh.end('2022-12-31 15:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.weekmask\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessHour.weekmask(startDay=0, weekdays=[0, 1, 2, 3, 4]) # creates a BusinessHour weekmask starting on Monday and ending on Friday\n```", "code": "bm = pd.tseries.offsets.BusinessHour.weekmask(startDay=0, weekdays=[0, 1, 2, 3, 4]) # creates a BusinessHour weekmask starting on Monday and ending on Friday"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.holidays\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nholidays = bh.holidays(start='2022-01-01', end='2022-12-31')\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nholidays = bh.holidays(start='2022-01-01', end='2022-12-31')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.calendar\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(calendar=pd.tseries.offsets.USFederalHolidayCalendar())\n```", "code": "bh = pd.tseries.offsets.BusinessHour(calendar=pd.tseries.offsets.USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5, 16)\nresult = ts + pd.offsets.CustomBusinessDay()\nprint(result)\n# Output: Timestamp('2022-08-08 16:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5, 16)\nresult = ts + pd.offsets.CustomBusinessDay()\nprint(result)\n# Output: Timestamp('2022-08-08 16:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CDay\nOutput:\n```python\ncustom_business_day = pd.tseries.offsets.CDay(n=1, normalize=True)\n```", "code": "custom_business_day = pd.tseries.offsets.CDay(n=1, normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.nanos\nOutput:\n```python\ncbd = pd.tseries.offsets.CustomBusinessDay(nanos=500000000)\n```", "code": "cbd = pd.tseries.offsets.CustomBusinessDay(nanos=500000000)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.normalize\nOutput:\n```python\ncbd = CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.normalize(pd.Timestamp('2022-01-01')) # Output: Timestamp('2022-01-03 00:00:00')\n```", "code": "cbd = CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.normalize(pd.Timestamp('2022-01-01')) # Output: Timestamp('2022-01-03 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.rule_code\nOutput:\n```python\ncbd = pd.tseries.offsets.CustomBusinessDay(n=1, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.rule_code # outputs 'C'\n```", "code": "cbd = pd.tseries.offsets.CustomBusinessDay(n=1, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.rule_code # outputs 'C'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.n\nOutput:\n```python\ncbd = CustomBusinessDay(n=2)\n```", "code": "cbd = CustomBusinessDay(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.weekmask\nOutput:\n```python\nweekmask = pd.tseries.offsets.CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "weekmask = pd.tseries.offsets.CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.calendar\nOutput:\n```python\ncbd = CustomBusinessDay(calendar=USFederalHolidayCalendar())\n```", "code": "cbd = CustomBusinessDay(calendar=USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.holidays\nOutput:\n```python\ncbd = CustomBusinessDay(holidays=['2022-01-01', '2022-12-25'])\n```", "code": "cbd = CustomBusinessDay(holidays=['2022-01-01', '2022-12-25'])"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5, 16)\nts + pd.offsets.CustomBusinessHour(start=\"11:00\")\n# Output: Timestamp('2022-08-08 11:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5, 16)\nts + pd.offsets.CustomBusinessHour(start=\"11:00\")\n# Output: Timestamp('2022-08-08 11:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # '2bh'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.nanos\nOutput:\n```python\nCustomBusinessHour().nanos # 3600000000000\n```", "code": "CustomBusinessHour().nanos # 3600000000000"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.normalize\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', end='17:00')\ncbh.normalize(pd.Timestamp('2022-01-01 08:30')) # Output: Timestamp('2022-01-01 09:00:00')\n```", "code": "cbh = CustomBusinessHour(start='09:00', end='17:00')\ncbh.normalize(pd.Timestamp('2022-01-01 08:30')) # Output: Timestamp('2022-01-01 09:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.rule_code\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.rule_code # outputs 'CBH-2-0-Mon Tue Wed Thu Fri-00:00:00'\n```", "code": "cbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.rule_code # outputs 'CBH-2-0-Mon Tue Wed Thu Fri-00:00:00'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.n\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, start='09:00')\n```", "code": "cbh = CustomBusinessHour(n=2, start='09:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.weekmask\nOutput:\n```python\ncbh = CustomBusinessHour(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbh = CustomBusinessHour(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.calendar\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.calendar(start='2022-01-01', end='2022-01-10')\n```", "code": "cbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.calendar(start='2022-01-01', end='2022-01-10')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.holidays\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.holidays # outputs ['2022-01-01', '2022-12-25']\n```", "code": "cbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.holidays # outputs ['2022-01-01', '2022-12-25']"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.start\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00')\ncbh.start # outputs Timestamp('2022-01-01 09:00:00')\n```", "code": "cbh = CustomBusinessHour(start='09:00')\ncbh.start # outputs Timestamp('2022-01-01 09:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.end\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri')\nend_time = cbh.end('2022-01-01 10:30')\n```", "code": "cbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri')\nend_time = cbh.end('2022-01-01 10:30')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 30)\nts + pd.offsets.MonthEnd() # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 30)\nts + pd.offsets.MonthEnd() # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.name\nOutput:\n```python\npd.tseries.offsets.MonthEnd().name # 'EOM'\n```", "code": "pd.tseries.offsets.MonthEnd().name # 'EOM'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.nanos\nOutput:\n```python\nend_of_month = pd.Timestamp('2022-03-15') + pd.offsets.MonthEnd(nanos=1)\n```", "code": "end_of_month = pd.Timestamp('2022-03-15') + pd.offsets.MonthEnd(nanos=1)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.normalize\nOutput:\n```python\ndates = pd.date_range('2022-01-01', periods=5, freq='M')\nend_of_month = pd.tseries.offsets.MonthEnd().normalize(dates)\n```", "code": "dates = pd.date_range('2022-01-01', periods=5, freq='M')\nend_of_month = pd.tseries.offsets.MonthEnd().normalize(dates)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.rule_code\nOutput:\n```python\nend_of_month = pd.tseries.offsets.MonthEnd()\nend_of_month.rule_code # outputs 'M'\n```", "code": "end_of_month = pd.tseries.offsets.MonthEnd()\nend_of_month.rule_code # outputs 'M'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.n\nOutput:\n```python\nend_of_month = pd.Timestamp('2022-03-15') + pd.tseries.offsets.MonthEnd(n=1)\n```", "code": "end_of_month = pd.Timestamp('2022-03-15') + pd.tseries.offsets.MonthEnd(n=1)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.MonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.MonthBegin() # Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.MonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.MonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.MonthBegin() # Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.MonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.name\nOutput:\n```python\npd.tseries.offsets.MonthBegin().name # 'MonthBegin'\n```", "code": "pd.tseries.offsets.MonthBegin().name # 'MonthBegin'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.MonthBegin(nanos=1000000000)\n```", "code": "offset = pd.tseries.offsets.MonthBegin(nanos=1000000000)"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.normalize\nOutput:\n```python\ndate_range = pd.date_range('2022-01-15', periods=5, freq='M')\nnormalized_dates = date_range.to_series().dt.to_period('M').dt.to_timestamp()\n```", "code": "date_range = pd.date_range('2022-01-15', periods=5, freq='M')\nnormalized_dates = date_range.to_series().dt.to_period('M').dt.to_timestamp()"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.MonthBegin.rule_code # outputs 'BM'\n```", "code": "code = pd.tseries.offsets.MonthBegin.rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.MonthBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.MonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 29)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-11-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-12-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\npd.offsets.BMonthEnd().rollforward(ts) # Timestamp('2022-11-30 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 29)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-11-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-12-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\npd.offsets.BMonthEnd().rollforward(ts) # Timestamp('2022-11-30 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BMonthEnd\nOutput:\n```python\nbm = pd.tseries.offsets.BMonthEnd()\n```", "code": "bm = pd.tseries.offsets.BMonthEnd()"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.freqstr\nOutput:\n```python\npd.offsets.BusinessMonthEnd().freqstr # 'BM'\n```", "code": "pd.offsets.BusinessMonthEnd().freqstr # 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.name\nOutput:\n```python\npd.tseries.offsets.BusinessMonthEnd().name # 'BM'\n```", "code": "pd.tseries.offsets.BusinessMonthEnd().name # 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.nanos\nOutput:\n```python\nbusiness_month_end = pd.tseries.offsets.BusinessMonthEnd()\nbusiness_month_end.nanos # 0\n```", "code": "business_month_end = pd.tseries.offsets.BusinessMonthEnd()\nbusiness_month_end.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.normalize\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthEnd()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "bm = pd.tseries.offsets.BusinessMonthEnd()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.rule_code\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthEnd()\nbm.rule_code # outputs 'BM'\n```", "code": "bm = pd.tseries.offsets.BusinessMonthEnd()\nbm.rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.n\nOutput:\n```python\npd.date_range('2022-01-01', periods=5, freq=pd.offsets.BusinessMonthEnd(n=2))\n```", "code": "pd.date_range('2022-01-01', periods=5, freq=pd.offsets.BusinessMonthEnd(n=2))"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.BMonthBegin() # Timestamp('2023-01-02 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.BMonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.BMonthBegin() # Timestamp('2023-01-02 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.BMonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BMonthBegin\nOutput:\n```python\nbm = pd.tseries.offsets.BMonthBegin()\n```", "code": "bm = pd.tseries.offsets.BMonthBegin()"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.freqstr\nOutput:\n```python\npd.offsets.BusinessMonthBegin().freqstr # 'BMS'\n```", "code": "pd.offsets.BusinessMonthBegin().freqstr # 'BMS'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.BusinessMonthBegin().name # 'BMS'\n```", "code": "pd.tseries.offsets.BusinessMonthBegin().name # 'BMS'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.nanos\nOutput:\n```python\npd.tseries.offsets.BusinessMonthBegin().nanos # 0\n```", "code": "pd.tseries.offsets.BusinessMonthBegin().nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.normalize\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthBegin()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-01 00:00:00')\n```", "code": "bm = pd.tseries.offsets.BusinessMonthBegin()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BusinessMonthBegin().rule_code # outputs 'BM'\n```", "code": "rule_code = pd.tseries.offsets.BusinessMonthBegin().rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.n\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthBegin(n=1)\n```", "code": "bm = pd.tseries.offsets.BusinessMonthBegin(n=1)"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthEnd()\nprint(result) # Output: Timestamp('2022-08-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthEnd()\nprint(result) # Output: Timestamp('2022-08-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CBMonthEnd\nOutput:\n```python\ncb_month_end = pd.tseries.offsets.CBMonthEnd()\n```", "code": "cb_month_end = pd.tseries.offsets.CBMonthEnd()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthEnd(5).freqstr # '<5 * CustomBusinessMonthEnds>'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthEnd(5).freqstr # '<5 * CustomBusinessMonthEnds>'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset\nOutput:\n```python\ncustom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.m_offset # returns <CustomBusinessMonthEnd: n=2>\n```", "code": "custom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.m_offset # returns <CustomBusinessMonthEnd: n=2>"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.name\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.CustomBusinessMonthEnd(n=2).nanos\n```", "code": "offset = pd.tseries.offsets.CustomBusinessMonthEnd(n=2).nanos"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.normalize\nOutput:\n```python\ncustom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-04-29 00:00:00')\n```", "code": "custom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-04-29 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code\nOutput:\n```python\ncustom_business_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncustom_business_month_end.rule_code # outputs 'CBM'\n```", "code": "custom_business_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncustom_business_month_end.rule_code # outputs 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.n\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask\nOutput:\n```python\ncbme = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbme = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.calendar\nOutput:\n```python\ncal = pd.tseries.offsets.CustomBusinessMonthEnd(calendar='indian').calendar()\n```", "code": "cal = pd.tseries.offsets.CustomBusinessMonthEnd(calendar='indian').calendar()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.CustomBusinessMonthEnd().holidays()\n```", "code": "holidays = pd.tseries.offsets.CustomBusinessMonthEnd().holidays()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthBegin()\nprint(result) # Timestamp('2022-09-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthBegin()\nprint(result) # Timestamp('2022-09-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CBMonthBegin\nOutput:\n```python\ncb_month_begin = pd.tseries.offsets.CBMonthBegin()\n```", "code": "cb_month_begin = pd.tseries.offsets.CBMonthBegin()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=[datetime.date(2022, 1, 1), datetime.date(2022, 12, 25)]).freqstr\n```", "code": "pd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=[datetime.date(2022, 1, 1), datetime.date(2022, 12, 25)]).freqstr"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset\nOutput:\n```python\noffset = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.nanos\nOutput:\n```python\nCustomBusinessMonthBegin.nanos # 0\n```", "code": "CustomBusinessMonthBegin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.normalize\nOutput:\n```python\ncustom_month_begin = pd.tseries.offsets.CustomBusinessMonthBegin(n=1)\ncustom_month_begin.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2023-01-02 00:00:00')\n```", "code": "custom_month_begin = pd.tseries.offsets.CustomBusinessMonthBegin(n=1)\ncustom_month_begin.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2023-01-02 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthBegin(month=1, n=1)\ncbm.rule_code # outputs 'CBMS'\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthBegin(month=1, n=1)\ncbm.rule_code # outputs 'CBMS'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.n\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask\nOutput:\n```python\ncbm = CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbm = CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.calendar\nOutput:\n```python\ncbm = CustomBusinessMonthBegin(calendar=USFederalHolidayCalendar())\ncbm.calendar # outputs USFederalHolidayCalendar\n```", "code": "cbm = CustomBusinessMonthBegin(calendar=USFederalHolidayCalendar())\ncbm.calendar # outputs USFederalHolidayCalendar"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.CustomBusinessMonthBegin().holidays()\n```", "code": "holidays = pd.tseries.offsets.CustomBusinessMonthBegin().holidays()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end\nOutput:\n```python\nfreq = pd.offsets.Hour(5)\nts = pd.Timestamp(2022, 1, 1)\nfreq.is_year_end(ts) # False\n```", "code": "freq = pd.offsets.Hour(5)\nts = pd.Timestamp(2022, 1, 1)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 14)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 31)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-02-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\npd.offsets.SemiMonthEnd().rollforward(ts) # Timestamp('2022-01-15 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 14)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 31)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-02-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\npd.offsets.SemiMonthEnd().rollforward(ts) # Timestamp('2022-01-15 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.name\nOutput:\n```python\npd.offsets.SemiMonthEnd().name # 'SM'\n```", "code": "pd.offsets.SemiMonthEnd().name # 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.nanos\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.nanos # 0\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.normalize\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2022-12-15')\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2022-12-15')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.rule_code\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.rule_code # 'SM'\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.rule_code # 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.n\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd(n=2)\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.day_of_month\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.day_of_month # 15\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.day_of_month # 15"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.SemiMonthBegin() # Timestamp('2022-01-15 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.SemiMonthBegin() # Timestamp('2022-01-15 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.SemiMonthBegin().freqstr # '<SMS>'\n```", "code": "pd.tseries.offsets.SemiMonthBegin().freqstr # '<SMS>'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.SemiMonthBegin().name # 'SMS'\n```", "code": "pd.tseries.offsets.SemiMonthBegin().name # 'SMS'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.nanos\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.nanos # 0\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.normalize\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.normalize(pd.Timestamp('2022-12-15')) # Outputs Timestamp('2022-12-16 00:00:00')\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.normalize(pd.Timestamp('2022-12-15')) # Outputs Timestamp('2022-12-16 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.rule_code\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.rule_code # outputs 'SM'\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.rule_code # outputs 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.n\nOutput:\n```python\nsemi_month = pd.tseries.offsets.SemiMonthBegin(n=2)\n```", "code": "semi_month = pd.tseries.offsets.SemiMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.day_of_month\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.day_of_month # 1\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.day_of_month # 1"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week\nOutput:\n```python\ndate_object = pd.Timestamp(\"2023-01-13\")\ndate_plus_one_week = date_object + pd.tseries.offsets.Week(n=1)\ndate_next_monday = date_object + pd.tseries.offsets.Week(weekday=0)\ndate_next_sunday = date_object + pd.tseries.offsets.Week(weekday=6)\n```", "code": "date_object = pd.Timestamp(\"2023-01-13\")\ndate_plus_one_week = date_object + pd.tseries.offsets.Week(n=1)\ndate_next_monday = date_object + pd.tseries.offsets.Week(weekday=0)\ndate_next_sunday = date_object + pd.tseries.offsets.Week(weekday=6)"}
{"text": "Instance: pandas.tseries.offsets.Week.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Week.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Week.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Week.nanos\nOutput:\n```python\nweek = pd.tseries.offsets.Week()\nweek.nanos # 604800000000000\n```", "code": "week = pd.tseries.offsets.Week()\nweek.nanos # 604800000000000"}
{"text": "Instance: pandas.tseries.offsets.Week.normalize\nOutput:\n```python\nweek = pd.tseries.offsets.Week(normalize=True)\n```", "code": "week = pd.tseries.offsets.Week(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.Week.rule_code\nOutput:\n```python\nweek_offset = pd.tseries.offsets.Week()\nrule_code = week_offset.rule_code # outputs 'W'\n```", "code": "week_offset = pd.tseries.offsets.Week()\nrule_code = week_offset.rule_code # outputs 'W'"}
{"text": "Instance: pandas.tseries.offsets.Week.n\nOutput:\n```python\nweek = pd.tseries.offsets.Week(n=2)\n```", "code": "week = pd.tseries.offsets.Week(n=2)"}
{"text": "Instance: pandas.tseries.offsets.Week.weekday\nOutput:\n```python\nweek = pd.tseries.offsets.Week()\nweekday = week.weekday # outputs 6 for Saturday\n```", "code": "week = pd.tseries.offsets.Week()\nweekday = week.weekday # outputs 6 for Saturday"}
{"text": "Instance: pandas.tseries.offsets.Week.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.WeekOfMonth()\n# Timestamp('2022-01-03 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.WeekOfMonth()\n# Timestamp('2022-01-03 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.name\nOutput:\n```python\npd.offsets.WeekOfMonth().name # 'week'\n```", "code": "pd.offsets.WeekOfMonth().name # 'week'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.nanos\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnanos = week_of_month.nanos\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnanos = week_of_month.nanos"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.normalize\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnormalized_week = week.normalize(pd.Timestamp('2022-01-15'))\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnormalized_week = week.normalize(pd.Timestamp('2022-01-15'))"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.rule_code\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nrule_code = week_of_month.rule_code # outputs 'WOM-2TUE'\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nrule_code = week_of_month.rule_code # outputs 'WOM-2TUE'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.n\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.week\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.weekday\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.LastWeekOfMonth() # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.LastWeekOfMonth() # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.freqstr\nOutput:\n```python\npd.tseries.offsets.LastWeekOfMonth(2).freqstr # '2LWOM'\n```", "code": "pd.tseries.offsets.LastWeekOfMonth(2).freqstr # '2LWOM'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.name\nOutput:\n```python\npd.tseries.offsets.LastWeekOfMonth().name # 'LastWeekOfMonth'\n```", "code": "pd.tseries.offsets.LastWeekOfMonth().name # 'LastWeekOfMonth'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.nanos\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(n=1)\nlast_week.nanos # outputs 0\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(n=1)\nlast_week.nanos # outputs 0"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.normalize\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(normalize=True)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.rule_code\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth()\nlast_week.rule_code # 'LWOM'\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth()\nlast_week.rule_code # 'LWOM'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.n\nOutput:\n```python\nlwom = pd.tseries.offsets.LastWeekOfMonth(n=2)\n```", "code": "lwom = pd.tseries.offsets.LastWeekOfMonth(n=2)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.weekday\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(weekday=2)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(weekday=2)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.week\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(week=0)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(week=0)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd\nOutput:\n```python\nts + BQuarterEnd(2)\n```", "code": "ts + BQuarterEnd(2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.BQuarterEnd(2).freqstr # '2BQ'\n```", "code": "pd.tseries.offsets.BQuarterEnd(2).freqstr # '2BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.name\nOutput:\n```python\npd.tseries.offsets.BQuarterEnd().name # 'BQuarterEnd'\n```", "code": "pd.tseries.offsets.BQuarterEnd().name # 'BQuarterEnd'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterEnd()\noffset.nanos # 7776000000000\n```", "code": "offset = pd.tseries.offsets.BQuarterEnd()\noffset.nanos # 7776000000000"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.normalize\nOutput:\n```python\nquarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "quarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.rule_code\nOutput:\n```python\nquarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.rule_code # 'BQ'\n```", "code": "quarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.rule_code # 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.n\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterEnd(n=2)\n```", "code": "offset = pd.tseries.offsets.BQuarterEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.startingMonth\nOutput:\n```python\nBQuarterEnd(startingMonth=1) # Business quarter end frequency with starting month as January\n```", "code": "BQuarterEnd(startingMonth=1) # Business quarter end frequency with starting month as January"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin\nOutput:\n```python\nts + BQuarterBegin(2) # Timestamp('2020-09-01 05:01:15')\n```", "code": "ts + BQuarterBegin(2) # Timestamp('2020-09-01 05:01:15')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.BQuarterBegin().freqstr # 'BQ'\n```", "code": "pd.tseries.offsets.BQuarterBegin().freqstr # 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.name\nOutput:\n```python\npd.tseries.offsets.BQuarterBegin().name # 'BQuarterBegin'\n```", "code": "pd.tseries.offsets.BQuarterBegin().name # 'BQuarterBegin'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterBegin()\noffset.nanos # 0\n```", "code": "offset = pd.tseries.offsets.BQuarterBegin()\noffset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.normalize\nOutput:\n```python\ndate = pd.Timestamp('2022-03-15')\nnormalized_date = pd.tseries.offsets.BQuarterBegin().normalize(date) # Output: Timestamp('2022-01-01 00:00:00')\n```", "code": "date = pd.Timestamp('2022-03-15')\nnormalized_date = pd.tseries.offsets.BQuarterBegin().normalize(date) # Output: Timestamp('2022-01-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.BQuarterBegin().rule_code # outputs 'BQ'\n```", "code": "code = pd.tseries.offsets.BQuarterBegin().rule_code # outputs 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.BQuarterBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.startingMonth\nOutput:\n```python\nBQuarterBegin(startingMonth=1) # returns a business day offset that represents the start of the quarter with January as the starting month\n```", "code": "BQuarterBegin(startingMonth=1) # returns a business day offset that represents the start of the quarter with January as the starting month"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterEnd() # Timestamp('2022-03-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterEnd() # Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.QuarterEnd(2).freqstr # '2Q'\n```", "code": "pd.tseries.offsets.QuarterEnd(2).freqstr # '2Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.name\nOutput:\n```python\npd.offsets.QuarterEnd().name # 'Q'\n```", "code": "pd.offsets.QuarterEnd().name # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.nanos\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.nanos # 7776000000000\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.nanos # 7776000000000"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.normalize\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.rule_code\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.rule_code # 'Q'\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.rule_code # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.n\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd(n=1)\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd(n=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.startingMonth\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd(startingMonth=1)\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd(startingMonth=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterBegin() # Timestamp('2022-03-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterBegin() # Timestamp('2022-03-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.QuarterBegin().freqstr # 'Q'\n```", "code": "pd.tseries.offsets.QuarterBegin().freqstr # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.name\nOutput:\n```python\npd.tseries.offsets.QuarterBegin().name # 'Q'\n```", "code": "pd.tseries.offsets.QuarterBegin().name # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.nanos\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.nanos # 0\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.normalize\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nnormalized_date = quarter_begin.normalize(pd.Timestamp('2022-06-15'))\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nnormalized_date = quarter_begin.normalize(pd.Timestamp('2022-06-15'))"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.rule_code\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.rule_code # outputs 'Q'\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.rule_code # outputs 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.n\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin(n=1)\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin(n=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.startingMonth\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin(startingMonth=1)\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin(startingMonth=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd\nOutput:\n```python\nts = pd.Timestamp('2020-05-24 05:01:15')\nts - BYearEnd()\nts + BYearEnd()\nts + BYearEnd(3)\nts + BYearEnd(-3)\nts + BYearEnd(month=11)\n```", "code": "ts = pd.Timestamp('2020-05-24 05:01:15')\nts - BYearEnd()\nts + BYearEnd()\nts + BYearEnd(3)\nts + BYearEnd(-3)\nts + BYearEnd(month=11)"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.name\nOutput:\n```python\npd.tseries.offsets.BYearEnd().name # 'BYearEnd'\n```", "code": "pd.tseries.offsets.BYearEnd().name # 'BYearEnd'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd(n=2).nanos # returns 63072000000000000\n```", "code": "offset = pd.tseries.offsets.BYearEnd(n=2).nanos # returns 63072000000000000"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd()\nnormalized_date = offset.normalize(pd.Timestamp('2022-12-15'))\n```", "code": "offset = pd.tseries.offsets.BYearEnd()\nnormalized_date = offset.normalize(pd.Timestamp('2022-12-15'))"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BYearEnd().rule_code # outputs 'BYE'\n```", "code": "rule_code = pd.tseries.offsets.BYearEnd().rule_code # outputs 'BYE'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.n\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd(n=2)\n```", "code": "offset = pd.tseries.offsets.BYearEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.month\nOutput:\n```python\nend_of_year = pd.tseries.offsets.BYearEnd()\nend_of_year.month # 12\n```", "code": "end_of_year = pd.tseries.offsets.BYearEnd()\nend_of_year.month # 12"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin\nOutput:\n```python\nts + BYearBegin(2) # Timestamp('2022-01-03 05:01:15')\n```", "code": "ts + BYearBegin(2) # Timestamp('2022-01-03 05:01:15')"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.BYearBegin().freqstr # '<BYS>'\n```", "code": "pd.tseries.offsets.BYearBegin().freqstr # '<BYS>'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.name\nOutput:\n```python\npd.tseries.offsets.BYearBegin().name # 'BYearBegin'\n```", "code": "pd.tseries.offsets.BYearBegin().name # 'BYearBegin'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin()\noffset.nanos # 0\n```", "code": "offset = pd.tseries.offsets.BYearBegin()\noffset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin()\nnormalized_date = offset.normalize(pd.Timestamp('2022-05-15'))\n```", "code": "offset = pd.tseries.offsets.BYearBegin()\nnormalized_date = offset.normalize(pd.Timestamp('2022-05-15'))"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BYearBegin().rule_code # outputs 'B'\n```", "code": "rule_code = pd.tseries.offsets.BYearBegin().rule_code # outputs 'B'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.BYearBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.month\nOutput:\n```python\nb_year_begin = pd.tseries.offsets.BYearBegin()\nb_year_begin.month # outputs 1\n```", "code": "b_year_begin = pd.tseries.offsets.BYearBegin()\nb_year_begin.month # outputs 1"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2022-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2023-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd(month=2)\nprint(result) # Timestamp('2022-02-28 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = pd.offsets.YearEnd().rollforward(ts)\nprint(result) # Timestamp('2022-12-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2022-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2023-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd(month=2)\nprint(result) # Timestamp('2022-02-28 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = pd.offsets.YearEnd().rollforward(ts)\nprint(result) # Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.name\nOutput:\n```python\npd.offsets.YearEnd().name # 'YearEnd'\n```", "code": "pd.offsets.YearEnd().name # 'YearEnd'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.nanos\nOutput:\n```python\npd.tseries.offsets.YearEnd().nanos # 0\n```", "code": "pd.tseries.offsets.YearEnd().nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.normalize\nOutput:\n```python\ndates = pd.date_range('2022-01-01', periods=5, freq='Y')\nend_of_year = pd.tseries.offsets.YearEnd().normalize(dates)\n```", "code": "dates = pd.date_range('2022-01-01', periods=5, freq='Y')\nend_of_year = pd.tseries.offsets.YearEnd().normalize(dates)"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.YearEnd.rule_code # outputs 'A'\n```", "code": "code = pd.tseries.offsets.YearEnd.rule_code # outputs 'A'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.n\nOutput:\n```python\nyear_end_offset = pd.tseries.offsets.YearEnd(n=2)\n```", "code": "year_end_offset = pd.tseries.offsets.YearEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.month\nOutput:\n```python\nend_of_year = pd.tseries.offsets.YearEnd()\nend_of_year.month # outputs 12\n```", "code": "end_of_year = pd.tseries.offsets.YearEnd()\nend_of_year.month # outputs 12"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2024-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.YearBegin(month=2)\n# Output: Timestamp('2022-02-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\npd.offsets.YearBegin().rollback(ts)\n# Output: Timestamp('2023-01-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2024-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.YearBegin(month=2)\n# Output: Timestamp('2022-02-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\npd.offsets.YearBegin().rollback(ts)\n# Output: Timestamp('2023-01-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.YearBegin().freqstr # 'A-DEC'\n```", "code": "pd.tseries.offsets.YearBegin().freqstr # 'A-DEC'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.name\nOutput:\n```python\npd.tseries.offsets.YearBegin().name # 'YearBegin'\n```", "code": "pd.tseries.offsets.YearBegin().name # 'YearBegin'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.nanos\nOutput:\n```python\npd.tseries.offsets.YearBegin.nanos # returns 0\n```", "code": "pd.tseries.offsets.YearBegin.nanos # returns 0"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.normalize\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin(normalize=True)\n```", "code": "year_begin = pd.tseries.offsets.YearBegin(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.YearBegin().rule_code # outputs 'BYEAR'\n```", "code": "code = pd.tseries.offsets.YearBegin().rule_code # outputs 'BYEAR'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.n\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin(n=2)\n```", "code": "year_begin = pd.tseries.offsets.YearBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.month\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin()\nmonth = year_begin.month # outputs 1\n```", "code": "year_begin = pd.tseries.offsets.YearBegin()\nmonth = year_begin.month # outputs 1"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253()\nprint(result) # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253()\nprint(result) # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.FY5253.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.FY5253.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.nanos\nOutput:\n```python\nfy_offset = pd.tseries.offsets.FY5253()\nfy_offset.nanos # 0\n```", "code": "fy_offset = pd.tseries.offsets.FY5253()\nfy_offset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.FY5253.normalize\nOutput:\n```python\nfy = pd.tseries.offsets.FY5253()\nnormalized_date = fy.normalize(pd.Timestamp('2022-09-30'))\n```", "code": "fy = pd.tseries.offsets.FY5253()\nnormalized_date = fy.normalize(pd.Timestamp('2022-09-30'))"}
{"text": "Instance: pandas.tseries.offsets.FY5253.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.FY5253.rule_code\n```", "code": "rule_code = pd.tseries.offsets.FY5253.rule_code"}
{"text": "Instance: pandas.tseries.offsets.FY5253.n\nOutput:\n```python\nfy = pd.tseries.offsets.FY5253(n=2)\n```", "code": "fy = pd.tseries.offsets.FY5253(n=2)"}
{"text": "Instance: pandas.tseries.offsets.FY5253.startingMonth\nOutput:\n```python\nfy = FY5253()\nfy.startingMonth # outputs 4\n```", "code": "fy = FY5253()\nfy.startingMonth # outputs 4"}
{"text": "Instance: pandas.tseries.offsets.FY5253.variation\nOutput:\n```python\nfy_variation = pd.tseries.offsets.FY5253.variation\n```", "code": "fy_variation = pd.tseries.offsets.FY5253.variation"}
{"text": "Instance: pandas.tseries.offsets.FY5253.weekday\nOutput:\n```python\noffset = FY5253()\noffset.weekday # outputs 'WEEKDAY'\n```", "code": "offset = FY5253()\noffset.weekday # outputs 'WEEKDAY'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.get_rule_code_suffix\nOutput:\n```python\nsuffix = pd.tseries.offsets.FY5253.get_rule_code_suffix() # returns 'FY5253'\n```", "code": "suffix = pd.tseries.offsets.FY5253.get_rule_code_suffix() # returns 'FY5253'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.get_year_end\nOutput:\n```python\nend_of_year = pd.tseries.offsets.FY5253().get_year_end(pd.Timestamp('2022-01-01'))\n```", "code": "end_of_year = pd.tseries.offsets.FY5253().get_year_end(pd.Timestamp('2022-01-01'))"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253Quarter()\nprint(result) # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253Quarter()\nprint(result) # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.kwds\nOutput:\n```python\npd.offsets.FY5253Quarter().kwds\n# Output: {'weekday': 0, 'startingMonth': 1, 'qtr_with_extra_week': 1, 'variation': 'nearest'}\n```", "code": "pd.offsets.FY5253Quarter().kwds\n# Output: {'weekday': 0, 'startingMonth': 1, 'qtr_with_extra_week': 1, 'variation': 'nearest'}"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.nanos\nOutput:\n```python\nFY5253Quarter().nanos # returns 7884000000000\n```", "code": "FY5253Quarter().nanos # returns 7884000000000"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.normalize\nOutput:\n```python\nquarter = pd.tseries.offsets.FY5253Quarter()\nnormalized_quarter = quarter.normalize()\n```", "code": "quarter = pd.tseries.offsets.FY5253Quarter()\nnormalized_quarter = quarter.normalize()"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.FY5253Quarter.rule_code # outputs 'FY5253'\n```", "code": "code = pd.tseries.offsets.FY5253Quarter.rule_code # outputs 'FY5253'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.n\nOutput:\n```python\nqtr = pd.tseries.offsets.FY5253Quarter(n=2)\n```", "code": "qtr = pd.tseries.offsets.FY5253Quarter(n=2)"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week\nOutput:\n```python\nextra_week_qtr = pd.tseries.offsets.FY5253Quarter.qtr_with_extra_week(2022, 1)\n```", "code": "extra_week_qtr = pd.tseries.offsets.FY5253Quarter.qtr_with_extra_week(2022, 1)"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.startingMonth\nOutput:\n```python\nquarter = FY5253Quarter()\nquarter.startingMonth # 1\n```", "code": "quarter = FY5253Quarter()\nquarter.startingMonth # 1"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.variation\nOutput:\n```python\nvariation = pd.tseries.offsets.FY5253Quarter.variation\n```", "code": "variation = pd.tseries.offsets.FY5253Quarter.variation"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.weekday\nOutput:\n```python\nquarter = pd.tseries.offsets.FY5253Quarter()\nquarter.weekday # outputs 3\n```", "code": "quarter = pd.tseries.offsets.FY5253Quarter()\nquarter.weekday # outputs 3"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix\nOutput:\n```python\nsuffix = pd.tseries.offsets.FY5253Quarter().get_rule_code_suffix() # outputs 'FY5253Q'\n```", "code": "suffix = pd.tseries.offsets.FY5253Quarter().get_rule_code_suffix() # outputs 'FY5253Q'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.get_weeks\nOutput:\n```python\nfyq = pd.tseries.offsets.FY5253Quarter(n=1)\nweeks = fyq.get_weeks()\n```", "code": "fyq = pd.tseries.offsets.FY5253Quarter(n=1)\nweeks = fyq.get_weeks()"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.year_has_extra_week\nOutput:\n```python\nFY5253Quarter.year_has_extra_week(2023) # False\n```", "code": "FY5253Quarter.year_has_extra_week(2023) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.Easter()\n# Timestamp('2022-04-17 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.Easter()\n# Timestamp('2022-04-17 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Easter.freqstr\nOutput:\n```python\npd.tseries.offsets.Easter().freqstr # 'Easter'\n```", "code": "pd.tseries.offsets.Easter().freqstr # 'Easter'"}
{"text": "Instance: pandas.tseries.offsets.Easter.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Easter.name\nOutput:\n```python\npd.tseries.offsets.Easter().name # 'Easter'\n```", "code": "pd.tseries.offsets.Easter().name # 'Easter'"}
{"text": "Instance: pandas.tseries.offsets.Easter.nanos\nOutput:\n```python\neaster = pd.tseries.offsets.Easter()\neaster_nanoseconds = easter.nanos # outputs 0\n```", "code": "easter = pd.tseries.offsets.Easter()\neaster_nanoseconds = easter.nanos # outputs 0"}
{"text": "Instance: pandas.tseries.offsets.Easter.normalize\nOutput:\n```python\neaster = pd.tseries.offsets.Easter()\neaster.normalize(pd.Timestamp('2022-04-17')) # Output: Timestamp('2022-04-17 00:00:00')\n```", "code": "easter = pd.tseries.offsets.Easter()\neaster.normalize(pd.Timestamp('2022-04-17')) # Output: Timestamp('2022-04-17 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Easter.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.Easter.rule_code\n```", "code": "rule_code = pd.tseries.offsets.Easter.rule_code"}
{"text": "Instance: pandas.tseries.offsets.Easter.n\nOutput:\n```python\neaster = pd.tseries.offsets.Easter.nth(n=1)\n```", "code": "easter = pd.tseries.offsets.Easter.nth(n=1)"}
{"text": "Instance: pandas.tseries.offsets.Easter.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(3)\n```", "code": "tick = pd.tseries.offsets.Tick(3)"}
{"text": "Instance: pandas.tseries.offsets.Tick.delta\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(delta=5)\n```", "code": "tick = pd.tseries.offsets.Tick(delta=5)"}
{"text": "Instance: pandas.tseries.offsets.Tick.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Tick.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Tick.name\nOutput:\n```python\ntick = pd.tseries.offsets.Tick()\ntick.name # outputs 'tick'\n```", "code": "tick = pd.tseries.offsets.Tick()\ntick.name # outputs 'tick'"}
{"text": "Instance: pandas.tseries.offsets.Tick.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Tick.normalize\nOutput:\n```python\ntick = pd.Timestamp('2022-12-31 23:59:59', tz='US/Eastern')\ntick.normalize() # Output: Timestamp('2022-12-31 00:00:00')\n```", "code": "tick = pd.Timestamp('2022-12-31 23:59:59', tz='US/Eastern')\ntick.normalize() # Output: Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Tick.rule_code\nOutput:\n```python\ntick = pd.tseries.offsets.Tick()\ntick.rule_code # outputs 'TICK'\n```", "code": "tick = pd.tseries.offsets.Tick()\ntick.rule_code # outputs 'TICK'"}
{"text": "Instance: pandas.tseries.offsets.Tick.n\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(n=5)\n```", "code": "tick = pd.tseries.offsets.Tick(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Tick.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Day()\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Day()"}
{"text": "Instance: pandas.tseries.offsets.Day.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Day(5)\n```", "code": "delta = pd.tseries.offsets.Day(5)"}
{"text": "Instance: pandas.tseries.offsets.Day.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Day.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Day.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Day.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Day.normalize\nOutput:\n```python\ndate = pd.Timestamp('2022-12-31 08:00:00')\nnormalized_date = pd.tseries.offsets.Day().normalize(date)\n```", "code": "date = pd.Timestamp('2022-12-31 08:00:00')\nnormalized_date = pd.tseries.offsets.Day().normalize(date)"}
{"text": "Instance: pandas.tseries.offsets.Day.rule_code\nOutput:\n```python\nday = pd.tseries.offsets.Day()\nday.rule_code # 'D'\n```", "code": "day = pd.tseries.offsets.Day()\nday.rule_code # 'D'"}
{"text": "Instance: pandas.tseries.offsets.Day.n\nOutput:\n```python\nday = pd.tseries.offsets.Day(3)\n```", "code": "day = pd.tseries.offsets.Day(3)"}
{"text": "Instance: pandas.tseries.offsets.Day.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Hour() # Timestamp('2022-12-09 16:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Hour() # Timestamp('2022-12-09 16:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Hour.delta\nOutput:\n```python\nhour = pd.tseries.offsets.Hour()\ndelta = hour.delta(hours=2)\n```", "code": "hour = pd.tseries.offsets.Hour()\ndelta = hour.delta(hours=2)"}
{"text": "Instance: pandas.tseries.offsets.Hour.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Hour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Hour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Hour.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Hour.normalize\nOutput:\n```python\nhour = pd.Timestamp('2022-12-31 23:45:00')\nnormalized_hour = hour.normalize()\n```", "code": "hour = pd.Timestamp('2022-12-31 23:45:00')\nnormalized_hour = hour.normalize()"}
{"text": "Instance: pandas.tseries.offsets.Hour.rule_code\nOutput:\n```python\nhour_offset = pd.tseries.offsets.Hour()\nhour_offset.rule_code # 'H'\n```", "code": "hour_offset = pd.tseries.offsets.Hour()\nhour_offset.rule_code # 'H'"}
{"text": "Instance: pandas.tseries.offsets.Hour.n\nOutput:\n```python\nhour = pd.tseries.offsets.Hour(n=3)\n```", "code": "hour = pd.tseries.offsets.Hour(n=3)"}
{"text": "Instance: pandas.tseries.offsets.Hour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Minute(n=10) # Timestamp('2022-12-09 15:10:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Minute(n=10) # Timestamp('2022-12-09 15:10:00')"}
{"text": "Instance: pandas.tseries.offsets.Minute.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Minute(15)\n```", "code": "delta = pd.tseries.offsets.Minute(15)"}
{"text": "Instance: pandas.tseries.offsets.Minute.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Minute.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Minute.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Minute.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Minute.normalize\nOutput:\n```python\npd.Timestamp('2022-12-31 23:59:00').normalize() # Output: Timestamp('2022-12-31 00:00:00')\n```", "code": "pd.Timestamp('2022-12-31 23:59:00').normalize() # Output: Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Minute.rule_code\nOutput:\n```python\nrule = pd.tseries.offsets.Minute.rule_code\n```", "code": "rule = pd.tseries.offsets.Minute.rule_code"}
{"text": "Instance: pandas.tseries.offsets.Minute.n\nOutput:\n```python\noffset = pd.tseries.offsets.Minute(15)\n```", "code": "offset = pd.tseries.offsets.Minute(15)"}
{"text": "Instance: pandas.tseries.offsets.Minute.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Second(n=10) # Timestamp('2022-12-09 15:00:10')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Second(n=10) # Timestamp('2022-12-09 15:00:10')"}
{"text": "Instance: pandas.tseries.offsets.Second.delta\nOutput:\n```python\nsecond = pd.tseries.offsets.Second()\nsecond.delta # outputs Timedelta('0 days 00:00:01')\n```", "code": "second = pd.tseries.offsets.Second()\nsecond.delta # outputs Timedelta('0 days 00:00:01')"}
{"text": "Instance: pandas.tseries.offsets.Second.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Second.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Second.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Second.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Second.normalize\nOutput:\n```python\nsecond = pd.tseries.offsets.Second(normalize=True)\n```", "code": "second = pd.tseries.offsets.Second(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.Second.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.Second.rule_code # returns the rule code for the Second offset\n```", "code": "code = pd.tseries.offsets.Second.rule_code # returns the rule code for the Second offset"}
{"text": "Instance: pandas.tseries.offsets.Second.n\nOutput:\n```python\nsecond_offset = pd.tseries.offsets.Second(n=5)\n```", "code": "second_offset = pd.tseries.offsets.Second(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Second.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Milli(n=10) # Timestamp('2022-12-09 15:00:00.010000')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Milli(n=10) # Timestamp('2022-12-09 15:00:00.010000')"}
{"text": "Instance: pandas.tseries.offsets.Milli.delta\nOutput:\n```python\nmilli_offset = pd.tseries.offsets.Milli()\nmilli_offset.delta # Timedelta('0 days 00:00:00.001000')\n```", "code": "milli_offset = pd.tseries.offsets.Milli()\nmilli_offset.delta # Timedelta('0 days 00:00:00.001000')"}
{"text": "Instance: pandas.tseries.offsets.Milli.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Milli.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Milli.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Milli.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Milli.normalize\nOutput:\n```python\nmilli_offset = pd.tseries.offsets.Milli()\nmilli_offset.normalize(pd.Timestamp('2022-12-31 23:59:59.999999999')) # returns Timestamp('2022-12-31 23:59:59.999999999')\n```", "code": "milli_offset = pd.tseries.offsets.Milli()\nmilli_offset.normalize(pd.Timestamp('2022-12-31 23:59:59.999999999')) # returns Timestamp('2022-12-31 23:59:59.999999999')"}
{"text": "Instance: pandas.tseries.offsets.Milli.rule_code\nOutput:\n```python\nmilli = pd.tseries.offsets.Milli()\nmilli.rule_code # outputs 'M'\n```", "code": "milli = pd.tseries.offsets.Milli()\nmilli.rule_code # outputs 'M'"}
{"text": "Instance: pandas.tseries.offsets.Milli.n\nOutput:\n```python\nmilli = pd.tseries.offsets.Milli(5)\n```", "code": "milli = pd.tseries.offsets.Milli(5)"}
{"text": "Instance: pandas.tseries.offsets.Milli.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Micro(n=1000) # Timestamp('2022-12-09 15:00:00.001000')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Micro(n=1000) # Timestamp('2022-12-09 15:00:00.001000')"}
{"text": "Instance: pandas.tseries.offsets.Micro.delta\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro()\ndelta = micro.delta(days=1, seconds=10)\n```", "code": "micro = pd.tseries.offsets.Micro()\ndelta = micro.delta(days=1, seconds=10)"}
{"text": "Instance: pandas.tseries.offsets.Micro.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Micro.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Micro.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Micro.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Micro.normalize\nOutput:\n```python\nmicro = pd.Timestamp('2022-12-31 23:59:59.999999').normalize()\n```", "code": "micro = pd.Timestamp('2022-12-31 23:59:59.999999').normalize()"}
{"text": "Instance: pandas.tseries.offsets.Micro.rule_code\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro()\nmicro.rule_code # 'U'\n```", "code": "micro = pd.tseries.offsets.Micro()\nmicro.rule_code # 'U'"}
{"text": "Instance: pandas.tseries.offsets.Micro.n\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro(n=5)\n```", "code": "micro = pd.tseries.offsets.Micro(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Micro.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Nano(n=1000) # Timestamp('2022-12-09 15:00:00.000001')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Nano(n=1000) # Timestamp('2022-12-09 15:00:00.000001')"}
{"text": "Instance: pandas.tseries.offsets.Nano.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Nano()\n```", "code": "delta = pd.tseries.offsets.Nano()"}
{"text": "Instance: pandas.tseries.offsets.Nano.freqstr\nOutput:\n```python\npd.offsets.Nano().freqstr # 'ns'\n```", "code": "pd.offsets.Nano().freqstr # 'ns'"}
{"text": "Instance: pandas.tseries.offsets.Nano.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Nano.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Nano.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Nano.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.Nano()\nnormalized_offset = offset.normalize()\n```", "code": "offset = pd.tseries.offsets.Nano()\nnormalized_offset = offset.normalize()"}
{"text": "Instance: pandas.tseries.offsets.Nano.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.Nano.rule_code # outputs 'N'\n```", "code": "code = pd.tseries.offsets.Nano.rule_code # outputs 'N'"}
{"text": "Instance: pandas.tseries.offsets.Nano.n\nOutput:\n```python\nn = pd.tseries.offsets.Nano(n=5)\n```", "code": "n = pd.tseries.offsets.Nano(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Nano.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.PeriodIndex.from_ordinals\nOutput:\n```python\nordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)\n```", "code": "ordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset\nOutput:\n```python\nts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')\n```", "code": "ts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')"}
{"text": "Instance: pandas.core.window.rolling.Rolling.count\nOutput:\n```python\ns = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()\n```", "code": "s = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.sum\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": [20, 25, 30, 35, 40], \"Humidity\": [50, 55, 60, 65, 70]})\ndf.rolling(2).sum()\n```\n", "code": "df = pd.DataFrame({\"Temperature\": [20, 25, 30, 35, 40], \"Humidity\": [50, 55, 60, 65, 70]})\ndf.rolling(2).sum()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.mean\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.rolling(2).mean() # Outputs rolling mean with window size 2\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.rolling(2).mean() # Outputs rolling mean with window size 2"}
{"text": "Instance: pandas.core.window.rolling.Rolling.median\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3, 4])\ns.rolling(3).median()\n```", "code": "s = pd.Series([0, 1, 2, 3, 4])\ns.rolling(3).median()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.var\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).var()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).var()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.std\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).std()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).std()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.min\nOutput:\n```python\ns = pd.Series([4, 3, 5, 2, 6])\ns.rolling(3).min() # outputs a Series with rolling minimum values\n```", "code": "s = pd.Series([4, 3, 5, 2, 6])\ns.rolling(3).min() # outputs a Series with rolling minimum values"}
{"text": "Instance: pandas.core.window.rolling.Rolling.max\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nser.rolling(2).max()\n# Output:\n# 0    NaN\n# 1    2.0\n# 2    3.0\n# 3    4.0\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.rolling(2).max()\n# Output:\n# 0    NaN\n# 1    2.0\n# 2    3.0\n# 3    4.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.rolling.Rolling.corr\nOutput:\n```python\ndf = pd.DataFrame(matrix, columns=['Temperature', 'Humidity'])\ndf.rolling(3).corr(pairwise=True)\n```", "code": "df = pd.DataFrame(matrix, columns=['Temperature', 'Humidity'])\ndf.rolling(3).corr(pairwise=True)"}
{"text": "Instance: pandas.core.window.rolling.Rolling.cov\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([1, 4, 5, 8])\nresult = ser1.rolling(2).cov(ser2) # calculates the rolling covariance between ser1 and ser2 with window size 2\n```", "code": "ser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([1, 4, 5, 8])\nresult = ser1.rolling(2).cov(ser2) # calculates the rolling covariance between ser1 and ser2 with window size 2"}
{"text": "Instance: pandas.core.window.rolling.Rolling.skew\nOutput:\n```python\nser = pd.Series([1, 5, 2, 7, 15, 6])\nser.rolling(3).skew().round(6)\n```", "code": "ser = pd.Series([1, 5, 2, 7, 15, 6])\nser.rolling(3).skew().round(6)"}
{"text": "Instance: pandas.core.window.rolling.Rolling.kurt\nOutput:\n```python\ns.rolling(4).kurt()\n```", "code": "s.rolling(4).kurt()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.apply\nOutput:\n```python\nser = pd.Series([1, 6, 5, 4])\nresult = ser.rolling(2).apply(lambda s: s.sum() - s.min())\n```", "code": "ser = pd.Series([1, 6, 5, 4])\nresult = ser.rolling(2).apply(lambda s: s.sum() - s.min())"}
{"text": "Instance: pandas.core.window.rolling.Rolling.aggregate\nOutput:\n```python\ndf.rolling(2).agg({\"A\": \"sum\", \"B\": \"min\"})\n```", "code": "df.rolling(2).agg({\"A\": \"sum\", \"B\": \"min\"})"}
{"text": "Instance: pandas.core.window.rolling.Rolling.quantile\nOutput:\n```python\ns.rolling(2).quantile(.4, interpolation='lower')\n```", "code": "s.rolling(2).quantile(.4, interpolation='lower')"}
{"text": "Instance: pandas.core.window.rolling.Rolling.sem\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3])\ns.rolling(2, min_periods=1).sem()\n```", "code": "s = pd.Series([0, 1, 2, 3])\ns.rolling(2, min_periods=1).sem()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.rank\nOutput:\n```python\ns = pd.Series([1, 4, 2, 3, 5, 3])\ns.rolling(3).rank()\n```", "code": "s = pd.Series([1, 4, 2, 3, 5, 3])\ns.rolling(3).rank()"}
{"text": "Instance: pandas.core.window.rolling.Window.mean\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').mean(std=3)\nprint(result)\n# Output:\n# 0    NaN\n# 1    0.5\n# 2    3.0\n# 3    3.5\n# 4    5.0\n# dtype: float64\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').mean(std=3)\nprint(result)\n# Output:\n# 0    NaN\n# 1    0.5\n# 2    3.0\n# 3    3.5\n# 4    5.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.rolling.Window.sum\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').sum(std=3)\nprint(result)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').sum(std=3)\nprint(result)"}
{"text": "Instance: pandas.core.window.rolling.Window.var\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nser.rolling(2, win_type='gaussian').var(std=3)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nser.rolling(2, win_type='gaussian').var(std=3)"}
{"text": "Instance: pandas.core.window.rolling.Window.std\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').std(std=3)\nprint(result)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').std(std=3)\nprint(result)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.count\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nresult = ser.expanding().count()\nresult\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nresult = ser.expanding().count()\nresult"}
{"text": "Instance: pandas.core.window.expanding.Expanding.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().sum()\n# Output:\n# a     1.0\n# b     3.0\n# c     6.0\n# d    10.0\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().sum()\n# Output:\n# a     1.0\n# b     3.0\n# c     6.0\n# d    10.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.expanding.Expanding.mean\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().mean()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().mean()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.median\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().median()\n# Output:\n# a    1.0\n# b    1.5\n# c    2.0\n# d    2.5\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().median()\n# Output:\n# a    1.0\n# b    1.5\n# c    2.0\n# d    2.5\n# dtype: float64"}
{"text": "Instance: pandas.core.window.expanding.Expanding.var\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.expanding(3).var()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.expanding(3).var()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.std\nOutput:\n```python\ns.expanding(3).std()\n```", "code": "s.expanding(3).std()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.min\nOutput:\n```python\nser = pd.Series([2, 3, 4, 1], index=['a', 'b', 'c', 'd'])\nser.expanding().min()\n```", "code": "ser = pd.Series([2, 3, 4, 1], index=['a', 'b', 'c', 'd'])\nser.expanding().min()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.max\nOutput:\n```python\nser = pd.Series([3, 2, 1, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().max()\n```", "code": "ser = pd.Series([3, 2, 1, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().max()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.corr\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser2 = pd.Series([10, 11, 13, 16], index=['a', 'b', 'c', 'd'])\nresult = ser1.expanding().corr(ser2)\nresult\n```\n", "code": "ser1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser2 = pd.Series([10, 11, 13, 16], index=['a', 'b', 'c', 'd'])\nresult = ser1.expanding().corr(ser2)\nresult"}
{"text": "Instance: pandas.core.window.expanding.Expanding.cov\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4], index=['apple', 'banana', 'cherry', 'date'])\nser2 = pd.Series([10, 11, 13, 16], index=['apple', 'banana', 'cherry', 'date'])\nresult = ser1.expanding().cov(ser2)\n```", "code": "ser1 = pd.Series([1, 2, 3, 4], index=['apple', 'banana', 'cherry', 'date'])\nser2 = pd.Series([10, 11, 13, 16], index=['apple', 'banana', 'cherry', 'date'])\nresult = ser1.expanding().cov(ser2)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.skew\nOutput:\n```python\nser = pd.Series([-1, 0, 2, -1, 2], index=['a', 'b', 'c', 'd', 'e'])\nser.expanding().skew()\n```", "code": "ser = pd.Series([-1, 0, 2, -1, 2], index=['a', 'b', 'c', 'd', 'e'])\nser.expanding().skew()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.kurt\nOutput:\n```python\ns.expanding(4).kurt()\n```", "code": "s.expanding(4).kurt()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.apply\nOutput:\n```python\nser.expanding().apply(lambda s: s.max() - 2 * s.min())\n```", "code": "ser.expanding().apply(lambda s: s.max() - 2 * s.min())"}
{"text": "Instance: pandas.core.window.expanding.Expanding.aggregate\nOutput:\n```python\ndf.expanding().aggregate({\"A\": \"sum\", \"B\": \"mean\", \"C\": \"max\"})\n```", "code": "df.expanding().aggregate({\"A\": \"sum\", \"B\": \"mean\", \"C\": \"max\"})"}
{"text": "Instance: pandas.core.window.expanding.Expanding.quantile\nOutput:\n```python\nser.expanding(min_periods=4).quantile(.25)\n```", "code": "ser.expanding(min_periods=4).quantile(.25)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.sem\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3])\ns.expanding().sem()\n```", "code": "s = pd.Series([0, 1, 2, 3])\ns.expanding().sem()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.rank\nOutput:\n```python\ns.expanding().rank(method=\"min\")\n```", "code": "s.expanding().rank(method=\"min\")"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.mean\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nresult = ser.ewm(alpha=.2).mean()\nresult\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nresult = ser.ewm(alpha=.2).mean()\nresult"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).sum()\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).sum()"}
{"text": "```python\nser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).std()\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).std()"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.var\nOutput:\n```python\nser.ewm(alpha=.2).var()\n```", "code": "ser.ewm(alpha=.2).var()"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.corr\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([10, 11, 13, 16])\nresult = ser1.ewm(alpha=.2).corr(ser2)\n```", "code": "ser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([10, 11, 13, 16])\nresult = ser1.ewm(alpha=.2).corr(ser2)"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.cov\nOutput:\n```python\nser1.ewm(alpha=.2).cov(ser2)\n```", "code": "ser1.ewm(alpha=.2).cov(ser2)"}
{"text": "Instance: pandas.api.indexers.BaseIndexer\nOutput:\n```python\nclass CustomIndexer(BaseIndexer):\n    def get_window_bounds(self, num_values, min_periods, center, closed, step):\n        start = np.empty(num_values, dtype=np.int64)\n        end = np.empty(num_values, dtype=np.int64)\n        for i in range(num_values):\n            start[i] = i\n            end[i] = i + self.window_size\n        return start, end\n```", "code": "class CustomIndexer(BaseIndexer):\n    def get_window_bounds(self, num_values, min_periods, center, closed, step):\n        start = np.empty(num_values, dtype=np.int64)\n        end = np.empty(num_values, dtype=np.int64)\n        for i in range(num_values):\n            start[i] = i\n            end[i] = i + self.window_size\n        return start, end"}
{"text": "Instance: pandas.api.indexers.FixedForwardWindowIndexer\nOutput:\n```python\nindexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\ndf.rolling(window=indexer, min_periods=1).sum()\n```", "code": "indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\ndf.rolling(window=indexer, min_periods=1).sum()"}
{"text": "Instance: pandas.api.indexers.VariableOffsetWindowIndexer\nOutput:\n```python\nindexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))\n```", "code": "indexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))"}
{"text": "Instance: pandas.tseries.frequencies.to_offset\nOutput:\n```python\noffset = pd.tseries.frequencies.to_offset(\"3H\")\n```", "code": "offset = pd.tseries.frequencies.to_offset(\"3H\")"}
{"text": "Instance: pandas.core.window.rolling.Rolling.count\nOutput:\n```python\ns = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()\n```", "code": "s = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.__iter__\nOutput:\n```python\nfor x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.__iter__\nOutput:\n```python\nfor x, y in ser.groupby(level=0):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in ser.groupby(level=0):\n    print(f'{x}\\n{y}\\n')"}
{"text": "```python\ndf.groupby(by=[\"a\"]).groups # {1: [0, 1], 7: [2]} for a DataFrame df with column 'a' containing [1, 1, 7]\n```", "code": "df.groupby(by=[\"a\"]).groups # {1: [0, 1], 7: [2]} for a DataFrame df with column 'a' containing [1, 1, 7]"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.groups\nOutput:\n```python\nser.groupby(level=0).groups # {'a': ['a', 'a'], 'b': ['b']} for a Series ser with index ['a', 'a', 'b'] and values [1, 2, 3]\n```", "code": "ser.groupby(level=0).groups # {'a': ['a', 'a'], 'b': ['b']} for a Series ser with index ['a', 'a', 'b'] and values [1, 2, 3]"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.indices\nOutput:\n```python\ndf.groupby(by=[\"a\"]).indices # {1: array([0, 1]), 7: array([2])} for a DataFrame df with column 'a' containing [1, 1, 7]\n```", "code": "df.groupby(by=[\"a\"]).indices # {1: array([0, 1]), 7: array([2])} for a DataFrame df with column 'a' containing [1, 1, 7]"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.indices\nOutput:\n```python\nser.groupby(level=0).indices # {'a': array([0, 1]), 'b': array([2])} for a Series ser grouped by level 0\n```", "code": "ser.groupby(level=0).indices # {'a': array([0, 1]), 'b': array([2])} for a Series ser grouped by level 0"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.get_group\nOutput:\n```python\ndf.groupby(by=[\"category\"]).get_group(\"fruit\") # returns a DataFrame with rows where the 'category' column is equal to 'fruit'\n```", "code": "df.groupby(by=[\"category\"]).get_group(\"fruit\") # returns a DataFrame with rows where the 'category' column is equal to 'fruit'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.get_group\nOutput:\n```python\nser = pd.Series([1, 2, 3], index=['a', 'a', 'b'])\ngrouped = ser.groupby(level=0)\ngrouped.get_group(\"a\") # returns a Series with values where index is 'a'\n```", "code": "ser = pd.Series([1, 2, 3], index=['a', 'a', 'b'])\ngrouped = ser.groupby(level=0)\ngrouped.get_group(\"a\") # returns a Series with values where index is 'a'"}
{"text": "Instance: pandas.Grouper\nOutput:\n```python\ndf.groupby(pd.Grouper(key=\"Animal\")).mean()\n```", "code": "df.groupby(pd.Grouper(key=\"Animal\")).mean()"}
{"text": "Instance: pandas.NamedAgg\nOutput:\n```python\nagg_min = pd.NamedAgg(column=\"temperature\", aggfunc=\"min\")\nagg_max = pd.NamedAgg(column=\"humidity\", aggfunc=\"max\")\ndf.groupby(\"location\").agg(min_temp=agg_min, max_humidity=agg_max)\n```", "code": "agg_min = pd.NamedAgg(column=\"temperature\", aggfunc=\"min\")\nagg_max = pd.NamedAgg(column=\"humidity\", aggfunc=\"max\")\ndf.groupby(\"location\").agg(min_temp=agg_min, max_humidity=agg_max)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.apply\nOutput:\n```python\ng1.apply(lambda x: x * 2 if x.name == 'a' else x / 2)\n```", "code": "g1.apply(lambda x: x * 2 if x.name == 'a' else x / 2)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.apply\nOutput:\n```python\ng1[['Temperature', 'Humidity']].apply(lambda x: x / x.sum())\n```", "code": "g1[['Temperature', 'Humidity']].apply(lambda x: x / x.sum())"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.agg\nOutput:\n```python\ns.groupby([1, 1, 2, 2]).agg(['min', 'max'])\n```", "code": "s.groupby([1, 1, 2, 2]).agg(['min', 'max'])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.agg\nOutput:\n```python\ndf.groupby('A').agg('min')\n```", "code": "df.groupby('A').agg('min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.aggregate\nOutput:\n```python\ns.groupby([1, 1, 2, 2]).agg(['min', 'max'])\n```", "code": "s.groupby([1, 1, 2, 2]).agg(['min', 'max'])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.aggregate\nOutput:\n```python\ndf.groupby('A').agg('min')\n```", "code": "df.groupby('A').agg('min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.transform\nOutput:\n```python\ngrouped.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "grouped.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.transform\nOutput:\n```python\ngrouped = df.groupby('Category')[['Sales', 'Profit']]\ngrouped.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "grouped = df.groupby('Category')[['Sales', 'Profit']]\ngrouped.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.pipe\nOutput:\n```python\ndf.groupby('A').pipe(lambda x: x.max() - x.min())\n```", "code": "df.groupby('A').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.pipe\nOutput:\n```python\ndf.groupby('A').pipe(lambda x: x.max() - x.min())\n```", "code": "df.groupby('A').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.filter\nOutput:\n```python\ngrouped.filter(lambda x: x['Temperature'].mean() > 25)\n```", "code": "grouped.filter(lambda x: x['Temperature'].mean() > 25)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.filter\nOutput:\n```python\ndf = pd.DataFrame({'Category' : ['fruit', 'vegetable', 'fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'Price' : [2, 3, 4, 5, 6, 7],\n                   'Quantity' : [10, 20, 30, 40, 50, 60]})\ngrouped = df.groupby('Category')\ndf.groupby('Category').Price.filter(lambda x: x.mean() > 4)\n```", "code": "df = pd.DataFrame({'Category' : ['fruit', 'vegetable', 'fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'Price' : [2, 3, 4, 5, 6, 7],\n                   'Quantity' : [10, 20, 30, 40, 50, 60]})\ngrouped = df.groupby('Category')\ndf.groupby('Category').Price.filter(lambda x: x.mean() > 4)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.all\nOutput:\n```python\ndf.groupby(by=[\"category\"]).all() # returns a DataFrame with boolean values indicating if all values in each group are True\n```", "code": "df.groupby(by=[\"category\"]).all() # returns a DataFrame with boolean values indicating if all values in each group are True"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.any\nOutput:\n```python\ndf.groupby(by=[\"category\"]).any() # returns a DataFrame indicating whether any element in each group is True\n```", "code": "df.groupby(by=[\"category\"]).any() # returns a DataFrame indicating whether any element in each group is True"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.bfill\nOutput:\n```python\ndf.groupby(level=0).bfill() # fills NaN values with the next non-null value within each group\n```", "code": "df.groupby(level=0).bfill() # fills NaN values with the next non-null value within each group"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.corr\nOutput:\n```python\ndf = pd.DataFrame([(0.2, 0.3), (0.0, 0.6), (0.6, 0.0), (0.2, 0.1)], columns=['height', 'weight'])\ndf.corr(method=histogram_intersection)\n```", "code": "df = pd.DataFrame([(0.2, 0.3), (0.0, 0.6), (0.6, 0.0), (0.2, 0.1)], columns=['height', 'weight'])\ndf.corr(method=histogram_intersection)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.corrwith\nOutput:\n```python\ndf1.corrwith(df2)\n```\n```python\ndf2.corrwith(df1, axis=1)\n```", "code": "df1.corrwith(df2)\ndf2.corrwith(df1, axis=1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.count\nOutput:\n```python\ndf.groupby(\"category\").count() # returns the count of non-NA/null values in each column for each category in the DataFrame\n```", "code": "df.groupby(\"category\").count() # returns the count of non-NA/null values in each column for each category in the DataFrame"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cov\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(20, 3), columns=['temperature', 'humidity', 'pressure'])\ndf.loc[df.index[:5], 'temperature'] = np.nan\ndf.loc[df.index[5:10], 'humidity'] = np.nan\ndf.cov(min_periods=12)\n```", "code": "df = pd.DataFrame(np.random.randn(20, 3), columns=['temperature', 'humidity', 'pressure'])\ndf.loc[df.index[:5], 'temperature'] = np.nan\ndf.loc[df.index[5:10], 'humidity'] = np.nan\ndf.cov(min_periods=12)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumcount\nOutput:\n```python\ndf = pd.DataFrame([['apple'], ['apple'], ['banana'], ['banana'], ['banana'], ['apple']],\n                  columns=['Fruit'])\ndf.groupby('Fruit').cumcount()\n```", "code": "df = pd.DataFrame([['apple'], ['apple'], ['banana'], ['banana'], ['banana'], ['apple']],\n                  columns=['Fruit'])\ndf.groupby('Fruit').cumcount()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cummax\nOutput:\n```python\ndf.groupby(\"Category\").cummax()\n```", "code": "df.groupby(\"Category\").cummax()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cummin\nOutput:\n```python\ndf.groupby(\"b\").cummin() # returns the cumulative minimum for each group based on column 'b'\n```", "code": "df.groupby(\"b\").cummin() # returns the cumulative minimum for each group based on column 'b'"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumprod\nOutput:\n```python\ndf.groupby(\"a\").cumprod()\n```", "code": "df.groupby(\"a\").cumprod()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumsum\nOutput:\n```python\ndf.groupby(\"a\").cumsum()\n```", "code": "df.groupby(\"a\").cumsum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.describe\nOutput:\n```python\ndf.groupby('Category').describe()\n```", "code": "df.groupby('Category').describe()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.diff\nOutput:\n```python\ndf.groupby(level=0).diff()\n```", "code": "df.groupby(level=0).diff()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ffill\nOutput:\n```python\ndf = pd.DataFrame(\n    {\n        \"category\": [\"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"X\": [np.nan, 2, np.nan, 3, np.nan],\n        \"Y\": [2, 3, np.nan, np.nan, np.nan],\n        \"Z\": [np.nan, np.nan, 2, np.nan, np.nan],\n    }\n)\n\ndf.groupby(\"category\").ffill()\n```", "code": "df = pd.DataFrame(\n    {\n        \"category\": [\"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"X\": [np.nan, 2, np.nan, 3, np.nan],\n        \"Y\": [2, 3, np.nan, np.nan, np.nan],\n        \"Z\": [np.nan, np.nan, 2, np.nan, np.nan],\n    }\n)\n\ndf.groupby(\"category\").ffill()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.fillna\nOutput:\n```python\ndf.groupby(\"key\").fillna(method=\"ffill\")\n```", "code": "df.groupby(\"key\").fillna(method=\"ffill\")"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()\n```\n", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.head\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['X', 'Y'])\ndf.groupby('X').head(1) # returns the first row of each group based on column 'X'\n```", "code": "df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['X', 'Y'])\ndf.groupby('X').head(1) # returns the first row of each group based on column 'X'"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.idxmax\nOutput:\n```python\ndf.idxmax() # returns the index label of the maximum value in each column\n```", "code": "df.idxmax() # returns the index label of the maximum value in each column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.idxmin\nOutput:\n```python\ndf.idxmin() # returns the index label of the minimum value in each column\n```", "code": "df.idxmin() # returns the index label of the minimum value in each column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3\n```", "code": "df = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.max\nOutput:\n```python\ndf.groupby(\"Category\").max() # returns the maximum value for each column within each group defined by the 'Category' column\n```", "code": "df.groupby(\"Category\").max() # returns the maximum value for each column within each group defined by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.mean\nOutput:\n```python\ndf = pd.DataFrame({'Country': ['USA', 'Canada', 'USA', 'Mexico', 'Canada'],\n                   'Population': [100, 50, 80, 30, 60],\n                   'GDP': [5000, 3000, 4500, 1500, 3500]}, columns=['Country', 'Population', 'GDP'])\n\ndf.groupby('Country').mean()\n```\n", "code": "df = pd.DataFrame({'Country': ['USA', 'Canada', 'USA', 'Mexico', 'Canada'],\n                   'Population': [100, 50, 80, 30, 60],\n                   'GDP': [5000, 3000, 4500, 1500, 3500]}, columns=['Country', 'Population', 'GDP'])\n\ndf.groupby('Country').mean()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.median\nOutput:\n```python\ndf.groupby(level=0).median() # returns the median value for each group in the DataFrameGroupBy object\n```", "code": "df.groupby(level=0).median() # returns the median value for each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.min\nOutput:\n```python\ndf.groupby(\"Category\").min() # returns the minimum value for each group in the DataFrame df grouped by the 'Category' column\n```", "code": "df.groupby(\"Category\").min() # returns the minimum value for each group in the DataFrame df grouped by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ngroup\nOutput:\n```python\ndf.groupby(\"color\").ngroup()\n```", "code": "df.groupby(\"color\").ngroup()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.nth\nOutput:\n```python\ng = df.groupby('A')\ng.nth(0)\n```", "code": "g = df.groupby('A')\ng.nth(0)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.nunique\nOutput:\n```python\ndf = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'color': ['red', 'green', 'yellow', 'green'],\n                   'shape': ['round', 'long', 'round', 'long']})\n\ngrouped = df.groupby('category').nunique()\nprint(grouped)\n```\nThis will output:\n```\n           color  shape\ncategory               \nfruit          2      1\nvegetable      1      2\n```", "code": "df = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'color': ['red', 'green', 'yellow', 'green'],\n                   'shape': ['round', 'long', 'round', 'long']})\n\ngrouped = df.groupby('category').nunique()\nprint(grouped)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ohlc\nOutput:\n```python\ndf.groupby(level=0).ohlc()\n```", "code": "df.groupby(level=0).ohlc()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.pct_change\nOutput:\n```python\ndf.groupby(\"Category\").pct_change()\n```", "code": "df.groupby(\"Category\").pct_change()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.prod\nOutput:\n```python\ndf.groupby(\"Category\").prod() # calculates the product of each group in the DataFrame df grouped by the 'Category' column\n```", "code": "df.groupby(\"Category\").prod() # calculates the product of each group in the DataFrame df grouped by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.quantile\nOutput:\n```python\ndf.groupby('key').quantile() # returns the quantile values for each group in the DataFrame\n```", "code": "df.groupby('key').quantile() # returns the quantile values for each group in the DataFrame"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.rank\nOutput:\n```python\ndf['rank'] = df.groupby('group')['value'].rank(method='min')\n```", "code": "df['rank'] = df.groupby('group')['value'].rank(method='min')"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.resample\nOutput:\n```python\ndf.groupby('category').resample('W', on='date').sum()\n```", "code": "df.groupby('category').resample('W', on='date').sum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.rolling\nOutput:\n```python\ndf.groupby('A').rolling(2).sum()\n```", "code": "df.groupby('A').rolling(2).sum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sample\nOutput:\n```python\ndf.groupby(\"a\").sample(n=1, random_state=1)\n```", "code": "df.groupby(\"a\").sample(n=1, random_state=1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sem\nOutput:\n```python\ndf.groupby(\"category\").sem() # calculates the standard error of the mean for each group in the DataFrame df based on the 'category' column\n```", "code": "df.groupby(\"category\").sem() # calculates the standard error of the mean for each group in the DataFrame df based on the 'category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.shift\nOutput:\n```python\ndf.groupby(\"Category\").shift(1)\n```", "code": "df.groupby(\"Category\").shift(1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.size\nOutput:\n```python\ndf.groupby(\"Category\").size() # returns the size of each group in the DataFrameGroupBy object\n```", "code": "df.groupby(\"Category\").size() # returns the size of each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.skew\nOutput:\n```python\ngb = df.groupby([\"class\"])\ngb.skew()\n```", "code": "gb = df.groupby([\"class\"])\ngb.skew()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.std\nOutput:\n```python\ndf.groupby(level=0).std()\n```", "code": "df.groupby(level=0).std()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sum\nOutput:\n```python\ndf.groupby(\"Category\").sum() # sums up the values in each group based on the 'Category' column\n```", "code": "df.groupby(\"Category\").sum() # sums up the values in each group based on the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.var\nOutput:\n```python\ndf.groupby(level=0).var() # calculates the variance for each group in the DataFrameGroupBy object\n```", "code": "df.groupby(level=0).var() # calculates the variance for each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.tail\nOutput:\n```python\ndf = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()\n```", "code": "df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.take\nOutput:\n```python\ngb.take([0, 1])\n```", "code": "gb.take([0, 1])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.value_counts\nOutput:\n```python\ndf.groupby('gender').value_counts()\n```", "code": "df.groupby('gender').value_counts()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.all\nOutput:\n```python\nresult = ser.groupby(level=0).all() # returns a boolean Series indicating if all elements in each group are True\n```", "code": "result = ser.groupby(level=0).all() # returns a boolean Series indicating if all elements in each group are True"}
{"text": "```python\ndf.groupby(by=[\"a\"]).any()\n```", "code": "df.groupby(by=[\"a\"]).any()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.bfill\nOutput:\n```python\ns.groupby(level=0).bfill()\n```", "code": "s.groupby(level=0).bfill()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.corr\nOutput:\n```python\ns1 = pd.Series([.2, .0, .6, .2])\ns2 = pd.Series([.3, .6, .0, .1])\ns1.corr(s2, method=histogram_intersection) # 0.3\n```", "code": "s1 = pd.Series([.2, .0, .6, .2])\ns2 = pd.Series([.3, .6, .0, .1])\ns1.corr(s2, method=histogram_intersection) # 0.3"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.count\nOutput:\n```python\nser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\n# Output:\n# a    2\n# b    0\n# dtype: int64\n```", "code": "ser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\n# Output:\n# a    2\n# b    0\n# dtype: int64"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cov\nOutput:\n```python\ns1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874\n```", "code": "s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumcount\nOutput:\n```python\ndf = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']], columns=['Category'])\ndf.groupby('Category').cumcount()\n```", "code": "df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']], columns=['Category'])\ndf.groupby('Category').cumcount()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cummax\nOutput:\n```python\nser = pd.Series([1, 6, 2, 3, 1, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummax()\n```", "code": "ser = pd.Series([1, 6, 2, 3, 1, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummax()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cummin\nOutput:\n```python\nser = pd.Series([1, 6, 2, 3, 0, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummin()\nresult\n```", "code": "ser = pd.Series([1, 6, 2, 3, 0, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummin()\nresult"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumprod\nOutput:\n```python\nser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumprod()\n```", "code": "ser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumprod()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumsum\nOutput:\n```python\nser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumsum()\nresult\n```", "code": "ser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumsum()\nresult"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.describe\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns.describe()\n```", "code": "s = pd.Series(['a', 'b', 'c'])\ns.describe()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.diff\nOutput:\n```python\nser.groupby(level=0).diff()\n```", "code": "ser.groupby(level=0).diff()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ffill\nOutput:\n```python\nser = pd.Series([np.nan, 2, 3, np.nan], index=[0, 0, 1, 1])\nresult = ser.groupby(level=0).ffill()\nprint(result)\n```", "code": "ser = pd.Series([np.nan, 2, 3, np.nan], index=[0, 0, 1, 1])\nresult = ser.groupby(level=0).ffill()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.fillna\nOutput:\n```python\nser = pd.Series([1, None, None, 2, None], index=['cat', 'cat', 'cat', 'mouse', 'mouse'])\nfilled_ser = ser.groupby(level=0).fillna(0, limit=1)\nfilled_ser\n```", "code": "ser = pd.Series([1, None, None, 2, None], index=['cat', 'cat', 'cat', 'mouse', 'mouse'])\nfilled_ser = ser.groupby(level=0).fillna(0, limit=1)\nfilled_ser"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()\n```", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.head\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['Height', 'Weight'])\ndf.groupby('Height').head(1) # returns the first row of each group based on 'Height'\n```", "code": "df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['Height', 'Weight'])\ndf.groupby('Height').head(1) # returns the first row of each group based on 'Height'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3\n```", "code": "df = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.idxmax\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'\n\ns.idxmax(skipna=False) # Output: nan\n```", "code": "s = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'\n\ns.idxmax(skipna=False) # Output: nan"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.idxmin\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # 'A'\n```", "code": "s = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # 'A'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing\nOutput:\n```python\ns = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_increasing\n# Output:\n# Falcon    False\n# Parrot     True\n# dtype: bool\n```", "code": "s = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_increasing\n# Output:\n# Falcon    False\n# Parrot     True\n# dtype: bool"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing\nOutput:\n```python\ns = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_decreasing\n# Output:\n# Falcon     True\n# Parrot    False\n# dtype: bool\n```", "code": "s = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_decreasing\n# Output:\n# Falcon     True\n# Parrot    False\n# dtype: bool"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.max\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).max()\nprint(result)\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).max()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.mean\nOutput:\n```python\ndf = pd.DataFrame({'X': [1, 2, 3, 4, 5],\n                   'Y': [10, 20, 30, 40, 50],\n                   'Z': [100, 200, 300, 400, 500]})\n\ngrouped = df.groupby('X').mean()\nprint(grouped)\n```\nThis will output:\n```\n     Y    Z\nX          \n1  10  100\n2  20  200\n3  30  300\n4  40  400\n5  50  500\n```", "code": "df = pd.DataFrame({'X': [1, 2, 3, 4, 5],\n                   'Y': [10, 20, 30, 40, 50],\n                   'Z': [100, 200, 300, 400, 500]})\n\ngrouped = df.groupby('X').mean()\nprint(grouped)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.median\nOutput:\n```python\nser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).median()\n```", "code": "ser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).median()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.min\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).min()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).min()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ngroup\nOutput:\n```python\ndf.groupby(\"color\").ngroup()\n```", "code": "df.groupby(\"color\").ngroup()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nlargest\nOutput:\n```python\ns.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties\n```", "code": "s.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nsmallest\nOutput:\n```python\ns.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')\n```", "code": "s.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nth\nOutput:\n```python\ng = df.groupby('A')\ng.nth(0)\n```", "code": "g = df.groupby('A')\ng.nth(0)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nunique\nOutput:\n```python\nser.groupby(level=0).nunique()\n```", "code": "ser.groupby(level=0).nunique()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.unique\nOutput:\n```python\nser = df.groupby('animal')['breed'].unique()\n```", "code": "ser = df.groupby('animal')['breed'].unique()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ohlc\nOutput:\n```python\nser.groupby(level=0).ohlc()\n```", "code": "ser.groupby(level=0).ohlc()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.pct_change\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).pct_change()\nprint(result)\n```\n", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).pct_change()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.prod\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).prod()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).prod()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.quantile\nOutput:\n```python\ndf = pd.DataFrame([\n    ['apple', 10], ['apple', 20], ['apple', 30],\n    ['banana', 15], ['banana', 25], ['banana', 35]\n], columns=['fruit', 'price'])\ndf.groupby('fruit').quantile()\n```", "code": "df = pd.DataFrame([\n    ['apple', 10], ['apple', 20], ['apple', 30],\n    ['banana', 15], ['banana', 25], ['banana', 35]\n], columns=['fruit', 'price'])\ndf.groupby('fruit').quantile()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.rank\nOutput:\n```python\ndf['rank'] = df.groupby('category')['value'].rank(method='min')\n```", "code": "df['rank'] = df.groupby('category')['value'].rank(method='min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.resample\nOutput:\n```python\ndf.groupby('Category').resample('W', include_groups=False).mean()\n```", "code": "df.groupby('Category').resample('W', include_groups=False).mean()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.rolling\nOutput:\n```python\ndf.groupby('A').rolling(2).sum()\n```", "code": "df.groupby('A').rolling(2).sum()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sample\nOutput:\n```python\ndf.groupby(\"a\")[\"b\"].sample(frac=0.5, random_state=2)\n```", "code": "df.groupby(\"a\")[\"b\"].sample(frac=0.5, random_state=2)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sem\nOutput:\n```python\nser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\nprint(result)\n```\n```python\ndata = [[1, 12, 11], [1, 15, 2], [2, 5, 8], [2, 6, 12]]\ndf = pd.DataFrame(data, columns=[\"Astronomy\", \"Chemistry\", \"Physics\"],\n                  index=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\"])\nresult = df.groupby(\"Astronomy\").sem()\nprint(result)\n```\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8],\n                index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nresult = ser.resample('MS').sem()\nprint(result)\n```", "code": "ser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\nprint(result)\ndata = [[1, 12, 11], [1, 15, 2], [2, 5, 8], [2, 6, 12]]\ndf = pd.DataFrame(data, columns=[\"Astronomy\", \"Chemistry\", \"Physics\"],\n                  index=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\"])\nresult = df.groupby(\"Astronomy\").sem()\nprint(result)\nser = pd.Series([1, 3, 2, 4, 3, 8],\n                index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nresult = ser.resample('MS').sem()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.shift\nOutput:\n```python\nser.groupby(level=0).shift(1)\n```", "code": "ser.groupby(level=0).shift(1)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.size\nOutput:\n```python\nser.groupby(level=0).size() # returns a Series with the count of each group in the SeriesGroupBy object\n```", "code": "ser.groupby(level=0).size() # returns a Series with the count of each group in the SeriesGroupBy object"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.skew\nOutput:\n```python\nser = pd.Series([390., 350., 357., np.nan, 22., 20., 30.], index=['Falcon', 'Falcon', 'Falcon', 'Falcon', 'Parrot', 'Parrot', 'Parrot'], name=\"Max Speed\")\nser.groupby(level=0).skew()\n```", "code": "ser = pd.Series([390., 350., 357., np.nan, 22., 20., 30.], index=['Falcon', 'Falcon', 'Falcon', 'Falcon', 'Parrot', 'Parrot', 'Parrot'], name=\"Max Speed\")\nser.groupby(level=0).skew()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.std\nOutput:\n```python\nser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).std()\nprint(result)\n```\n```python\ndata = {'science': [1, 3, 5, 7, 7, 8, 3], 'math': [1, 4, 8, 4, 4, 2, 1]}\ndf = pd.DataFrame(data, index=['dog', 'dog', 'dog', 'mouse', 'mouse', 'mouse', 'mouse'])\nresult = df.groupby(level=0).std()\nprint(result)\n```", "code": "ser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).std()\nprint(result)\ndata = {'science': [1, 3, 5, 7, 7, 8, 3], 'math': [1, 4, 8, 4, 4, 2, 1]}\ndf = pd.DataFrame(data, index=['dog', 'dog', 'dog', 'mouse', 'mouse', 'mouse', 'mouse'])\nresult = df.groupby(level=0).std()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sum()\nprint(result)\n```\n", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sum()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.var\nOutput:\n```python\nser.groupby(level=0).var()\n```", "code": "ser.groupby(level=0).var()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.tail\nOutput:\n```python\ndf = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()\n```", "code": "df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.take\nOutput:\n```python\ngb = df[\"name\"].groupby([1, 1, 2, 2, 2])\ngb.take([0, 1])\ngb.take([-1, -2])\n```", "code": "gb = df[\"name\"].groupby([1, 1, 2, 2, 2])\ngb.take([0, 1])\ngb.take([-1, -2])"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.value_counts\nOutput:\n```python\ngrouped_data['Category'].value_counts() # returns the count of each category in the 'Category' column of the grouped data\n```", "code": "grouped_data['Category'].value_counts() # returns the count of each category in the 'Category' column of the grouped data"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.boxplot\nOutput:\n```python\ngrouped.boxplot(rot=45, fontsize=12, figsize=(8, 10))\n```", "code": "grouped.boxplot(rot=45, fontsize=12, figsize=(8, 10))"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.hist\nOutput:\n```python\nhist = df.hist(bins=3)\n```", "code": "hist = df.hist(bins=3)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.hist\nOutput:\n```python\nlst = ['a', 'a', 'a', 'b', 'b', 'b']\nser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\nhist = ser.hist()\n```", "code": "lst = ['a', 'a', 'a', 'b', 'b', 'b']\nser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\nhist = ser.hist()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.plot\nOutput:\n```python\nplot = df.groupby(\"category\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")\n```", "code": "plot = df.groupby(\"category\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.plot\nOutput:\n```python\nplot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")\n```", "code": "plot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")"}
{"text": "Instance: pandas.api.indexers.VariableOffsetWindowIndexer\nOutput:\n```python\nindexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))\n```", "code": "indexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.__iter__\nOutput:\n```python\nfor x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')\n```\n", "code": "for x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.resample.Resampler.__iter__\nOutput:\n```python\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.resample.Resampler.groups\nOutput:\n```python\nser.resample('MS').groups # {Timestamp('2023-01-01 00:00:00'): 2, Timestamp('2023-02-01 00:00:00'): 4} for a time series 'ser' resampled by month start\n```", "code": "ser.resample('MS').groups # {Timestamp('2023-01-01 00:00:00'): 2, Timestamp('2023-02-01 00:00:00'): 4} for a time series 'ser' resampled by month start"}
{"text": "Instance: pandas.core.resample.Resampler.indices\nOutput:\n```python\nser.resample('MS').indices\n```", "code": "ser.resample('MS').indices"}
{"text": "Instance: pandas.core.resample.Resampler.get_group\nOutput:\n```python\nser.resample('MS').get_group('2023-01-01')\n```", "code": "ser.resample('MS').get_group('2023-01-01')"}
{"text": "Instance: pandas.core.resample.Resampler.apply\nOutput:\n```python\nr.apply(lambda x: x.max() - x.min())\n```", "code": "r.apply(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.resample.Resampler.aggregate\nOutput:\n```python\nr = s.resample('2s')\nr.agg({'result': lambda x: x.mean() / x.std(), 'total': \"sum\"})\n```", "code": "r = s.resample('2s')\nr.agg({'result': lambda x: x.mean() / x.std(), 'total': \"sum\"})"}
{"text": "Instance: pandas.core.resample.Resampler.transform\nOutput:\n```python\nresampled = s.resample('15min')\nresampled.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "resampled = s.resample('15min')\nresampled.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.resample.Resampler.pipe\nOutput:\n```python\ndf.resample('2D').pipe(lambda x: x.max() - x.min())\n```", "code": "df.resample('2D').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.resample.Resampler.ffill\nOutput:\n```python\nser.resample('W').ffill(limit=1)\n```", "code": "ser.resample('W').ffill(limit=1)"}
{"text": "Instance: pandas.core.resample.Resampler.bfill\nOutput:\n```python\ndf.resample('15min').bfill(limit=2)\n```", "code": "df.resample('15min').bfill(limit=2)"}
{"text": "Instance: pandas.core.resample.Resampler.nearest\nOutput:\n```python\ns.resample('15min').nearest()\n```", "code": "s.resample('15min').nearest()"}
{"text": "Instance: pandas.core.resample.Resampler.fillna\nOutput:\n```python\ns.resample('30min').fillna(\"nearest\")\n```", "code": "s.resample('30min').fillna(\"nearest\")"}
{"text": "Instance: pandas.core.resample.Resampler.asfreq\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-31', '2023-02-01', '2023-02-28']))\nser.resample('MS').asfreq()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-31', '2023-02-01', '2023-02-28']))\nser.resample('MS').asfreq()"}
{"text": "Instance: pandas.core.resample.Resampler.interpolate\nOutput:\n```python\nseries.resample(\"2s\").interpolate(\"linear\")\n```", "code": "series.resample(\"2s\").interpolate(\"linear\")"}
{"text": "Instance: pandas.core.resample.Resampler.count\nOutput:\n```python\nser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\nresult\n```\n```python\ndata = [[1, np.nan, 3], [1, np.nan, 6], [7, 8, 9]]\ndf = pd.DataFrame(data, columns=[\"A\", \"B\", \"C\"], index=[\"cow\", \"horse\", \"bull\"])\nresult = df.groupby(\"A\").count()\nresult\n```\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nresult = ser.resample('MS').count()\nresult\n```", "code": "ser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\nresult\ndata = [[1, np.nan, 3], [1, np.nan, 6], [7, 8, 9]]\ndf = pd.DataFrame(data, columns=[\"A\", \"B\", \"C\"], index=[\"cow\", \"horse\", \"bull\"])\nresult = df.groupby(\"A\").count()\nresult\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nresult = ser.resample('MS').count()\nresult"}
{"text": "Instance: pandas.core.resample.Resampler.nunique\nOutput:\n```python\nser.resample('MS').nunique()\n```", "code": "ser.resample('MS').nunique()"}
{"text": "Instance: pandas.core.resample.Resampler.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9], Date=['2022-01-01', '2022-01-02', '2022-01-03']))\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.resample('D').first()\n```", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9], Date=['2022-01-01', '2022-01-02', '2022-01-03']))\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.resample('D').first()"}
{"text": "Instance: pandas.core.resample.Resampler.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[10, 20, 30], Y=[15, 25, 35], Z=[20, 30, 40]))\ndf.resample('D').last()\n```", "code": "df = pd.DataFrame(dict(X=[10, 20, 30], Y=[15, 25, 35], Z=[20, 30, 40]))\ndf.resample('D').last()"}
{"text": "Instance: pandas.core.resample.Resampler.max\nOutput:\n```python\nser.resample('MS').max()\n```", "code": "ser.resample('MS').max()"}
{"text": "Instance: pandas.core.resample.Resampler.mean\nOutput:\n```python\nser.resample('MS').mean() # resamples the series 'ser' to monthly frequency and calculates the mean\n```", "code": "ser.resample('MS').mean() # resamples the series 'ser' to monthly frequency and calculates the mean"}
{"text": "Instance: pandas.core.resample.Resampler.median\nOutput:\n```python\nser.resample('MS').median()\n```", "code": "ser.resample('MS').median()"}
{"text": "Instance: pandas.core.resample.Resampler.min\nOutput:\n```python\nser.resample('MS').min() # resamples the series 'ser' to monthly frequency and returns the minimum value for each month\n```", "code": "ser.resample('MS').min() # resamples the series 'ser' to monthly frequency and returns the minimum value for each month"}
{"text": "Instance: pandas.core.resample.Resampler.ohlc\nOutput:\n```python\nser.resample('MS').ohlc()\n```", "code": "ser.resample('MS').ohlc()"}
{"text": "Instance: pandas.core.resample.Resampler.prod\nOutput:\n```python\nser.resample('MS').prod()\n```", "code": "ser.resample('MS').prod()"}
{"text": "Instance: pandas.core.resample.Resampler.size\nOutput:\n```python\nser.resample('MS').size() # resample the time series data by month start frequency and return the size of each group\n```", "code": "ser.resample('MS').size() # resample the time series data by month start frequency and return the size of each group"}
{"text": "Instance: pandas.core.resample.Resampler.sem\nOutput:\n```python\nser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\n```", "code": "ser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()"}
{"text": "Instance: pandas.core.resample.Resampler.std\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').std()\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').std()"}
{"text": "Instance: pandas.core.resample.Resampler.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nser.resample('MS').sum()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nser.resample('MS').sum()"}
{"text": "Instance: pandas.core.resample.Resampler.var\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').var()\n```\n```python\nser.resample('MS').var(ddof=0)\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').var()\nser.resample('MS').var(ddof=0)"}
{"text": "Instance: pandas.core.resample.Resampler.quantile\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').quantile()\n```\n```python\nser.resample('MS').quantile(.25)\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').quantile()\nser.resample('MS').quantile(.25)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.plot\nOutput:\n```python\nplot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")\n```", "code": "plot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")"}
{"text": "Instance: pandas.core.resample.Resampler.__iter__\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.io.formats.style.Styler\nOutput:\n```python\nstyled_df = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")\n```", "code": "styled_df = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")"}
{"text": "Instance: pandas.io.formats.style.Styler.from_custom_template\nOutput:\n```python\nEasyStyler = Styler.from_custom_template(\"path/to/template\",\n                                         \"template.tpl\",\n                                         )  \n```", "code": "EasyStyler = Styler.from_custom_template(\"path/to/template\",\n                                         \"template.tpl\",\n                                         )"}
{"text": "Instance: pandas.io.formats.style.Styler.env\nOutput:\n```python\nstyler = df.style.set_properties(**{'background-color': 'black', 'color': 'lawngreen', 'border-color': 'white'})\n```", "code": "styler = df.style.set_properties(**{'background-color': 'black', 'color': 'lawngreen', 'border-color': 'white'})"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html\nOutput:\n```python\nhtml = df.style.template_html()\n```", "code": "html = df.style.template_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html_style\nOutput:\n```python\nhtml_style = df.style.template_html_style()\n```", "code": "html_style = df.style.template_html_style()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html_table\nOutput:\n```python\nhtml_table = styler.template_html_table()\n```", "code": "html_table = styler.template_html_table()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_latex\nOutput:\n```python\nstyled_df.to_latex()\n```", "code": "styled_df.to_latex()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_string\nOutput:\n```python\nstyler.template_string # outputs the template string used for the Styler object\n```", "code": "styler.template_string # outputs the template string used for the Styler object"}
{"text": "Instance: pandas.io.formats.style.Styler.loader\nOutput:\n```python\nloader = pd.io.formats.style.Styler.loader\n```", "code": "loader = pd.io.formats.style.Styler.loader"}
{"text": "Instance: pandas.io.formats.style.Styler.apply\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(5, 2), columns=[\"Temperature\", \"Humidity\"])\ndf.style.apply(highlight_max, color='red')\n```", "code": "df = pd.DataFrame(np.random.randn(5, 2), columns=[\"Temperature\", \"Humidity\"])\ndf.style.apply(highlight_max, color='red')"}
{"text": "Instance: pandas.io.formats.style.Styler.map\nOutput:\n```python\ndf.style.map(color_negative, color='red', subset=[\"Temperature\", \"Humidity\"])\n```", "code": "df.style.map(color_negative, color='red', subset=[\"Temperature\", \"Humidity\"])"}
{"text": "Instance: pandas.io.formats.style.Styler.apply_index\nOutput:\n```python\ndef highlight_x(s):\n    return [\"background-color: yellow;\" if \"x\" in v else \"\" for v in s]\n\ndf.style.apply_index(highlight_x, axis=\"columns\", level=[0, 2])\n```", "code": "def highlight_x(s):\n    return [\"background-color: yellow;\" if \"x\" in v else \"\" for v in s]\n\ndf.style.apply_index(highlight_x, axis=\"columns\", level=[0, 2])"}
{"text": "Instance: pandas.io.formats.style.Styler.map_index\nOutput:\n```python\ndef highlight_x(v):\n    return \"background-color: yellow;\" if \"x\" in v else None\n\ndf.style.map_index(highlight_x, axis=\"columns\", level=[0, 2])\n```", "code": "def highlight_x(v):\n    return \"background-color: yellow;\" if \"x\" in v else None\n\ndf.style.map_index(highlight_x, axis=\"columns\", level=[0, 2])"}
{"text": "Instance: pandas.io.formats.style.Styler.format\nOutput:\n```python\ndf.style.format('{:.2f}', na_rep='MISS', subset=['Column1', 'Column2'])  \n```", "code": "df.style.format('{:.2f}', na_rep='MISS', subset=['Column1', 'Column2'])"}
{"text": "Instance: pandas.io.formats.style.Styler.format_index\nOutput:\n```python\ndf.style.format_index('{:.2f}', axis=1, na_rep='MISS')  \n     2.00   MISS    4.00\n0       1      2       3\n```", "code": "df.style.format_index('{:.2f}', axis=1, na_rep='MISS')  \n     2.00   MISS    4.00\n0       1      2       3"}
{"text": "Instance: pandas.io.formats.style.Styler.relabel_index\nOutput:\n```python\ndf.style.relabel_index([\"A\", \"B\", \"C\"])  \n```", "code": "df.style.relabel_index([\"A\", \"B\", \"C\"])"}
{"text": "Instance: pandas.io.formats.style.Styler.hide\nOutput:\n```python\ndf.style.format(\"{:.1f}\").hide(subset=(slice(None), [\"a\", \"c\"])).hide()\n```", "code": "df.style.format(\"{:.1f}\").hide(subset=(slice(None), [\"a\", \"c\"])).hide()"}
{"text": "Instance: pandas.io.formats.style.Styler.concat\nOutput:\n```python\ndf = pd.DataFrame([[4, 6], [1, 9], [3, 4], [5, 5], [9, 6]],\n                  columns=[\"Math\", \"Science\"],\n                  index=[\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\"])\nstyler = df.style.concat(df.agg([\"sum\"]).style)\n```", "code": "df = pd.DataFrame([[4, 6], [1, 9], [3, 4], [5, 5], [9, 6]],\n                  columns=[\"Math\", \"Science\"],\n                  index=[\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\"])\nstyler = df.style.concat(df.agg([\"sum\"]).style)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_td_classes\nOutput:\n```python\ndf = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=[\"Temperature\", \"Humidity\", \"Pressure\"])\nclasses = pd.DataFrame([\n    [\"low red\", \"\", \"high blue\"],\n    [\"red\", None, \"blue high\"]\n], index=df.index, columns=df.columns)\ndf.style.set_td_classes(classes)\n```", "code": "df = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=[\"Temperature\", \"Humidity\", \"Pressure\"])\nclasses = pd.DataFrame([\n    [\"low red\", \"\", \"high blue\"],\n    [\"red\", None, \"blue high\"]\n], index=df.index, columns=df.columns)\ndf.style.set_td_classes(classes)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_table_styles\nOutput:\n```python\ndf.style.set_table_styles(\n    [{'selector': 'tr:hover',\n      'props': [('background-color', 'yellow')]}\n    ]\n)\n```", "code": "df.style.set_table_styles(\n    [{'selector': 'tr:hover',\n      'props': [('background-color', 'yellow')]}\n    ]\n)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_table_attributes\nOutput:\n```python\ndf.style.set_table_attributes('class=\"pure-table\"')\n```", "code": "df.style.set_table_attributes('class=\"pure-table\"')"}
{"text": "Instance: pandas.io.formats.style.Styler.set_tooltips\nOutput:\n```python\ndf = pd.DataFrame(data=[[0, 1], [2, 3]])\nttips = pd.DataFrame(\n    data=[[\"Min\", \"\"], [np.nan, \"Max\"]], columns=df.columns, index=df.index\n)\ns = df.style.set_tooltips(ttips).to_html()\n```", "code": "df = pd.DataFrame(data=[[0, 1], [2, 3]])\nttips = pd.DataFrame(\n    data=[[\"Min\", \"\"], [np.nan, \"Max\"]], columns=df.columns, index=df.index\n)\ns = df.style.set_tooltips(ttips).to_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.set_caption\nOutput:\n```python\ndf.style.set_caption(\"Sales Data Summary\")\n```", "code": "df.style.set_caption(\"Sales Data Summary\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_sticky\nOutput:\n```python\ndf.style.set_sticky(axis=\"index\")\n```", "code": "df.style.set_sticky(axis=\"index\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_properties\nOutput:\n```python\ndf.style.set_properties(color=\"white\", align=\"right\")\n```", "code": "df.style.set_properties(color=\"white\", align=\"right\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_uuid\nOutput:\n```python\ndf.style.set_uuid(\"T_20a7d_level0_col0\").set_caption(\"Test\")\n```", "code": "df.style.set_uuid(\"T_20a7d_level0_col0\").set_caption(\"Test\")"}
{"text": "Instance: pandas.io.formats.style.Styler.clear\nOutput:\n```python\ndf.style.clear()\n```", "code": "df.style.clear()"}
{"text": "Instance: pandas.io.formats.style.Styler.pipe\nOutput:\n```python\ndef highlight_last_level(styler):\n    return styler.apply_index(\n        lambda v: \"background-color: pink; color: yellow\", axis=\"columns\",\n        level=styler.columns.nlevels-1\n    )  \ndf.columns = pd.MultiIndex.from_product([[\"Sales\", \"Expenses\"], [\"Q1\", \"Q2\"]])\ndf.style.pipe(highlight_last_level)\n```", "code": "def highlight_last_level(styler):\n    return styler.apply_index(\n        lambda v: \"background-color: pink; color: yellow\", axis=\"columns\",\n        level=styler.columns.nlevels-1\n    )  \ndf.columns = pd.MultiIndex.from_product([[\"Sales\", \"Expenses\"], [\"Q1\", \"Q2\"]])\ndf.style.pipe(highlight_last_level)"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_null\nOutput:\n```python\ndf.style.highlight_null(color='yellow')\n```", "code": "df.style.highlight_null(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_max\nOutput:\n```python\ndf.style.highlight_max(color='yellow')\n```", "code": "df.style.highlight_max(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_min\nOutput:\n```python\ndf.style.highlight_min(color='yellow')\n```", "code": "df.style.highlight_min(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_between\nOutput:\n```python\ndf.style.highlight_between(left=2.1, right=2.9)\n```", "code": "df.style.highlight_between(left=2.1, right=2.9)"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_quantile\nOutput:\n```python\ndf.style.highlight_quantile(axis=None, q_left=0.8, color=\"#fffd75\")\n```", "code": "df.style.highlight_quantile(axis=None, q_left=0.8, color=\"#fffd75\")"}
{"text": "Instance: pandas.io.formats.style.Styler.background_gradient\nOutput:\n```python\ndf.style.background_gradient(axis=0)\n```", "code": "df.style.background_gradient(axis=0)"}
{"text": "Instance: pandas.io.formats.style.Styler.text_gradient\nOutput:\n```python\ndf.style.text_gradient(axis=0)\n```", "code": "df.style.text_gradient(axis=0)"}
{"text": "```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300], 'Profit': [50, 75, 100, 125]})\ndf.style.bar(subset=['Profit'], color='blue')\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300], 'Profit': [50, 75, 100, 125]})\ndf.style.bar(subset=['Profit'], color='blue')"}
