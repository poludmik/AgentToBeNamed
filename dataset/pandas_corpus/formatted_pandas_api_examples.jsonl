{"text": "Instance: pandas.read_pickle\nOutput:\n```python\nunpickled_df = pd.read_pickle(\"./dummy.pkl\")\n```", "code": "unpickled_df = pd.read_pickle(\"./dummy.pkl\")"}
{"text": "Instance: pandas.DataFrame.to_pickle\nOutput:\n```python\noriginal_df.to_pickle(\"./dummy.pkl\")\n```", "code": "original_df.to_pickle(\"./dummy.pkl\")"}
{"text": "Instance: pandas.read_table\nOutput:\n```python\ndata = pd.read_table('data.csv')\n```", "code": "data = pd.read_table('data.csv')"}
{"text": "Instance: pandas.read_csv\nOutput:\n```python\ndata = pd.read_csv('data.csv')\n```", "code": "data = pd.read_csv('data.csv')"}
{"text": "Instance: pandas.DataFrame.to_csv\nOutput:\n```python\ndf.to_csv('data.csv', index=False) # writes the DataFrame to a CSV file named 'data.csv' without including the index\n```", "code": "df.to_csv('data.csv', index=False) # writes the DataFrame to a CSV file named 'data.csv' without including the index"}
{"text": "Instance: pandas.read_fwf\nOutput:\n```python\ndf = pd.read_fwf('data.csv')\n```", "code": "df = pd.read_fwf('data.csv')"}
{"text": "Instance: pandas.read_clipboard\nOutput:\n```python\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['Height', 'Width', 'Length'])\ndf.to_clipboard()\npd.read_clipboard()\n```", "code": "df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['Height', 'Width', 'Length'])\ndf.to_clipboard()\npd.read_clipboard()"}
{"text": "Instance: pandas.DataFrame.to_clipboard\nOutput:\n```python\ndf.to_clipboard(sep=',')  \n# Wrote the following to the system clipboard:\n# ,A,B,C\n# 0,1,2,3\n# 1,4,5,6\n```", "code": "df.to_clipboard(sep=',')  \n# Wrote the following to the system clipboard:\n# ,A,B,C\n# 0,1,2,3\n# 1,4,5,6"}
{"text": "Instance: pandas.read_excel\nOutput:\n```python\ndf = pd.read_excel('data.xlsx', sheet_name='Sheet1', index_col=0)\n```", "code": "df = pd.read_excel('data.xlsx', sheet_name='Sheet1', index_col=0)"}
{"text": "Instance: pandas.DataFrame.to_excel\nOutput:\n```python\ndf1.to_excel(\"output.xlsx\")\n```", "code": "df1.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.ExcelFile\nOutput:\n```python\nfile = pd.ExcelFile('myfile.xlsx')\n```", "code": "file = pd.ExcelFile('myfile.xlsx')"}
{"text": "Instance: pandas.ExcelFile.book\nOutput:\n```python\nbook = pd.ExcelFile('file.xlsx').book # returns the xlrd.Book object representing the Excel file\n```", "code": "book = pd.ExcelFile('file.xlsx').book # returns the xlrd.Book object representing the Excel file"}
{"text": "Instance: pandas.ExcelFile.sheet_names\nOutput:\n```python\nexcel_file = pd.ExcelFile('example.xlsx')\nsheets = excel_file.sheet_names\n```", "code": "excel_file = pd.ExcelFile('example.xlsx')\nsheets = excel_file.sheet_names"}
{"text": "Instance: pandas.ExcelFile.parse\nOutput:\n```python\nfile = pd.ExcelFile('myfile.xlsx')\ndf = file.parse() # parse the excel file 'myfile.xlsx' and store the data in a DataFrame df\n```", "code": "file = pd.ExcelFile('myfile.xlsx')\ndf = file.parse() # parse the excel file 'myfile.xlsx' and store the data in a DataFrame df"}
{"text": "Instance: pandas.io.formats.style.Styler.to_excel\nOutput:\n```python\ndf1.to_excel(\"output.xlsx\")\n```", "code": "df1.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.ExcelWriter\nOutput:\n```python\ndf = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"City\", \"Country\"])\nwith pd.ExcelWriter(\"path_to_file.xlsx\") as writer:\n    df.to_excel(writer)\n```", "code": "df = pd.DataFrame([[\"ABC\", \"XYZ\"]], columns=[\"City\", \"Country\"])\nwith pd.ExcelWriter(\"path_to_file.xlsx\") as writer:\n    df.to_excel(writer)"}
{"text": "Instance: pandas.read_json\nOutput:\n```python\ndf.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\npd.read_json(StringIO(_), orient='split')\n  col 1 col 2\n0     a     b\n1     c     d\n```", "code": "df.to_json(orient='split')\n'{\"columns\":[\"col 1\",\"col 2\"],\"index\":[\"row 1\",\"row 2\"],\"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\npd.read_json(StringIO(_), orient='split')\n  col 1 col 2\n0     a     b\n1     c     d"}
{"text": "Instance: pandas.json_normalize\nOutput:\n```python\ndata = [\n    {\n        \"id\": 1,\n        \"name\": \"Cole Volk\",\n        \"fitness\": {\"height\": 130, \"weight\": 60},\n    },\n    {\"name\": \"Mark Reg\", \"fitness\": {\"height\": 130, \"weight\": 60}},\n    {\n        \"id\": 2,\n        \"name\": \"Faye Raker\",\n        \"fitness\": {\"height\": 130, \"weight\": 60},\n    },\n]\npd.json_normalize(data, max_level=1)\n```", "code": "data = [\n    {\n        \"id\": 1,\n        \"name\": \"Cole Volk\",\n        \"fitness\": {\"height\": 130, \"weight\": 60},\n    },\n    {\"name\": \"Mark Reg\", \"fitness\": {\"height\": 130, \"weight\": 60}},\n    {\n        \"id\": 2,\n        \"name\": \"Faye Raker\",\n        \"fitness\": {\"height\": 130, \"weight\": 60},\n    },\n]\npd.json_normalize(data, max_level=1)"}
{"text": "Instance: pandas.DataFrame.to_json\nOutput:\n```python\nresult = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)\n```", "code": "result = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)"}
{"text": "Instance: pandas.io.json.build_table_schema\nOutput:\n```python\nbuild_table_schema(df)\n```", "code": "build_table_schema(df)"}
{"text": "Instance: pandas.read_html\nOutput:\n```python\ntables = pd.read_html('https://www.w3schools.com/html/html_tables.asp')\n```", "code": "tables = pd.read_html('https://www.w3schools.com/html/html_tables.asp')"}
{"text": "Instance: pandas.DataFrame.to_html\nOutput:\n```python\nhtml_string = '''<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temperature</th>\n      <th>Humidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>25</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22</td>\n      <td>55</td>\n    </tr>\n  </tbody>\n</table>'''\nassert html_string == df.to_html()\n```", "code": "html_string = '''<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temperature</th>\n      <th>Humidity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>25</td>\n      <td>60</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22</td>\n      <td>55</td>\n    </tr>\n  </tbody>\n</table>'''\nassert html_string == df.to_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.to_html\nOutput:\n```python\nhtml_table = df.style.to_html()\n```", "code": "html_table = df.style.to_html()"}
{"text": "Instance: pandas.read_xml\nOutput:\n```python\ndf = pd.read_xml(StringIO(xml_data),\n                 dtype_backend=\"numpy_nullable\",\n                 parse_dates=[\"e\"])\n```", "code": "df = pd.read_xml(StringIO(xml_data),\n                 dtype_backend=\"numpy_nullable\",\n                 parse_dates=[\"e\"])"}
{"text": "Instance: pandas.DataFrame.to_xml\nOutput:\n```python\ndf.to_xml(attr_cols=['index', 'shape', 'degrees', 'sides'])\n```", "code": "df.to_xml(attr_cols=['index', 'shape', 'degrees', 'sides'])"}
{"text": "Instance: pandas.DataFrame.to_latex\nOutput:\n```python\nprint(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))\n```", "code": "print(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))"}
{"text": "Instance: pandas.io.formats.style.Styler.to_latex\nOutput:\n```python\nstyler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)\n```", "code": "styler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)"}
{"text": "Instance: pandas.read_hdf\nOutput:\n```python\ndf = pd.read_hdf('./store.h5')\n```", "code": "df = pd.read_hdf('./store.h5')"}
{"text": "Instance: pandas.HDFStore.put\nOutput:\n```python\nstore = pd.HDFStore(\"store.h5\", 'w')\nstore.put('data', df)\n```", "code": "store = pd.HDFStore(\"store.h5\", 'w')\nstore.put('data', df)"}
{"text": "Instance: pandas.HDFStore.append\nOutput:\n```python\nstore.append('data', df2)\n```", "code": "store.append('data', df2)"}
{"text": "Instance: pandas.HDFStore.get\nOutput:\n```python\ndata = store.get('data') # retrieves the data stored under the key 'data' from the HDFStore\n```", "code": "data = store.get('data') # retrieves the data stored under the key 'data' from the HDFStore"}
{"text": "Instance: pandas.HDFStore.select\nOutput:\n```python\nstore.select('/data1', where='columns == A')  \n```", "code": "store.select('/data1', where='columns == A')"}
{"text": "Instance: pandas.HDFStore.info\nOutput:\n```python\nstore = pd.HDFStore(\"store.h5\", 'w')\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=['Temperature', 'Humidity'])\nstore.put('data', df)\nprint(store.info())\nstore.close()\n```", "code": "store = pd.HDFStore(\"store.h5\", 'w')\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=['Temperature', 'Humidity'])\nstore.put('data', df)\nprint(store.info())\nstore.close()"}
{"text": "Instance: pandas.HDFStore.keys\nOutput:\n```python\nprint(store.keys()) # outputs list of keys in the HDFStore, e.g. ['/data1', '/data2']\n```", "code": "print(store.keys()) # outputs list of keys in the HDFStore, e.g. ['/data1', '/data2']"}
{"text": "Instance: pandas.HDFStore.groups\nOutput:\n```python\nprint(store.groups())\n```", "code": "print(store.groups())"}
{"text": "Instance: pandas.HDFStore.walk\nOutput:\n```python\nfor group in store.walk():\n    print(group)\n```", "code": "for group in store.walk():\n    print(group)"}
{"text": "Instance: pandas.read_feather\nOutput:\n```python\ndf = pd.read_feather(\"path/to/file.feather\")\n```", "code": "df = pd.read_feather(\"path/to/file.feather\")"}
{"text": "Instance: pandas.DataFrame.to_feather\nOutput:\n```python\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6]])\ndf.to_feather(\"file.feather\")\n```", "code": "df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])\ndf.to_feather(\"file.feather\")"}
{"text": "Instance: pandas.read_parquet\nOutput:\n```python\nrestored_df = pd.read_parquet(BytesIO(df_parquet_bytes))\n```", "code": "restored_df = pd.read_parquet(BytesIO(df_parquet_bytes))"}
{"text": "Instance: pandas.DataFrame.to_parquet\nOutput:\n```python\ndf.to_parquet('data.parquet', compression='snappy')\n```", "code": "df.to_parquet('data.parquet', compression='snappy')"}
{"text": "Instance: pandas.read_orc\nOutput:\n```python\nresult = pd.read_orc(\"example_pa.orc\")\n```", "code": "result = pd.read_orc(\"example_pa.orc\")"}
{"text": "Instance: pandas.DataFrame.to_orc\nOutput:\n```python\ndf = pd.DataFrame(data={'sales': [100, 200, 150], 'revenue': [500, 700, 600]})\ndf.to_orc('sales_data.orc')\n```", "code": "df = pd.DataFrame(data={'sales': [100, 200, 150], 'revenue': [500, 700, 600]})\ndf.to_orc('sales_data.orc')"}
{"text": "Instance: pandas.read_sas\nOutput:\n```python\ndf = pd.read_sas(\"sas_data.sas7bdat\")\n```", "code": "df = pd.read_sas(\"sas_data.sas7bdat\")"}
{"text": "Instance: pandas.read_spss\nOutput:\n```python\ndf = pd.read_spss(\"spss_data.sav\")\n```", "code": "df = pd.read_spss(\"spss_data.sav\")"}
{"text": "Instance: pandas.read_sql_table\nOutput:\n```python\ndf = pd.read_sql_table('employees', 'sqlite:///employee.db')\n```", "code": "df = pd.read_sql_table('employees', 'sqlite:///employee.db')"}
{"text": "Instance: pandas.read_sql_query\nOutput:\n```python\ndata = pd.read_sql_query(\"SELECT Name, Age, City FROM Employees WHERE Department='IT'\", conn)\n```", "code": "data = pd.read_sql_query(\"SELECT Name, Age, City FROM Employees WHERE Department='IT'\", conn)"}
{"text": "Instance: pandas.read_sql\nOutput:\n```python\ndf = pd.read_sql('SELECT name, age, city FROM employees', connection)\n```", "code": "df = pd.read_sql('SELECT name, age, city FROM employees', connection)"}
{"text": "Instance: pandas.DataFrame.to_sql\nOutput:\n```python\ndf.to_sql(name='users', con=engine, if_exists='replace', index_label='id')\n```", "code": "df.to_sql(name='users', con=engine, if_exists='replace', index_label='id')"}
{"text": "Instance: pandas.read_gbq\nOutput:\n```python\nsql = \"SELECT name, age, city FROM employee_table WHERE department = 'HR' LIMIT 50;\"\ndf = pd.read_gbq(sql, project_id=\"your-project-id\", dialect=\"standard\")\n```", "code": "sql = \"SELECT name, age, city FROM employee_table WHERE department = 'HR' LIMIT 50;\"\ndf = pd.read_gbq(sql, project_id=\"your-project-id\", dialect=\"standard\")"}
{"text": "Instance: pandas.read_stata\nOutput:\n```python\ndf = pd.read_stata('animals.dta')\n```", "code": "df = pd.read_stata('animals.dta')"}
{"text": "Instance: pandas.DataFrame.to_stata\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'gdp': [21.43, 1.84, 1.27]})\ndf.to_stata('countries_data.dta')\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'gdp': [21.43, 1.84, 1.27]})\ndf.to_stata('countries_data.dta')"}
{"text": "Instance: pandas.io.stata.StataReader.data_label\nOutput:\n```python\nwith pd.io.stata.StataReader(path) as reader:\n    print(reader.data_label)\n```", "code": "with pd.io.stata.StataReader(path) as reader:\n    print(reader.data_label)"}
{"text": "Instance: pandas.io.stata.StataReader.value_labels\nOutput:\n```python\nwith pd.io.stata.StataReader(path) as reader:\n    print(reader.value_labels())\n```", "code": "with pd.io.stata.StataReader(path) as reader:\n    print(reader.value_labels())"}
{"text": "Instance: pandas.io.stata.StataReader.variable_labels\nOutput:\n```python\nwith pd.io.stata.StataReader(path) as reader:\n    print(reader.variable_labels())\n```", "code": "with pd.io.stata.StataReader(path) as reader:\n    print(reader.variable_labels())"}
{"text": "Instance: pandas.io.stata.StataWriter.write_file\nOutput:\n```python\npath = \"/My_path/filename.dta\"\nlabels = {\"fully_labelled\": {1: \"one\", 2: \"two\", 3: \"three\"},\n          \"partially_labelled\": {1.0: \"one\", 2.0: \"two\"},\n          }\nwriter = pd.io.stata.StataWriter(path,\n                                 df,\n                                 value_labels=labels)  \nwriter.write_file()  \n```", "code": "path = \"/My_path/filename.dta\"\nlabels = {\"fully_labelled\": {1: \"one\", 2: \"two\", 3: \"three\"},\n          \"partially_labelled\": {1.0: \"one\", 2.0: \"two\"},\n          }\nwriter = pd.io.stata.StataWriter(path,\n                                 df,\n                                 value_labels=labels)  \nwriter.write_file()"}
{"text": "Instance: pandas.read_pickle\nOutput:\n```python\nunpickled_df = pd.read_pickle(\"./dummy.pkl\")\n```", "code": "unpickled_df = pd.read_pickle(\"./dummy.pkl\")"}
{"text": "Instance: pandas.melt\nOutput:\n```python\npd.melt(df, id_vars=['Country'], value_vars=['Population'])\n```", "code": "pd.melt(df, id_vars=['Country'], value_vars=['Population'])"}
{"text": "Instance: pandas.pivot\nOutput:\n```python\ndf = pd.DataFrame({\n        \"category\": ['A', 'A', 'B', 'B'],\n        \"sub_category\": ['X', 'Y', 'X', 'Y'],\n        \"value1\": [10, 20, 30, 40],\n        \"value2\": [100, 200, 300, 400]})\n        \ndf.pivot(index='category', columns='sub_category', values=['value1', 'value2'])\n```", "code": "df = pd.DataFrame({\n        \"category\": ['A', 'A', 'B', 'B'],\n        \"sub_category\": ['X', 'Y', 'X', 'Y'],\n        \"value1\": [10, 20, 30, 40],\n        \"value2\": [100, 200, 300, 400]})\n        \ndf.pivot(index='category', columns='sub_category', values=['value1', 'value2'])"}
{"text": "Instance: pandas.pivot_table\nOutput:\n```python\ntable = pd.pivot_table(df, values=['Sales', 'Profit'], index=['Region', 'Product'], columns=['Year'], aggfunc={'Sales': \"sum\", 'Profit': \"mean\"}, fill_value=0)\n```", "code": "table = pd.pivot_table(df, values=['Sales', 'Profit'], index=['Region', 'Product'], columns=['Year'], aggfunc={'Sales': \"sum\", 'Profit': \"mean\"}, fill_value=0)"}
{"text": "Instance: pandas.crosstab\nOutput:\n```python\npd.crosstab(categories, values, rownames=['categories'], colnames=['values'])\n```", "code": "pd.crosstab(categories, values, rownames=['categories'], colnames=['values'])"}
{"text": "Instance: pandas.cut\nOutput:\n```python\npd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, labels=[\"low\", \"medium\", \"high\"])\n```", "code": "pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, labels=[\"low\", \"medium\", \"high\"])"}
{"text": "Instance: pandas.qcut\nOutput:\n```python\npd.qcut(df['Sales'], q=4, labels=[\"low\", \"medium\", \"high\"]) # Categorize the 'Sales' column into 4 quantiles with custom labels\n```", "code": "pd.qcut(df['Sales'], q=4, labels=[\"low\", \"medium\", \"high\"]) # Categorize the 'Sales' column into 4 quantiles with custom labels"}
{"text": "Instance: pandas.merge\nOutput:\n```python\ndf1 = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                    'quantity': [10, 20, 30, 40]})\ndf2 = pd.DataFrame({'category': ['fruit', 'meat', 'vegetable', 'meat'],\n                    'price': [2, 5, 3, 6]})\n\nresult = df1.merge(df2, on='category')\nprint(result)\n```\n", "code": "df1 = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                    'quantity': [10, 20, 30, 40]})\ndf2 = pd.DataFrame({'category': ['fruit', 'meat', 'vegetable', 'meat'],\n                    'price': [2, 5, 3, 6]})\n\nresult = df1.merge(df2, on='category')\nprint(result)"}
{"text": "Instance: pandas.merge_ordered\nOutput:\n```python\nmerge_ordered(df1, df2, fill_method=\"ffill\", left_by=\"group\")\n```", "code": "merge_ordered(df1, df2, fill_method=\"ffill\", left_by=\"group\")"}
{"text": "Instance: pandas.merge_asof\nOutput:\n```python\npd.merge_asof(left_df, right_df, on=\"timestamp\", by=\"category\", tolerance=pd.Timedelta(\"5ms\"), allow_exact_matches=False)\n```", "code": "pd.merge_asof(left_df, right_df, on=\"timestamp\", by=\"category\", tolerance=pd.Timedelta(\"5ms\"), allow_exact_matches=False)"}
{"text": "Instance: pandas.concat\nOutput:\n```python\ndf1 = pd.DataFrame([['apple', 1], ['banana', 2]], columns=['fruit', 'quantity'])\ndf2 = pd.DataFrame([['orange', 3], ['grape', 4]], columns=['fruit', 'quantity'])\npd.concat([df1, df2])\n```", "code": "df1 = pd.DataFrame([['apple', 1], ['banana', 2]], columns=['fruit', 'quantity'])\ndf2 = pd.DataFrame([['orange', 3], ['grape', 4]], columns=['fruit', 'quantity'])\npd.concat([df1, df2])"}
{"text": "Instance: pandas.get_dummies\nOutput:\n```python\npd.get_dummies(pd.Series(list('abcaa')), drop_first=True)\n```", "code": "pd.get_dummies(pd.Series(list('abcaa')), drop_first=True)"}
{"text": "Instance: pandas.from_dummies\nOutput:\n```python\ndf = pd.DataFrame({\"col1_apple\": [1, 0, 0], \"col1_banana\": [0, 1, 0],\n                   \"col2_apple\": [0, 1, 0], \"col2_banana\": [1, 0, 0],\n                   \"col2_cherry\": [0, 0, 0]})\n\npd.from_dummies(df, sep=\"_\", default_category={\"col1\": \"other\", \"col2\": \"fruit\"})\n# Output:\n#    col1    col2\n# 0  apple   banana\n# 1  banana  apple\n# 2  other   fruit\n```", "code": "df = pd.DataFrame({\"col1_apple\": [1, 0, 0], \"col1_banana\": [0, 1, 0],\n                   \"col2_apple\": [0, 1, 0], \"col2_banana\": [1, 0, 0],\n                   \"col2_cherry\": [0, 0, 0]})\n\npd.from_dummies(df, sep=\"_\", default_category={\"col1\": \"other\", \"col2\": \"fruit\"})\n# Output:\n#    col1    col2\n# 0  apple   banana\n# 1  banana  apple\n# 2  other   fruit"}
{"text": "Instance: pandas.factorize\nOutput:\n```python\ncodes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n```", "code": "codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))"}
{"text": "Instance: pandas.unique\nOutput:\n```python\nunique_values = pd.unique(pd.Series([2, 1, 3, 3]))\nprint(unique_values) # array([2, 1, 3])\n```", "code": "unique_values = pd.unique(pd.Series([2, 1, 3, 3]))\nprint(unique_values) # array([2, 1, 3])"}
{"text": "Instance: pandas.lreshape\nOutput:\n```python\npd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})\n```", "code": "pd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})"}
{"text": "Instance: pandas.wide_to_long\nOutput:\n```python\nlong_df = pd.wide_to_long(df, stubnames=['height', 'weight'], i=['person_id', 'name'], j='measurement', sep='_', suffix=r'\\w+')\n```", "code": "long_df = pd.wide_to_long(df, stubnames=['height', 'weight'], i=['person_id', 'name'], j='measurement', sep='_', suffix=r'\\w+')"}
{"text": "Instance: pandas.isna\nOutput:\n```python\npd.isna('dog') # False\n\npd.isna(pd.NA) # True\n\npd.isna(np.nan) # True\n\narray = np.array([[1, np.nan, 3], [4, 5, np.nan]])\npd.isna(array)\n```\n```python\nindex = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None, \"2017-07-08\"])\npd.isna(index)\n```\n```python\ndf = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\npd.isna(df)\n\npd.isna(df[1])\n```", "code": "pd.isna('dog') # False\n\npd.isna(pd.NA) # True\n\npd.isna(np.nan) # True\n\narray = np.array([[1, np.nan, 3], [4, 5, np.nan]])\npd.isna(array)\nindex = pd.DatetimeIndex([\"2017-07-05\", \"2017-07-06\", None, \"2017-07-08\"])\npd.isna(index)\ndf = pd.DataFrame([['ant', 'bee', 'cat'], ['dog', None, 'fly']])\npd.isna(df)\n\npd.isna(df[1])"}
{"text": "Instance: pandas.isnull\nOutput:\n```python\npd.isna(df) # outputs DataFrame with boolean values indicating if each element is null\n```", "code": "pd.isna(df) # outputs DataFrame with boolean values indicating if each element is null"}
{"text": "Instance: pandas.notna\nOutput:\n```python\ndf = pd.DataFrame([['apple', 'banana', 'cherry'], ['date', None, 'fig']])\npd.notna(df)\n```", "code": "df = pd.DataFrame([['apple', 'banana', 'cherry'], ['date', None, 'fig']])\npd.notna(df)"}
{"text": "Instance: pandas.notnull\nOutput:\n```python\npd.notna(df) # returns a DataFrame with True/False values indicating whether each element is not null\n```", "code": "pd.notna(df) # returns a DataFrame with True/False values indicating whether each element is not null"}
{"text": "Instance: pandas.to_numeric\nOutput:\n```python\ns = pd.Series(['1.0', '2', -3])\npd.to_numeric(s)\n```", "code": "s = pd.Series(['1.0', '2', -3])\npd.to_numeric(s)"}
{"text": "Instance: pandas.to_datetime\nOutput:\n```python\ndf['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')\n```", "code": "df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')"}
{"text": "Instance: pandas.to_timedelta\nOutput:\n```python\npd.to_timedelta('1 days 06:05:01.00003')\n```", "code": "pd.to_timedelta('1 days 06:05:01.00003')"}
{"text": "Instance: pandas.date_range\nOutput:\n```python\ndate_range = pd.date_range(start='1/1/2018', end='1/08/2018')\n```", "code": "date_range = pd.date_range(start='1/1/2018', end='1/08/2018')"}
{"text": "Instance: pandas.bdate_range\nOutput:\n```python\npd.bdate_range(start='1/1/2018', end='1/08/2018')\n```", "code": "pd.bdate_range(start='1/1/2018', end='1/08/2018')"}
{"text": "Instance: pandas.period_range\nOutput:\n```python\nperiods = pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n```", "code": "periods = pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')"}
{"text": "Instance: pandas.timedelta_range\nOutput:\n```python\ntime_range = pd.timedelta_range(start='1 day', end='5 days', periods=4)\nprint(time_range)\n```", "code": "time_range = pd.timedelta_range(start='1 day', end='5 days', periods=4)\nprint(time_range)"}
{"text": "Instance: pandas.infer_freq\nOutput:\n```python\nidx = pd.date_range(start='2020/12/01', end='2020/12/30', periods=30)\npd.infer_freq(idx) # 'D'\n```", "code": "idx = pd.date_range(start='2020/12/01', end='2020/12/30', periods=30)\npd.infer_freq(idx) # 'D'"}
{"text": "Instance: pandas.interval_range\nOutput:\n```python\ninterval_index = pd.interval_range(start=0, end=5)\n```", "code": "interval_index = pd.interval_range(start=0, end=5)"}
{"text": "Instance: pandas.eval\nOutput:\n```python\npd.eval(\"total_cost = df.price * df.quantity\", target=df)\n```", "code": "pd.eval(\"total_cost = df.price * df.quantity\", target=df)"}
{"text": "Instance: pandas.tseries.api.guess_datetime_format\nOutput:\n```python\nformat = pd.tseries.api.guess_datetime_format('09/13/2023') # '%m/%d/%Y'\n```", "code": "format = pd.tseries.api.guess_datetime_format('09/13/2023') # '%m/%d/%Y'"}
{"text": "Instance: pandas.util.hash_array\nOutput:\n```python\nhashed_array = pd.util.hash_array(np.array([1, 2, 3]))\n```", "code": "hashed_array = pd.util.hash_array(np.array([1, 2, 3]))"}
{"text": "Instance: pandas.util.hash_pandas_object\nOutput:\n```python\nhash_values = pd.util.hash_pandas_object(pd.Series([1, 2, 3]))\n```", "code": "hash_values = pd.util.hash_pandas_object(pd.Series([1, 2, 3]))"}
{"text": "Instance: pandas.api.interchange.from_dataframe\nOutput:\n```python\ndf_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Temperature'])))\ndf_pandas\n```\n", "code": "df_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Temperature'])))\ndf_pandas"}
{"text": "Instance: pandas.io.stata.StataWriter.write_file\nOutput:\n```python\npath = \"/My_path/filename.dta\"\nlabels = {\"fully_labelled\": {1: \"one\", 2: \"two\", 3: \"three\"},\n          \"partially_labelled\": {1.0: \"one\", 2.0: \"two\"},\n          }\nwriter = pd.io.stata.StataWriter(path, df, value_labels=labels)  \nwriter.write_file()  \n```", "code": "path = \"/My_path/filename.dta\"\nlabels = {\"fully_labelled\": {1: \"one\", 2: \"two\", 3: \"three\"},\n          \"partially_labelled\": {1.0: \"one\", 2.0: \"two\"},\n          }\nwriter = pd.io.stata.StataWriter(path, df, value_labels=labels)  \nwriter.write_file()"}
{"text": "Instance: pandas.melt\nOutput:\n```python\nmelted_df = pd.melt(df, id_vars=['A'], value_vars=['B', 'C'], var_name='myVarname', value_name='myValname')\n```", "code": "melted_df = pd.melt(df, id_vars=['A'], value_vars=['B', 'C'], var_name='myVarname', value_name='myValname')"}
{"text": "Instance: pandas.Series\n\nOutput:\n```python\nd = {'apple': 3, 'banana': 6, 'orange': 9}\nser = pd.Series(data=d, index=['apple', 'banana', 'orange'])\nser\n```\n```python\nd = {'apple': 3, 'banana': 6, 'orange': 9}\nser = pd.Series(data=d, index=['pear', 'grape', 'kiwi'])\nser\n```\n```python\nr = [5, 10]\nser = pd.Series(r, copy=False)\nser.iloc[1] = 100\n```", "code": "d = {'apple': 3, 'banana': 6, 'orange': 9}\nser = pd.Series(data=d, index=['apple', 'banana', 'orange'])\nser\nd = {'apple': 3, 'banana': 6, 'orange': 9}\nser = pd.Series(data=d, index=['pear', 'grape', 'kiwi'])\nser\nr = [5, 10]\nser = pd.Series(r, copy=False)\nser.iloc[1] = 100"}
{"text": "Instance: pandas.Series.index\nOutput:\n```python\ncity_series.index # Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')\n```", "code": "city_series.index # Index(['KOL', 'CHI', 'TOR', 'LIS'], dtype='object')"}
{"text": "Instance: pandas.Series.array\nOutput:\n```python\nser = pd.Series(pd.Categorical(['a', 'b', 'a']))\nser.array\n# Output: ['a', 'b', 'a']\n# Categories (2, object): ['a', 'b']\n```", "code": "ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\nser.array\n# Output: ['a', 'b', 'a']\n# Categories (2, object): ['a', 'b']"}
{"text": "Instance: pandas.Series.values\nOutput:\n```python\nvalues = pd.Series([1, 2, 3]).values # array([1, 2, 3])\n```", "code": "values = pd.Series([1, 2, 3]).values # array([1, 2, 3])"}
{"text": "Instance: pandas.Series.dtype\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.dtype # dtype('int64')\n```", "code": "s = pd.Series([1, 2, 3])\ns.dtype # dtype('int64')"}
{"text": "Instance: pandas.Series.shape\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.shape # outputs tuple, e.g. (3,)\n```", "code": "s = pd.Series([1, 2, 3])\ns.shape # outputs tuple, e.g. (3,)"}
{"text": "Instance: pandas.Series.nbytes\nOutput:\n```python\ns = pd.Series(['Ant', 'Bear', 'Cow'])\ns.nbytes # outputs 24\n```", "code": "s = pd.Series(['Ant', 'Bear', 'Cow'])\ns.nbytes # outputs 24"}
{"text": "Instance: pandas.Series.ndim\nOutput:\n```python\ns = pd.Series(['Ant', 'Bear', 'Cow'])\ns.ndim # outputs 1\n```", "code": "s = pd.Series(['Ant', 'Bear', 'Cow'])\ns.ndim # outputs 1"}
{"text": "Instance: pandas.Series.size\nOutput:\n```python\ns = pd.Series(['Ant', 'Bear', 'Cow'])\ns.size # outputs 3\n```", "code": "s = pd.Series(['Ant', 'Bear', 'Cow'])\ns.size # outputs 3"}
{"text": "Instance: pandas.Series.T\nOutput:\n```python\ns = pd.Series(['Ant', 'Bear', 'Cow'])\ns.T\n# Output:\n# 0     Ant\n# 1    Bear\n# 2     Cow\n# dtype: object\n\nidx = pd.Index([1, 2, 3])\nidx.T\n# Output:\n# Index([1, 2, 3], dtype='int64')\n```", "code": "s = pd.Series(['Ant', 'Bear', 'Cow'])\ns.T\n# Output:\n# 0     Ant\n# 1    Bear\n# 2     Cow\n# dtype: object\n\nidx = pd.Index([1, 2, 3])\nidx.T\n# Output:\n# Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.Series.memory_usage\nOutput:\n```python\ns = pd.Series([\"x\", \"y\", \"z\"])\ns.memory_usage() # 136\n```", "code": "s = pd.Series([\"x\", \"y\", \"z\"])\ns.memory_usage() # 136"}
{"text": "Instance: pandas.Series.hasnans\nOutput:\n```python\ns = pd.Series([1, 2, 3, None])\ns.hasnans # True\n```", "code": "s = pd.Series([1, 2, 3, None])\ns.hasnans # True"}
{"text": "Instance: pandas.Series.empty\nOutput:\n```python\nser_empty = pd.Series({'Books' : []})\nser_empty.empty # False\n\nser_empty = pd.Series()\nser_empty.empty # True\n```", "code": "ser_empty = pd.Series({'Books' : []})\nser_empty.empty # False\n\nser_empty = pd.Series()\nser_empty.empty # True"}
{"text": "Instance: pandas.Series.dtypes\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.dtypes # outputs dtype('int64')\n```", "code": "s = pd.Series([1, 2, 3])\ns.dtypes # outputs dtype('int64')"}
{"text": "Instance: pandas.Series.name\nOutput:\n```python\ns = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\ns.name = \"Integers\"\ns.name # outputs 'Integers'\n```", "code": "s = pd.Series([1, 2, 3], dtype=np.int64, name='Numbers')\ns.name = \"Integers\"\ns.name # outputs 'Integers'"}
{"text": "Instance: pandas.Series.flags\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": [25, 30]})\ndf.flags # <Flags(allows_duplicate_labels=True)>\n\ndf.flags.allows_duplicate_labels # True\ndf.flags.allows_duplicate_labels = False\n\ndf.flags[\"allows_duplicate_labels\"] # False\ndf.flags[\"allows_duplicate_labels\"] = True\n```", "code": "df = pd.DataFrame({\"Temperature\": [25, 30]})\ndf.flags # <Flags(allows_duplicate_labels=True)>\n\ndf.flags.allows_duplicate_labels # True\ndf.flags.allows_duplicate_labels = False\n\ndf.flags[\"allows_duplicate_labels\"] # False\ndf.flags[\"allows_duplicate_labels\"] = True"}
{"text": "Instance: pandas.Series.set_flags\nOutput:\n```python\ns = pd.Series([10, 20, 30], name='Temperature')\ns.flags.allows_duplicate_labels # True\ns2 = s.set_flags(allows_duplicate_labels=False)\ns2.flags.allows_duplicate_labels # False\n```", "code": "s = pd.Series([10, 20, 30], name='Temperature')\ns.flags.allows_duplicate_labels # True\ns2 = s.set_flags(allows_duplicate_labels=False)\ns2.flags.allows_duplicate_labels # False"}
{"text": "Instance: pandas.Series.astype\nOutput:\n```python\nser = pd.Series([1, 2, 3], dtype='int32')\nser.astype('int64') # converts the series to int64 dtype\n```", "code": "ser = pd.Series([1, 2, 3], dtype='int32')\nser.astype('int64') # converts the series to int64 dtype"}
{"text": "Instance: pandas.Series.convert_dtypes\nOutput:\n```python\ns = pd.Series([\"apple\", \"banana\", np.nan])\ns.convert_dtypes()\n```", "code": "s = pd.Series([\"apple\", \"banana\", np.nan])\ns.convert_dtypes()"}
{"text": "Instance: pandas.Series.infer_objects\nOutput:\n```python\ndf = pd.DataFrame({\"Category\": [\"A\", 1, 2, 3]})\ndf = df.iloc[1:]\ndf.dtypes\n# Output: \n# Category    object\n# dtype: object\n\ndf.infer_objects().dtypes\n# Output:\n# Category    int64\n# dtype: object\n```", "code": "df = pd.DataFrame({\"Category\": [\"A\", 1, 2, 3]})\ndf = df.iloc[1:]\ndf.dtypes\n# Output: \n# Category    object\n# dtype: object\n\ndf.infer_objects().dtypes\n# Output:\n# Category    int64\n# dtype: object"}
{"text": "Instance: pandas.Series.copy\nOutput:\n```python\ns = pd.Series([1, 2], index=[\"a\", \"b\"])\ns_copy = s.copy()\n```", "code": "s = pd.Series([1, 2], index=[\"a\", \"b\"])\ns_copy = s.copy()"}
{"text": "Instance: pandas.Series.bool\nOutput:\n```python\npd.Series([True]).bool() # Output: True\n```", "code": "pd.Series([True]).bool() # Output: True"}
{"text": "Instance: pandas.Series.to_numpy\nOutput:\n```python\nser = pd.Series(pd.Categorical(['a', 'b', 'a']))\nser.to_numpy()\n# array(['a', 'b', 'a'], dtype=object)\n```", "code": "ser = pd.Series(pd.Categorical(['a', 'b', 'a']))\nser.to_numpy()\n# array(['a', 'b', 'a'], dtype=object)"}
{"text": "Instance: pandas.Series.to_period\nOutput:\n```python\ns = pd.Series([1, 2, 3], index=pd.DatetimeIndex(['2023', '2024', '2025']))\ns = s.to_period()\ns\n```", "code": "s = pd.Series([1, 2, 3], index=pd.DatetimeIndex(['2023', '2024', '2025']))\ns = s.to_period()\ns"}
{"text": "Instance: pandas.Series.to_timestamp\nOutput:\n```python\ns = pd.Series([10, 20, 30], index=pd.date_range('20230101', periods=3))\ns = s.to_timestamp(freq='M')\ns\n```", "code": "s = pd.Series([10, 20, 30], index=pd.date_range('20230101', periods=3))\ns = s.to_timestamp(freq='M')\ns"}
{"text": "Instance: pandas.Series.to_list\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.to_list() # outputs [1, 2, 3]\n```", "code": "s = pd.Series([1, 2, 3])\ns.to_list() # outputs [1, 2, 3]"}
{"text": "Instance: pandas.Series.__array__\nOutput:\n```python\nser = pd.Series([1, 2, 3])\nnp.asarray(ser) # array([1, 2, 3])\n```", "code": "ser = pd.Series([1, 2, 3])\nnp.asarray(ser) # array([1, 2, 3])"}
{"text": "Instance: pandas.Series.get\nOutput:\n```python\nser = df['windspeed']\nvalue = ser.get('2014-02-13')\nprint(value) # Output: 'high'\n```", "code": "ser = df['windspeed']\nvalue = ser.get('2014-02-13')\nprint(value) # Output: 'high'"}
{"text": "Instance: pandas.Series.at\nOutput:\n```python\ndf = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], index=[4, 5, 6], columns=['Height', 'Weight', 'Age'])\ndf.at[4, 'Weight'] # returns 2\n```", "code": "df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], index=[4, 5, 6], columns=['Height', 'Weight', 'Age'])\ndf.at[4, 'Weight'] # returns 2"}
{"text": "Instance: pandas.Series.iat\nOutput:\n```python\ndf = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], columns=['X', 'Y', 'Z'])\ndf.iat[1, 2] # returns 1\n```", "code": "df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], columns=['X', 'Y', 'Z'])\ndf.iat[1, 2] # returns 1"}
{"text": "Instance: pandas.Series.loc\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\ndf.loc['viper']\n```", "code": "df = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=['cobra', 'viper', 'sidewinder'], columns=['max_speed', 'shield'])\ndf.loc['viper']"}
{"text": "Instance: pandas.Series.iloc\nOutput:\n```python\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]})\ndf.iloc[0] # outputs the first row as a Series\n```", "code": "df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie'], 'Age': [25, 30, 35]})\ndf.iloc[0] # outputs the first row as a Series"}
{"text": "Instance: pandas.Series.__iter__\nOutput:\n```python\ns = pd.Series([1, 2, 3])\nfor x in s:\n    print(x)\n# Output:\n# 1\n# 2\n# 3\n```", "code": "s = pd.Series([1, 2, 3])\nfor x in s:\n    print(x)\n# Output:\n# 1\n# 2\n# 3"}
{"text": "Instance: pandas.Series.items\nOutput:\n```python\ns = pd.Series(['A', 'B', 'C'])\nfor index, value in s.items():\n    print(f\"Index : {index}, Value : {value}\")\n```\n", "code": "s = pd.Series(['A', 'B', 'C'])\nfor index, value in s.items():\n    print(f\"Index : {index}, Value : {value}\")"}
{"text": "Instance: pandas.Series.keys\nOutput:\n```python\ns = pd.Series([1, 2, 3], index=['apple', 'banana', 'cherry'])\ns.keys() # Index(['apple', 'banana', 'cherry'], dtype='object')\n```", "code": "s = pd.Series([1, 2, 3], index=['apple', 'banana', 'cherry'])\ns.keys() # Index(['apple', 'banana', 'cherry'], dtype='object')"}
{"text": "Instance: pandas.Series.pop\nOutput:\n```python\nser = pd.Series([1, 2, 3])\nser.pop(0) # returns 1\n# ser now becomes:\n# 1    2\n# 2    3\n# dtype: int64\n```", "code": "ser = pd.Series([1, 2, 3])\nser.pop(0) # returns 1\n# ser now becomes:\n# 1    2\n# 2    3\n# dtype: int64"}
{"text": "Instance: pandas.Series.item\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.item() # outputs 1\n```", "code": "s = pd.Series([1, 2, 3])\ns.item() # outputs 1"}
{"text": "Instance: pandas.Series.xs\nOutput:\n```python\ndf.xs('mammal')\n```", "code": "df.xs('mammal')"}
{"text": "Instance: pandas.Series.add\nOutput:\n```python\nresult = a.add(b, fill_value=0) # adds two Series 'a' and 'b' with missing values filled as 0\n```", "code": "result = a.add(b, fill_value=0) # adds two Series 'a' and 'b' with missing values filled as 0"}
{"text": "Instance: pandas.Series.sub\nOutput:\n```python\nresult = a.subtract(b, fill_value=0) # subtract Series b from Series a with fill_value=0 for missing values\n```", "code": "result = a.subtract(b, fill_value=0) # subtract Series b from Series a with fill_value=0 for missing values"}
{"text": "Instance: pandas.Series.mul\nOutput:\n```python\nresult = a.multiply(b, fill_value=0)\n```", "code": "result = a.multiply(b, fill_value=0)"}
{"text": "Instance: pandas.Series.div\nOutput:\n```python\nresult = a.divide(b, fill_value=0) # Divides two Series 'a' and 'b', filling missing values with 0\n```", "code": "result = a.divide(b, fill_value=0) # Divides two Series 'a' and 'b', filling missing values with 0"}
{"text": "Instance: pandas.Series.truediv\nOutput:\n```python\nresult = a.divide(b, fill_value=0) # performs true division between two Series 'a' and 'b' with a fill value of 0\n```", "code": "result = a.divide(b, fill_value=0) # performs true division between two Series 'a' and 'b' with a fill value of 0"}
{"text": "Instance: pandas.Series.floordiv\nOutput:\n```python\nresult = a.floordiv(b, fill_value=0) # performs floor division between two Series with a fill value of 0 for missing values\n```", "code": "result = a.floordiv(b, fill_value=0) # performs floor division between two Series with a fill value of 0 for missing values"}
{"text": "Instance: pandas.Series.mod\nOutput:\n```python\nresult = a.mod(b, fill_value=0) # performs modulo operation between two Series with a specified fill value for missing values\n```", "code": "result = a.mod(b, fill_value=0) # performs modulo operation between two Series with a specified fill value for missing values"}
{"text": "Instance: pandas.Series.pow\nOutput:\n```python\nresult = a.pow(b, fill_value=0) # element-wise power operation between two Series with a fill value for missing values\n```", "code": "result = a.pow(b, fill_value=0) # element-wise power operation between two Series with a fill value for missing values"}
{"text": "Instance: pandas.Series.radd\nOutput:\n```python\nresult = a.radd(b, fill_value=0) # Adds two Series objects element-wise with a fill value of 0 for missing values\n```", "code": "result = a.radd(b, fill_value=0) # Adds two Series objects element-wise with a fill value of 0 for missing values"}
{"text": "Instance: pandas.Series.rsub\nOutput:\n```python\nresult = a.rsub(b, fill_value=0)\nresult\n```", "code": "result = a.rsub(b, fill_value=0)\nresult"}
{"text": "Instance: pandas.Series.rmul\nOutput:\n```python\nresult = a.rmul(b, fill_value=0)\n```", "code": "result = a.rmul(b, fill_value=0)"}
{"text": "Instance: pandas.Series.rdiv\nOutput:\n```python\nresult = a.rdiv(b, fill_value=0)\nresult\n```", "code": "result = a.rdiv(b, fill_value=0)\nresult"}
{"text": "Instance: pandas.Series.rtruediv\nOutput:\n```python\nresult = a.rtruediv(b, fill_value=0)\n```", "code": "result = a.rtruediv(b, fill_value=0)"}
{"text": "Instance: pandas.Series.rfloordiv\nOutput:\n```python\nresult = a.rfloordiv(b, fill_value=0)\n```", "code": "result = a.rfloordiv(b, fill_value=0)"}
{"text": "Instance: pandas.Series.rmod\nOutput:\n```python\nresult = a.rmod(b, fill_value=0)\n```", "code": "result = a.rmod(b, fill_value=0)"}
{"text": "Instance: pandas.Series.rpow\nOutput:\n```python\nresult = a.rpow(b, fill_value=0)\n```", "code": "result = a.rpow(b, fill_value=0)"}
{"text": "Instance: pandas.Series.combine\nOutput:\n```python\ns1 = pd.Series({'lion': 200, 'tiger': 150})\ns2 = pd.Series({'lion': 220, 'tiger': 180, 'cheetah': 100})\n\nresult = s1.combine(s2, max)\nprint(result)\n# Output:\n# cheetah      NaN\n# lion       220.0\n# tiger      180.0\n\nresult_fill = s1.combine(s2, max, fill_value=0)\nprint(result_fill)\n# Output:\n# cheetah    100.0\n# lion       220.0\n# tiger      180.0\n```", "code": "s1 = pd.Series({'lion': 200, 'tiger': 150})\ns2 = pd.Series({'lion': 220, 'tiger': 180, 'cheetah': 100})\n\nresult = s1.combine(s2, max)\nprint(result)\n# Output:\n# cheetah      NaN\n# lion       220.0\n# tiger      180.0\n\nresult_fill = s1.combine(s2, max, fill_value=0)\nprint(result_fill)\n# Output:\n# cheetah    100.0\n# lion       220.0\n# tiger      180.0"}
{"text": "Instance: pandas.Series.combine_first\nOutput:\n```python\ns1 = pd.Series({'lion': np.nan, 'tiger': 300.0})\ns2 = pd.Series({'tiger': 400.0, 'cheetah': 70.0})\ns1.combine_first(s2)\n# Output:\n# cheetah     70.0\n# lion         NaN\n# tiger      300.0\n# dtype: float64\n```", "code": "s1 = pd.Series({'lion': np.nan, 'tiger': 300.0})\ns2 = pd.Series({'tiger': 400.0, 'cheetah': 70.0})\ns1.combine_first(s2)\n# Output:\n# cheetah     70.0\n# lion         NaN\n# tiger      300.0\n# dtype: float64"}
{"text": "Instance: pandas.Series.round\nOutput:\n```python\ns = pd.Series([0.1, 1.3, 2.7])\ns_rounded = s.round()\n```", "code": "s = pd.Series([0.1, 1.3, 2.7])\ns_rounded = s.round()"}
{"text": "Instance: pandas.Series.lt\nOutput:\n```python\nresult = a.lt(b, fill_value=0) # returns a boolean Series indicating if elements in 'a' are less than elements in 'b', with NaNs filled with 0\n```", "code": "result = a.lt(b, fill_value=0) # returns a boolean Series indicating if elements in 'a' are less than elements in 'b', with NaNs filled with 0"}
{"text": "Instance: pandas.Series.gt\nOutput:\n```python\nresult = a.gt(b, fill_value=0) # returns a boolean Series indicating if values in 'a' are greater than 'b', with NaN filled with 0\n```", "code": "result = a.gt(b, fill_value=0) # returns a boolean Series indicating if values in 'a' are greater than 'b', with NaN filled with 0"}
{"text": "Instance: pandas.Series.le\nOutput:\n```python\nresult = a.le(b, fill_value=0) # returns a boolean Series indicating if each element in 'a' is less than or equal to the corresponding element in 'b'\n```", "code": "result = a.le(b, fill_value=0) # returns a boolean Series indicating if each element in 'a' is less than or equal to the corresponding element in 'b'"}
{"text": "Instance: pandas.Series.ge\nOutput:\n```python\nresult = a.ge(b, fill_value=0) # returns a boolean Series indicating if each element in 'a' is greater than or equal to the corresponding element in 'b'\n```", "code": "result = a.ge(b, fill_value=0) # returns a boolean Series indicating if each element in 'a' is greater than or equal to the corresponding element in 'b'"}
{"text": "Instance: pandas.Series.ne\nOutput:\n```python\nresult = a.ne(b, fill_value=0) # returns a boolean Series indicating whether each element in 'a' is not equal to the corresponding element in 'b', with NaNs filled with 0\n```", "code": "result = a.ne(b, fill_value=0) # returns a boolean Series indicating whether each element in 'a' is not equal to the corresponding element in 'b', with NaNs filled with 0"}
{"text": "Instance: pandas.Series.eq\nOutput:\n```python\nresult = a.eq(b, fill_value=0) # compares two Series 'a' and 'b' element-wise, filling missing values with 0\n```", "code": "result = a.eq(b, fill_value=0) # compares two Series 'a' and 'b' element-wise, filling missing values with 0"}
{"text": "Instance: pandas.Series.product\nOutput:\n```python\nresult = pd.Series([2, 4, 6, 8]).product()\n```", "code": "result = pd.Series([2, 4, 6, 8]).product()"}
{"text": "Instance: pandas.Series.dot\nOutput:\n```python\nresult = s.dot(other) # returns 8\n```", "code": "result = s.dot(other) # returns 8"}
{"text": "Instance: pandas.Series.apply\nOutput:\n```python\ns = pd.Series([20, 21, 12], index=['London', 'New York', 'Helsinki'])\ns.apply(lambda x: x ** 2)\n```", "code": "s = pd.Series([20, 21, 12], index=['London', 'New York', 'Helsinki'])\ns.apply(lambda x: x ** 2)"}
{"text": "Instance: pandas.Series.agg\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.agg('min') # outputs 1\n\ns.agg(['min', 'max']) \n# outputs:\n# min   1\n# max   4\n# dtype: int64\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.agg('min') # outputs 1\n\ns.agg(['min', 'max']) \n# outputs:\n# min   1\n# max   4\n# dtype: int64"}
{"text": "Instance: pandas.Series.aggregate\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.agg('min') # Output: 1\n\ns.agg(['min', 'max']) # Output:\n# min   1\n# max   4\n# dtype: int64\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.agg('min') # Output: 1\n\ns.agg(['min', 'max']) # Output:\n# min   1\n# max   4\n# dtype: int64"}
{"text": "Instance: pandas.Series.transform\nOutput:\n```python\ndf['size'] = df.groupby('c')['type'].transform(len)\n```", "code": "df['size'] = df.groupby('c')['type'].transform(len)"}
{"text": "Instance: pandas.Series.map\nOutput:\n```python\ns = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\ns.map({'cat': 'kitten', 'dog': 'puppy'})\n```", "code": "s = pd.Series(['cat', 'dog', np.nan, 'rabbit'])\ns.map({'cat': 'kitten', 'dog': 'puppy'})"}
{"text": "Instance: pandas.Series.groupby\nOutput:\n```python\nser = pd.Series([390., 350., 30., 20.], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'], name=\"Max Speed\")\nresult = ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\nresult2 = ser.groupby(level=0).mean()\nresult3 = ser.groupby(ser > 100).mean()\n```", "code": "ser = pd.Series([390., 350., 30., 20.], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'], name=\"Max Speed\")\nresult = ser.groupby([\"a\", \"b\", \"a\", \"b\"]).mean()\nresult2 = ser.groupby(level=0).mean()\nresult3 = ser.groupby(ser > 100).mean()"}
{"text": "Instance: pandas.Series.rolling\nOutput:\n```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf['Rolling_Avg'] = df['Sales'].rolling(window=2).mean()\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf['Rolling_Avg'] = df['Sales'].rolling(window=2).mean()"}
{"text": "Instance: pandas.Series.expanding\nOutput:\n```python\ndf = pd.DataFrame({\"Sales\": [100, 200, 300, 400, 500]})\ndf['Cumulative Sales'] = df['Sales'].expanding().sum()\n```", "code": "df = pd.DataFrame({\"Sales\": [100, 200, 300, 400, 500]})\ndf['Cumulative Sales'] = df['Sales'].expanding().sum()"}
{"text": "Instance: pandas.Series.ewm\nOutput:\n```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf['Sales'].ewm(span=2).mean()\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf['Sales'].ewm(span=2).mean()"}
{"text": "Instance: pandas.Series.pipe\nOutput:\n```python\nresult = df.pipe(subtract_federal_tax).pipe(subtract_state_tax, rate=0.12).pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n```", "code": "result = df.pipe(subtract_federal_tax).pipe(subtract_state_tax, rate=0.12).pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)"}
{"text": "Instance: pandas.Series.abs\nOutput:\n```python\ns = pd.Series([-1.10, 2, -3.33, 4])\ns.abs()\n```", "code": "s = pd.Series([-1.10, 2, -3.33, 4])\ns.abs()"}
{"text": "Instance: pandas.Series.all\nOutput:\n```python\ns = pd.Series([True, False, True])\ns.all() # outputs False\n```", "code": "s = pd.Series([True, False, True])\ns.all() # outputs False"}
{"text": "Instance: pandas.Series.any\nOutput:\n```python\ns = pd.Series([True, False, True])\ns.any() # outputs True\n```", "code": "s = pd.Series([True, False, True])\ns.any() # outputs True"}
{"text": "Instance: pandas.Series.autocorr\nOutput:\n```python\ns = pd.Series([0.25, 0.5, 0.2, -0.05])\ns.autocorr() # Output: 0.10355...\n\ns = pd.Series([1, 0, 0, 0])\ns.autocorr() # Output: nan\n```", "code": "s = pd.Series([0.25, 0.5, 0.2, -0.05])\ns.autocorr() # Output: 0.10355...\n\ns = pd.Series([1, 0, 0, 0])\ns.autocorr() # Output: nan"}
{"text": "Instance: pandas.Series.between\nOutput:\n```python\ns.between(1, 4)\n```", "code": "s.between(1, 4)"}
{"text": "Instance: pandas.Series.clip\nOutput:\n```python\ndf.clip(-4, 6)\n```", "code": "df.clip(-4, 6)"}
{"text": "Instance: pandas.Series.corr\nOutput:\n```python\ns1 = pd.Series([1, 2, 3], index=['apple', 'banana', 'cherry'])\ns2 = pd.Series([3, 2, 1], index=['cherry', 'banana', 'apple'])\ns1.corr(s2) # outputs -1.0\n```", "code": "s1 = pd.Series([1, 2, 3], index=['apple', 'banana', 'cherry'])\ns2 = pd.Series([3, 2, 1], index=['cherry', 'banana', 'apple'])\ns1.corr(s2) # outputs -1.0"}
{"text": "Instance: pandas.Series.count\nOutput:\n```python\ns = pd.Series([0.0, 1.0, np.nan])\ns.count() # outputs 2\n```", "code": "s = pd.Series([0.0, 1.0, np.nan])\ns.count() # outputs 2"}
{"text": "Instance: pandas.Series.cov\nOutput:\n```python\ns1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874\n```", "code": "s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874"}
{"text": "Instance: pandas.Series.cummax\nOutput:\n```python\ns = pd.Series([2, np.nan, 5, -1, 0])\ns.cummax()\n```", "code": "s = pd.Series([2, np.nan, 5, -1, 0])\ns.cummax()"}
{"text": "Instance: pandas.Series.cummin\nOutput:\n```python\ns = pd.Series([2, np.nan, 5, -1, 0])\ns.cummin()\n```", "code": "s = pd.Series([2, np.nan, 5, -1, 0])\ns.cummin()"}
{"text": "Instance: pandas.Series.cumprod\nOutput:\n```python\ns = pd.Series([2, np.nan, 5, -1, 0])\ns.cumprod()\n```", "code": "s = pd.Series([2, np.nan, 5, -1, 0])\ns.cumprod()"}
{"text": "Instance: pandas.Series.cumsum\nOutput:\n```python\ns = pd.Series([2, np.nan, 5, -1, 0])\ns.cumsum() # outputs cumulative sum of the series\n```", "code": "s = pd.Series([2, np.nan, 5, -1, 0])\ns.cumsum() # outputs cumulative sum of the series"}
{"text": "Instance: pandas.Series.describe\nOutput:\n```python\ns = pd.Series(['x', 'y', 'z'])\ns.describe()\n```", "code": "s = pd.Series(['x', 'y', 'z'])\ns.describe()"}
{"text": "Instance: pandas.Series.diff\nOutput:\n```python\ns = pd.Series([1, 1, 2, 3, 5, 8])\ns.diff()\n```", "code": "s = pd.Series([1, 1, 2, 3, 5, 8])\ns.diff()"}
{"text": "Instance: pandas.Series.factorize\nOutput:\n```python\ncodes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\ncodes\n# Output: array([0, 0, 1, 2, 0])\nuniques\n# Output: array(['b', 'a', 'c'], dtype=object)\n```", "code": "codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\ncodes\n# Output: array([0, 0, 1, 2, 0])\nuniques\n# Output: array(['b', 'a', 'c'], dtype=object)"}
{"text": "Instance: pandas.Series.kurt\nOutput:\n```python\ns = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\ns.kurt() # output: 1.5\n```", "code": "s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\ns.kurt() # output: 1.5"}
{"text": "Instance: pandas.Series.max\nOutput:\n```python\ns.max() # outputs 8 for the Series s defined above\n```", "code": "s.max() # outputs 8 for the Series s defined above"}
{"text": "Instance: pandas.Series.mean\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.mean() # outputs 2.0\n```", "code": "s = pd.Series([1, 2, 3])\ns.mean() # outputs 2.0"}
{"text": "Instance: pandas.Series.median\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.median() # outputs 2.0\n```", "code": "s = pd.Series([1, 2, 3])\ns.median() # outputs 2.0"}
{"text": "Instance: pandas.Series.min\nOutput:\n```python\ns.min() # outputs the minimum value in the Series, e.g. 0\n```", "code": "s.min() # outputs the minimum value in the Series, e.g. 0"}
{"text": "Instance: pandas.Series.mode\nOutput:\n```python\ns = pd.Series([2, 4, 2, 2, 4, None])\ns.mode()\n```", "code": "s = pd.Series([2, 4, 2, 2, 4, None])\ns.mode()"}
{"text": "Instance: pandas.Series.nlargest\nOutput:\n```python\ns = pd.Series({\"Italy\": 59000000, \"France\": 65000000, \"Malta\": 434000, \"Maldives\": 434000, \"Brunei\": 434000, \"Iceland\": 337000, \"Nauru\": 11300, \"Tuvalu\": 11300, \"Anguilla\": 11300, \"Montserrat\": 5200})\ns.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties\n```", "code": "s = pd.Series({\"Italy\": 59000000, \"France\": 65000000, \"Malta\": 434000, \"Maldives\": 434000, \"Brunei\": 434000, \"Iceland\": 337000, \"Nauru\": 11300, \"Tuvalu\": 11300, \"Anguilla\": 11300, \"Montserrat\": 5200})\ns.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties"}
{"text": "Instance: pandas.Series.nsmallest\nOutput:\n```python\ns = pd.Series({\"Italy\": 59000000, \"France\": 65000000, \"Brunei\": 434000, \"Malta\": 434000, \"Maldives\": 434000, \"Iceland\": 337000, \"Nauru\": 11300, \"Tuvalu\": 11300, \"Anguilla\": 11300, \"Montserrat\": 5200})\ns.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')\n```", "code": "s = pd.Series({\"Italy\": 59000000, \"France\": 65000000, \"Brunei\": 434000, \"Malta\": 434000, \"Maldives\": 434000, \"Iceland\": 337000, \"Nauru\": 11300, \"Tuvalu\": 11300, \"Anguilla\": 11300, \"Montserrat\": 5200})\ns.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')"}
{"text": "Instance: pandas.Series.pct_change\nOutput:\n```python\ns = pd.Series([90, 91, 85])\ns.pct_change()\n```", "code": "s = pd.Series([90, 91, 85])\ns.pct_change()"}
{"text": "Instance: pandas.Series.prod\nOutput:\n```python\nresult = pd.Series([2, 3, 4, 5]).prod()\n```", "code": "result = pd.Series([2, 3, 4, 5]).prod()"}
{"text": "Instance: pandas.Series.quantile\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.quantile(.5) # 2.5\ns.quantile([.25, .5, .75]) \n'''\n0.25    1.75\n0.50    2.50\n0.75    3.25\ndtype: float64\n'''\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.quantile(.5) # 2.5\ns.quantile([.25, .5, .75]) \n'''\n0.25    1.75\n0.50    2.50\n0.75    3.25\ndtype: float64\n'''"}
{"text": "Instance: pandas.Series.rank\nOutput:\n```python\ndf['default_rank'] = df['Number_legs'].rank()\ndf['max_rank'] = df['Number_legs'].rank(method='max')\ndf['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\ndf['pct_rank'] = df['Number_legs'].rank(pct=True)\n```", "code": "df['default_rank'] = df['Number_legs'].rank()\ndf['max_rank'] = df['Number_legs'].rank(method='max')\ndf['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\ndf['pct_rank'] = df['Number_legs'].rank(pct=True)"}
{"text": "Instance: pandas.Series.sem\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.sem().round(6) # 0.57735\n\ndf = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.sem() \n# height    10.0\n# weight    10.0\n# dtype: float64\n\ndf.sem(axis=1)\n# 0    70.0\n# 1    70.0\n# 2    70.0\n# dtype: float64\n\ndf = pd.DataFrame({'age': [25, 30], 'gender': ['M', 'F']})\ndf.sem(numeric_only=True)\n# age    2.5\n# dtype: float64\n```", "code": "s = pd.Series([1, 2, 3])\ns.sem().round(6) # 0.57735\n\ndf = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.sem() \n# height    10.0\n# weight    10.0\n# dtype: float64\n\ndf.sem(axis=1)\n# 0    70.0\n# 1    70.0\n# 2    70.0\n# dtype: float64\n\ndf = pd.DataFrame({'age': [25, 30], 'gender': ['M', 'F']})\ndf.sem(numeric_only=True)\n# age    2.5\n# dtype: float64"}
{"text": "Instance: pandas.Series.skew\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.skew() # output: 0.0\n```", "code": "s = pd.Series([1, 2, 3])\ns.skew() # output: 0.0"}
{"text": "Instance: pandas.Series.std\nOutput:\n```python\ndf = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points_scored': [25, 30, 20, 35],\n                   'rebounds': [10, 5, 8, 12]}\n                  ).set_index('player_id')\ndf.std()\n```\n```python\ndf.std(ddof=0)\n```", "code": "df = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points_scored': [25, 30, 20, 35],\n                   'rebounds': [10, 5, 8, 12]}\n                  ).set_index('player_id')\ndf.std()\ndf.std(ddof=0)"}
{"text": "Instance: pandas.Series.sum\nOutput:\n```python\ns = pd.Series([4, 2, 0, 8], name='legs', index=idx)\ns.sum() # outputs 14\n```", "code": "s = pd.Series([4, 2, 0, 8], name='legs', index=idx)\ns.sum() # outputs 14"}
{"text": "Instance: pandas.Series.var\nOutput:\n```python\ndf = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'score': [85, 92, 78, 88],\n                   'time_played': [120, 150, 90, 180]}\n                  ).set_index('player_id')\ndf.var()\n```\n```python\ndf.var(ddof=0)\n```", "code": "df = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'score': [85, 92, 78, 88],\n                   'time_played': [120, 150, 90, 180]}\n                  ).set_index('player_id')\ndf.var()\ndf.var(ddof=0)"}
{"text": "Instance: pandas.Series.kurtosis\nOutput:\n```python\ns = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\ns.kurt()\n```", "code": "s = pd.Series([1, 2, 2, 3], index=['cat', 'dog', 'dog', 'mouse'])\ns.kurt()"}
{"text": "Instance: pandas.Series.unique\nOutput:\n```python\nunique_values = pd.Series([2, 1, 3, 3], name='A').unique()\n```", "code": "unique_values = pd.Series([2, 1, 3, 3], name='A').unique()"}
{"text": "Instance: pandas.Series.nunique\nOutput:\n```python\ns = pd.Series([1, 3, 5, 7, 7])\ns.nunique() # outputs 4\n```", "code": "s = pd.Series([1, 3, 5, 7, 7])\ns.nunique() # outputs 4"}
{"text": "Instance: pandas.Series.is_unique\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.is_unique # True\n\ns = pd.Series([1, 2, 3, 1])\ns.is_unique # False\n```", "code": "s = pd.Series([1, 2, 3])\ns.is_unique # True\n\ns = pd.Series([1, 2, 3, 1])\ns.is_unique # False"}
{"text": "Instance: pandas.Series.is_monotonic_increasing\nOutput:\n```python\ns = pd.Series([1, 2, 2])\ns.is_monotonic_increasing # True\n\ns = pd.Series([3, 2, 1])\ns.is_monotonic_increasing # False\n```", "code": "s = pd.Series([1, 2, 2])\ns.is_monotonic_increasing # True\n\ns = pd.Series([3, 2, 1])\ns.is_monotonic_increasing # False"}
{"text": "Instance: pandas.Series.is_monotonic_decreasing\nOutput:\n```python\ns = pd.Series([3, 2, 2, 1])\ns.is_monotonic_decreasing # True\n\ns = pd.Series([1, 2, 3])\ns.is_monotonic_decreasing # False\n```", "code": "s = pd.Series([3, 2, 2, 1])\ns.is_monotonic_decreasing # True\n\ns = pd.Series([1, 2, 3])\ns.is_monotonic_decreasing # False"}
{"text": "Instance: pandas.Series.value_counts\nOutput:\n```python\ns = pd.Series([3, 1, 2, 3, 4, np.nan])\ns.value_counts(dropna=False)\n```", "code": "s = pd.Series([3, 1, 2, 3, 4, np.nan])\ns.value_counts(dropna=False)"}
{"text": "Instance: pandas.Series.align\nOutput:\n```python\nleft, right = df.align(other, join=\"outer\", axis=1)\n```", "code": "left, right = df.align(other, join=\"outer\", axis=1)"}
{"text": "Instance: pandas.Series.case_when\nOutput:\n```python\nresult = c.case_when(caselist=[(a.gt(0), a), (b.gt(0), b)])\n```", "code": "result = c.case_when(caselist=[(a.gt(0), a), (b.gt(0), b)])"}
{"text": "Instance: pandas.Series.drop\nOutput:\n```python\ns.drop(labels=['B', 'C'])\n```", "code": "s.drop(labels=['B', 'C'])"}
{"text": "Instance: pandas.Series.droplevel\nOutput:\n```python\ndf.droplevel('a') # drops the 'a' level from the index of the DataFrame df\n```", "code": "df.droplevel('a') # drops the 'a' level from the index of the DataFrame df"}
{"text": "Instance: pandas.Series.drop_duplicates\nOutput:\n```python\ns = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'], name='animal')\ns.drop_duplicates()\ns.drop_duplicates(keep='last')\ns.drop_duplicates(keep=False)\n```", "code": "s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'], name='animal')\ns.drop_duplicates()\ns.drop_duplicates(keep='last')\ns.drop_duplicates(keep=False)"}
{"text": "Instance: pandas.Series.duplicated\nOutput:\n```python\nanimals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])\nanimals.duplicated()\n```", "code": "animals = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama'])\nanimals.duplicated()"}
{"text": "Instance: pandas.Series.equals\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 28], 'Humidity': [60, 65, 70]})\nexactly_equal = pd.DataFrame({'Temperature': [25, 30, 28], 'Humidity': [60, 65, 70]})\ndf.equals(exactly_equal) # True\n\ndifferent_column_type = pd.DataFrame({1.0: [25, 30, 28], 2.0: [60, 65, 70]})\ndf.equals(different_column_type) # True\n\ndifferent_data_type = pd.DataFrame({'Temperature': [25.0, 30.0, 28.0], 'Humidity': [60.0, 65.0, 70.0]})\ndf.equals(different_data_type) # False\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 28], 'Humidity': [60, 65, 70]})\nexactly_equal = pd.DataFrame({'Temperature': [25, 30, 28], 'Humidity': [60, 65, 70]})\ndf.equals(exactly_equal) # True\n\ndifferent_column_type = pd.DataFrame({1.0: [25, 30, 28], 2.0: [60, 65, 70]})\ndf.equals(different_column_type) # True\n\ndifferent_data_type = pd.DataFrame({'Temperature': [25.0, 30.0, 28.0], 'Humidity': [60.0, 65.0, 70.0]})\ndf.equals(different_data_type) # False"}
{"text": "Instance: pandas.Series.first\nOutput:\n```python\nts.first('3D') # returns the first 3 days of the DataFrame ts\n```", "code": "ts.first('3D') # returns the first 3 days of the DataFrame ts"}
{"text": "Instance: pandas.Series.head\nOutput:\n```python\ndf = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion', 'monkey', 'parrot', 'shark', 'whale', 'zebra']})\ndf.head()\ndf.head(3)\ndf.head(-3)\n```", "code": "df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion', 'monkey', 'parrot', 'shark', 'whale', 'zebra']})\ndf.head()\ndf.head(3)\ndf.head(-3)"}
{"text": "Instance: pandas.Series.idxmax\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'\n```", "code": "s = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'"}
{"text": "Instance: pandas.Series.idxmin\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # outputs 'A'\n```", "code": "s = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # outputs 'A'"}
{"text": "Instance: pandas.Series.isin\nOutput:\n```python\ns = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'], name='animal')\ns.isin(['cow', 'llama'])\n```", "code": "s = pd.Series(['llama', 'cow', 'llama', 'beetle', 'llama', 'hippo'], name='animal')\ns.isin(['cow', 'llama'])"}
{"text": "Instance: pandas.Series.last\nOutput:\n```python\nts.last('3D')  \n```", "code": "ts.last('3D')"}
{"text": "Instance: pandas.Series.reindex\nOutput:\n```python\nnew_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10', 'Chrome']\ndf.reindex(new_index, fill_value=0)\n```", "code": "new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10', 'Chrome']\ndf.reindex(new_index, fill_value=0)"}
{"text": "Instance: pandas.Series.reindex_like\nOutput:\n```python\nnew_series = series.reindex_like(other_series)\n```", "code": "new_series = series.reindex_like(other_series)"}
{"text": "Instance: pandas.Series.rename\nOutput:\n```python\ns.rename(\"new_name\")  # changes Series name to 'new_name'\n```", "code": "s.rename(\"new_name\")  # changes Series name to 'new_name'"}
{"text": "Instance: pandas.Series.rename_axis\nOutput:\n```python\ns = pd.Series([\"dog\", \"cat\", \"monkey\"])\ns.rename_axis(\"animal\")\n```", "code": "s = pd.Series([\"dog\", \"cat\", \"monkey\"])\ns.rename_axis(\"animal\")"}
{"text": "Instance: pandas.Series.reset_index\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4], name='sales',\n              index=pd.Index(['Jan', 'Feb', 'Mar', 'Apr'], name='month'))\n\ns.reset_index()\n```\n```python\ns.reset_index(name='revenue')\n```\n```python\ns.reset_index(drop=True)\n```", "code": "s = pd.Series([1, 2, 3, 4], name='sales',\n              index=pd.Index(['Jan', 'Feb', 'Mar', 'Apr'], name='month'))\n\ns.reset_index()\ns.reset_index(name='revenue')\ns.reset_index(drop=True)"}
{"text": "Instance: pandas.Series.sample\nOutput:\n```python\ndf['num_legs'].sample(n=3, random_state=1)\n```", "code": "df['num_legs'].sample(n=3, random_state=1)"}
{"text": "Instance: pandas.Series.set_axis\nOutput:\n```python\ns.set_axis(['height', 'weight', 'age'], axis=0)\n```", "code": "s.set_axis(['height', 'weight', 'age'], axis=0)"}
{"text": "Instance: pandas.Series.take\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4, 5])\ns.take([0, 3]) # returns a new Series with elements at index 0 and 3\n```", "code": "s = pd.Series([1, 2, 3, 4, 5])\ns.take([0, 3]) # returns a new Series with elements at index 0 and 3"}
{"text": "Instance: pandas.Series.tail\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina']})\ndf.tail() # returns the last 5 rows of the DataFrame\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina']})\ndf.tail() # returns the last 5 rows of the DataFrame"}
{"text": "Instance: pandas.Series.truncate\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 35, 40, 45],\n                   'Humidity': [50, 55, 60, 65, 70],\n                   'Pressure': [1000, 950, 900, 850, 800]},\n                  index=[1, 2, 3, 4, 5])\n\ndf.truncate(before=2, after=4)\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 35, 40, 45],\n                   'Humidity': [50, 55, 60, 65, 70],\n                   'Pressure': [1000, 950, 900, 850, 800]},\n                  index=[1, 2, 3, 4, 5])\n\ndf.truncate(before=2, after=4)"}
{"text": "Instance: pandas.Series.where\nOutput:\n```python\ns = pd.Series(range(5))\ns.where(s > 0)\n```", "code": "s = pd.Series(range(5))\ns.where(s > 0)"}
{"text": "Instance: pandas.Series.mask\nOutput:\n```python\ns = pd.Series(range(5))\ns.mask(s > 0)\n```", "code": "s = pd.Series(range(5))\ns.mask(s > 0)"}
{"text": "Instance: pandas.Series.add_prefix\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.add_prefix('item_')\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.add_prefix('item_')"}
{"text": "Instance: pandas.Series.add_suffix\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.add_suffix('_item')\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.add_suffix('_item')"}
{"text": "Instance: pandas.Series.filter\nOutput:\n```python\ndf.filter(items=['one', 'three'])\n```", "code": "df.filter(items=['one', 'three'])"}
{"text": "Instance: pandas.Series.backfill\nOutput:\n```python\ns = pd.Series([1, np.nan, 2, np.nan, 3])\ns_backfilled = s.backfill()\n```", "code": "s = pd.Series([1, np.nan, 2, np.nan, 3])\ns_backfilled = s.backfill()"}
{"text": "Instance: pandas.Series.bfill\nOutput:\n```python\ns = pd.Series([1, None, None, 2])\ns.bfill()\n```", "code": "s = pd.Series([1, None, None, 2])\ns.bfill()"}
{"text": "Instance: pandas.Series.dropna\nOutput:\n```python\nser = pd.Series([1., 2., np.nan])\nser.dropna() # drops NaN values from the Series\n```", "code": "ser = pd.Series([1., 2., np.nan])\nser.dropna() # drops NaN values from the Series"}
{"text": "Instance: pandas.Series.ffill\nOutput:\n```python\nser = pd.Series([1, np.nan, 2, 3])\nser.ffill()\n# Output:\n# 0    1.0\n# 1    1.0\n# 2    2.0\n# 3    3.0\n# dtype: float64\n```", "code": "ser = pd.Series([1, np.nan, 2, 3])\nser.ffill()\n# Output:\n# 0    1.0\n# 1    1.0\n# 2    2.0\n# 3    3.0\n# dtype: float64"}
{"text": "Instance: pandas.Series.fillna\nOutput:\n```python\ndf.fillna(0)\n```", "code": "df.fillna(0)"}
{"text": "Instance: pandas.Series.interpolate\nOutput:\n```python\ns = pd.Series([0, 1, np.nan, 3])\ns.interpolate()\n```", "code": "s = pd.Series([0, 1, np.nan, 3])\ns.interpolate()"}
{"text": "Instance: pandas.Series.isna\nOutput:\n```python\nser = pd.Series([5, 6, np.nan])\nser.isna() # outputs boolean series indicating which values are missing\n```", "code": "ser = pd.Series([5, 6, np.nan])\nser.isna() # outputs boolean series indicating which values are missing"}
{"text": "Instance: pandas.Series.isnull\nOutput:\n```python\nser = pd.Series([5, 6, np.nan])\nser.isna() # outputs boolean array [False, False, True]\n```", "code": "ser = pd.Series([5, 6, np.nan])\nser.isna() # outputs boolean array [False, False, True]"}
{"text": "Instance: pandas.Series.notna\nOutput:\n```python\nser = pd.Series([5, 6, np.nan])\nser.notna() # outputs boolean series, e.g. 0     True\n            #                           1     True\n            #                           2    False\n            #                           dtype: bool\n```", "code": "ser = pd.Series([5, 6, np.nan])\nser.notna() # outputs boolean series, e.g. 0     True\n            #                           1     True\n            #                           2    False\n            #                           dtype: bool"}
{"text": "Instance: pandas.Series.notnull\nOutput:\n```python\nser = pd.Series([5, 6, np.nan])\nser.notnull()\n```", "code": "ser = pd.Series([5, 6, np.nan])\nser.notnull()"}
{"text": "Instance: pandas.Series.pad\nOutput:\n```python\ns = pd.Series([1, 2, 3, np.nan])\ns.pad(limit=2) # pads the series with NaN values at the beginning and end, e.g. [nan, nan, 1, 2, 3, nan, nan]\n```", "code": "s = pd.Series([1, 2, 3, np.nan])\ns.pad(limit=2) # pads the series with NaN values at the beginning and end, e.g. [nan, nan, 1, 2, 3, nan, nan]"}
{"text": "Instance: pandas.Series.replace\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4, 5])\ns.replace(1, 5)\n```", "code": "s = pd.Series([1, 2, 3, 4, 5])\ns.replace(1, 5)"}
{"text": "Instance: pandas.Series.argsort\nOutput:\n```python\ns = pd.Series([3, 2, 1])\ns.argsort() # outputs Series with index representing original positions and values representing sorted positions\n```", "code": "s = pd.Series([3, 2, 1])\ns.argsort() # outputs Series with index representing original positions and values representing sorted positions"}
{"text": "Instance: pandas.Series.argmin\nOutput:\n```python\ns = pd.Series({'Ronaldo': 750, 'Messi': 700, 'Neymar': 600, 'Mbappe': 650})\ns.argmin() # outputs 2\n```", "code": "s = pd.Series({'Ronaldo': 750, 'Messi': 700, 'Neymar': 600, 'Mbappe': 650})\ns.argmin() # outputs 2"}
{"text": "Instance: pandas.Series.argmax\nOutput:\n```python\ns = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmax() # outputs 2\n```", "code": "s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmax() # outputs 2"}
{"text": "Instance: pandas.Series.reorder_levels\nOutput:\n```python\ns.reorder_levels([1, 0])\n```", "code": "s.reorder_levels([1, 0])"}
{"text": "Instance: pandas.Series.sort_values\nOutput:\n```python\ns = pd.Series([np.nan, 1, 3, 10, 5])\ns.sort_values(ascending=True)\n```", "code": "s = pd.Series([np.nan, 1, 3, 10, 5])\ns.sort_values(ascending=True)"}
{"text": "Instance: pandas.Series.sort_index\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\ns.sort_index()\n```", "code": "s = pd.Series(['a', 'b', 'c', 'd'], index=[3, 2, 1, 4])\ns.sort_index()"}
{"text": "Instance: pandas.Series.swaplevel\nOutput:\n```python\ns.swaplevel(0, 1)\n```", "code": "s.swaplevel(0, 1)"}
{"text": "Instance: pandas.Series.unstack\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4],\n              index=pd.MultiIndex.from_product([['one', 'two'],\n                                                ['a', 'b']]))\ns.unstack(level=-1)\n```\n```python\ns = pd.Series([1, 2, 3, 4],\n              index=pd.MultiIndex.from_product([['one', 'two'],\n                                                ['a', 'b']]))\ns.unstack(level=0)\n```", "code": "s = pd.Series([1, 2, 3, 4],\n              index=pd.MultiIndex.from_product([['one', 'two'],\n                                                ['a', 'b']]))\ns.unstack(level=-1)\ns = pd.Series([1, 2, 3, 4],\n              index=pd.MultiIndex.from_product([['one', 'two'],\n                                                ['a', 'b']]))\ns.unstack(level=0)"}
{"text": "Instance: pandas.Series.explode\nOutput:\n```python\ns = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\ns.explode() # explodes the list elements into separate rows\n```", "code": "s = pd.Series([[1, 2, 3], 'foo', [], [3, 4]])\ns.explode() # explodes the list elements into separate rows"}
{"text": "Instance: pandas.Series.searchsorted\nOutput:\n```python\nser = pd.Series([1, 2, 3])\nser.searchsorted(4) # 3\n```", "code": "ser = pd.Series([1, 2, 3])\nser.searchsorted(4) # 3"}
{"text": "Instance: pandas.Series.ravel\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.ravel() # array([1, 2, 3])\n```", "code": "s = pd.Series([1, 2, 3])\ns.ravel() # array([1, 2, 3])"}
{"text": "Instance: pandas.Series.repeat\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns.repeat(2)\n```", "code": "s = pd.Series(['a', 'b', 'c'])\ns.repeat(2)"}
{"text": "Instance: pandas.Series.squeeze\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=['height', 'weight'])\ndf_height = df[['height']]\ndf_height.squeeze('columns') # Outputs a Series with the column 'height' squeezed\n```", "code": "df = pd.DataFrame([[1, 2], [3, 4]], columns=['height', 'weight'])\ndf_height = df[['height']]\ndf_height.squeeze('columns') # Outputs a Series with the column 'height' squeezed"}
{"text": "Instance: pandas.Series.view\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4, 5], name='Random_Numbers')\ns_view = s.view()\n```", "code": "s = pd.Series([1, 2, 3, 4, 5], name='Random_Numbers')\ns_view = s.view()"}
{"text": "Instance: pandas.Series.compare\nOutput:\n```python\ns1.compare(s2)\n```", "code": "s1.compare(s2)"}
{"text": "Instance: pandas.Series.update\nOutput:\n```python\ns = pd.Series([1, 2, 3])\ns.update(pd.Series([4, 5, 6]))\ns\n# Output:\n# 0    4\n# 1    5\n# 2    6\n# dtype: int64\n```", "code": "s = pd.Series([1, 2, 3])\ns.update(pd.Series([4, 5, 6]))\ns\n# Output:\n# 0    4\n# 1    5\n# 2    6\n# dtype: int64"}
{"text": "Instance: pandas.Series.asfreq\nOutput:\n```python\ndf.asfreq(freq='30s', fill_value=9.0)\n```", "code": "df.asfreq(freq='30s', fill_value=9.0)"}
{"text": "Instance: pandas.Series.asof\nOutput:\n```python\ns = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\ns.asof(20) # outputs 2.0\n```", "code": "s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\ns.asof(20) # outputs 2.0"}
{"text": "Instance: pandas.Series.shift\nOutput:\n```python\ndf['Temperature'].shift(periods=2, fill_value=0)\n```", "code": "df['Temperature'].shift(periods=2, fill_value=0)"}
{"text": "Instance: pandas.Series.first_valid_index\nOutput:\n```python\ns = pd.Series([None, 3, 4])\ns.first_valid_index() # Output: 1\n```", "code": "s = pd.Series([None, 3, 4])\ns.first_valid_index() # Output: 1"}
{"text": "Instance: pandas.Series.last_valid_index\nOutput:\n```python\ns = pd.Series([None, 3, 4])\ns.last_valid_index() # outputs 2\n```", "code": "s = pd.Series([None, 3, 4])\ns.last_valid_index() # outputs 2"}
{"text": "Instance: pandas.Series.resample\nOutput:\n```python\nseries.resample('3min').sum()\n```", "code": "series.resample('3min').sum()"}
{"text": "Instance: pandas.Series.tz_convert\nOutput:\n```python\ns = pd.Series([1],\n              index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\ns.tz_convert('Asia/Tokyo')\n```", "code": "s = pd.Series([1],\n              index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\ns.tz_convert('Asia/Tokyo')"}
{"text": "Instance: pandas.Series.tz_localize\nOutput:\n```python\ns = pd.Series(range(7),\n              index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 03:00:00',\n                                      '2018-10-28 03:30:00']))\ns.tz_localize('CET', ambiguous='infer')\n```", "code": "s = pd.Series(range(7),\n              index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 03:00:00',\n                                      '2018-10-28 03:30:00']))\ns.tz_localize('CET', ambiguous='infer')"}
{"text": "Instance: pandas.Series.at_time\nOutput:\n```python\nts.at_time('12:00')\n```", "code": "ts.at_time('12:00')"}
{"text": "Instance: pandas.Series.between_time\nOutput:\n```python\nts.between_time('0:15', '0:45')\n```", "code": "ts.between_time('0:15', '0:45')"}
{"text": "Instance: pandas.Series.str\nOutput:\n```python\ns = pd.Series([\"A_Str_Series\"])\ns.str.split(\"_\") # splits the string in the Series by \"_\" and returns a list of the split parts\n```", "code": "s = pd.Series([\"A_Str_Series\"])\ns.str.split(\"_\") # splits the string in the Series by \"_\" and returns a list of the split parts"}
{"text": "Instance: pandas.Series.cat\nOutput:\n```python\ns = pd.Series(list(\"abbccc\")).astype(\"category\")\ns.cat.categories\ns.cat.rename_categories(list(\"cba\"))\ns.cat.reorder_categories(list(\"cba\"))\ns.cat.add_categories([\"d\", \"e\"])\ns.cat.remove_categories([\"a\", \"c\"])\ns1 = s.cat.add_categories([\"d\", \"e\"])\ns1.cat.remove_unused_categories()\ns.cat.set_categories(list(\"abcde\"))\ns.cat.as_ordered()\ns.cat.as_unordered()\n```", "code": "s = pd.Series(list(\"abbccc\")).astype(\"category\")\ns.cat.categories\ns.cat.rename_categories(list(\"cba\"))\ns.cat.reorder_categories(list(\"cba\"))\ns.cat.add_categories([\"d\", \"e\"])\ns.cat.remove_categories([\"a\", \"c\"])\ns1 = s.cat.add_categories([\"d\", \"e\"])\ns1.cat.remove_unused_categories()\ns.cat.set_categories(list(\"abcde\"))\ns.cat.as_ordered()\ns.cat.as_unordered()"}
{"text": "Instance: pandas.Series.dt\nOutput:\n```python\nseconds_series.dt.second\n```", "code": "seconds_series.dt.second"}
{"text": "Instance: pandas.Series.sparse\nOutput:\n```python\nser = pd.Series([0, 0, 2, 2, 2], dtype=\"Sparse[int]\")\nser.sparse.density # outputs 0.6\nser.sparse.sp_values # outputs array([2, 2, 2])\n```", "code": "ser = pd.Series([0, 0, 2, 2, 2], dtype=\"Sparse[int]\")\nser.sparse.density # outputs 0.6\nser.sparse.sp_values # outputs array([2, 2, 2])"}
{"text": "Instance: pandas.DataFrame.sparse\nOutput:\n```python\ndf = pd.DataFrame({\"sales\": [100, 200, 0, 150],\n                   \"revenue\": [300, 0, 0, 400]}, dtype=\"Sparse[int]\")\ndf.sparse.density # outputs 0.5\n```", "code": "df = pd.DataFrame({\"sales\": [100, 200, 0, 150],\n                   \"revenue\": [300, 0, 0, 400]}, dtype=\"Sparse[int]\")\ndf.sparse.density # outputs 0.5"}
{"text": "Instance: pandas.Index.str\nOutput:\n```python\ns = pd.Series([\"A_Str_Series\"])\ns.str.split(\"_\")\ns.str.replace(\"_\", \"\")\n```", "code": "s = pd.Series([\"A_Str_Series\"])\ns.str.split(\"_\")\ns.str.replace(\"_\", \"\")"}
{"text": "Instance: pandas.Series.dt.date\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.date\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.date"}
{"text": "Instance: pandas.Series.dt.time\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.time\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.time"}
{"text": "Instance: pandas.Series.dt.timetz\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.timetz\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.timetz"}
{"text": "Instance: pandas.Series.dt.year\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year\n# Output:\n# 0    2000\n# 1    2001\n# 2    2002\n# dtype: int32\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year\n# Output:\n# 0    2000\n# 1    2001\n# 2    2002\n# dtype: int32"}
{"text": "Instance: pandas.Series.dt.month\nOutput:\n```python\ndatetime_series.dt.month\n```", "code": "datetime_series.dt.month"}
{"text": "Instance: pandas.Series.dt.day\nOutput:\n```python\ndatetime_series.dt.day\n```", "code": "datetime_series.dt.day"}
{"text": "Instance: pandas.Series.dt.hour\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour"}
{"text": "Instance: pandas.Series.dt.minute\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute"}
{"text": "Instance: pandas.Series.dt.second\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second"}
{"text": "Instance: pandas.Series.dt.microsecond\nOutput:\n```python\ndatetime_series.dt.microsecond\n```", "code": "datetime_series.dt.microsecond"}
{"text": "Instance: pandas.Series.dt.nanosecond\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond"}
{"text": "Instance: pandas.Series.dt.dayofweek\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.Series.dt.day_of_week\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.Series.dt.weekday\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.weekday\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.weekday"}
{"text": "Instance: pandas.Series.dt.dayofyear\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.dayofyear\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.dayofyear"}
{"text": "Instance: pandas.Series.dt.day_of_year\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.dayofyear\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.dayofyear"}
{"text": "Instance: pandas.Series.dt.days_in_month\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.days_in_month\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.days_in_month"}
{"text": "Instance: pandas.Series.dt.quarter\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"4/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.quarter\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"4/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.quarter"}
{"text": "Instance: pandas.Series.dt.is_month_start\nOutput:\n```python\ns = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\ns.dt.is_month_start\n# Output:\n# 0    False\n# 1    False\n# 2    True\n# dtype: bool\n```", "code": "s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\ns.dt.is_month_start\n# Output:\n# 0    False\n# 1    False\n# 2    True\n# dtype: bool"}
{"text": "Instance: pandas.Series.dt.is_month_end\nOutput:\n```python\ns = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\ns.dt.is_month_end\n# Output:\n# 0    False\n# 1    True\n# 2    False\n# dtype: bool\n```", "code": "s = pd.Series(pd.date_range(\"2018-02-27\", periods=3))\ns.dt.is_month_end\n# Output:\n# 0    False\n# 1    True\n# 2    False\n# dtype: bool"}
{"text": "Instance: pandas.Series.dt.is_quarter_start\nOutput:\n```python\ndf.assign(quarter=df.dates.dt.quarter, is_quarter_start=df.dates.dt.is_quarter_start)\n```", "code": "df.assign(quarter=df.dates.dt.quarter, is_quarter_start=df.dates.dt.is_quarter_start)"}
{"text": "Instance: pandas.Series.dt.is_quarter_end\nOutput:\n```python\ndf.assign(quarter=df.dates.dt.quarter, is_quarter_end=df.dates.dt.is_quarter_end)\n```", "code": "df.assign(quarter=df.dates.dt.quarter, is_quarter_end=df.dates.dt.is_quarter_end)"}
{"text": "Instance: pandas.Series.dt.is_year_start\nOutput:\n```python\ndates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\ndates.dt.is_year_start\n```", "code": "dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\ndates.dt.is_year_start"}
{"text": "Instance: pandas.Series.dt.is_year_end\nOutput:\n```python\ndates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\ndates.dt.is_year_end\n```", "code": "dates = pd.Series(pd.date_range(\"2017-12-30\", periods=3))\ndates.dt.is_year_end"}
{"text": "Instance: pandas.Series.dt.is_leap_year\nOutput:\n```python\ndates_series.dt.is_leap_year\n```", "code": "dates_series.dt.is_leap_year"}
{"text": "Instance: pandas.Series.dt.daysinmonth\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.daysinmonth\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.daysinmonth"}
{"text": "Instance: pandas.Series.dt.days_in_month\nOutput:\n```python\ns = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.days_in_month\n```", "code": "s = pd.Series([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\ns = pd.to_datetime(s)\ns.dt.days_in_month"}
{"text": "Instance: pandas.Series.dt.tz\nOutput:\n```python\ns.dt.tz # datetime.timezone.utc\n```", "code": "s.dt.tz # datetime.timezone.utc"}
{"text": "Instance: pandas.Series.dt.freq\nOutput:\n```python\ns.dt.freq('D') # returns the frequency of the datetime values in the Series s at daily intervals\n```", "code": "s.dt.freq('D') # returns the frequency of the datetime values in the Series s at daily intervals"}
{"text": "Instance: pandas.Series.dt.unit\nOutput:\n```python\ns.dt.unit # returns the unit of the datetime in the Series, e.g. 'ns' for nanoseconds\n```", "code": "s.dt.unit # returns the unit of the datetime in the Series, e.g. 'ns' for nanoseconds"}
{"text": "Instance: pandas.Series.dt.normalize\nOutput:\n```python\nidx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()\n```", "code": "idx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()"}
{"text": "Instance: pandas.Series.dt.isocalendar\nOutput:\n```python\nser = pd.to_datetime(pd.Series([\"2010-01-01\", pd.NaT]))\nser.dt.isocalendar()\nser.dt.isocalendar().week\n```", "code": "ser = pd.to_datetime(pd.Series([\"2010-01-01\", pd.NaT]))\nser.dt.isocalendar()\nser.dt.isocalendar().week"}
{"text": "Instance: pandas.Series.dt.to_period\nOutput:\n```python\ndf.index.to_period(\"M\")\n```", "code": "df.index.to_period(\"M\")"}
{"text": "Instance: pandas.Series.dt.to_pydatetime\nOutput:\n```python\ns = pd.Series(pd.date_range('20180310', periods=2))\ns.dt.to_pydatetime()\n```", "code": "s = pd.Series(pd.date_range('20180310', periods=2))\ns.dt.to_pydatetime()"}
{"text": "Instance: pandas.Series.dt.tz_localize\nOutput:\n```python\ns.dt.tz_localize('CET', ambiguous='infer')\n```", "code": "s.dt.tz_localize('CET', ambiguous='infer')"}
{"text": "Instance: pandas.Series.dt.tz_convert\nOutput:\n```python\ndti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')\n```", "code": "dti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')"}
{"text": "Instance: pandas.Series.dt.normalize\nOutput:\n```python\nidx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()\n```", "code": "idx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()"}
{"text": "Instance: pandas.Series.dt.strftime\nOutput:\n```python\nrng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')\n```", "code": "rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')"}
{"text": "Instance: pandas.Series.dt.round\nOutput:\n```python\ns = pd.Series(pd.date_range('1/1/2022', periods=3, freq='D'))\ns.dt.round('W')\n```", "code": "s = pd.Series(pd.date_range('1/1/2022', periods=3, freq='D'))\ns.dt.round('W')"}
{"text": "Instance: pandas.Series.dt.floor\nOutput:\n```python\npd.Series(rng).dt.floor(\"h\")\n```", "code": "pd.Series(rng).dt.floor(\"h\")"}
{"text": "Instance: pandas.Series.dt.ceil\nOutput:\n```python\ns = pd.Series(pd.date_range('1/1/2022', periods=3, freq='D'))\ns.dt.ceil(\"D\")\n```", "code": "s = pd.Series(pd.date_range('1/1/2022', periods=3, freq='D'))\ns.dt.ceil(\"D\")"}
{"text": "Instance: pandas.Series.dt.month_name\nOutput:\n```python\ns = pd.Series(pd.date_range(start='2018-01', freq='ME', periods=3)\ns.dt.month_name()\n```", "code": "s = pd.Series(pd.date_range(start='2018-01', freq='ME', periods=3)\ns.dt.month_name()"}
{"text": "Instance: pandas.Series.dt.day_name\nOutput:\n```python\ns = pd.Series(pd.date_range(start='2018-01-01', freq='D', periods=3)\ns.dt.day_name()\n```", "code": "s = pd.Series(pd.date_range(start='2018-01-01', freq='D', periods=3)\ns.dt.day_name()"}
{"text": "Instance: pandas.Series.dt.asfreq\nOutput:\n```python\ns.dt.asfreq(freq='D', method='pad') # resample the time series to daily frequency using forward fill method\n```", "code": "s.dt.asfreq(freq='D', method='pad') # resample the time series to daily frequency using forward fill method"}
{"text": "Instance: pandas.Series.dt.qyear\nOutput:\n```python\ns = pd.Series(pd.date_range('2022-01-01', periods=3, freq='M'))\ns.dt.qyear # outputs the quarter year of the datetime values in the Series\n```", "code": "s = pd.Series(pd.date_range('2022-01-01', periods=3, freq='M'))\ns.dt.qyear # outputs the quarter year of the datetime values in the Series"}
{"text": "Instance: pandas.Series.dt.start_time\nOutput:\n```python\nperiod = pd.Period('2012-1-1', freq='D')\nperiod.start_time\n# Output: Timestamp('2012-01-01 00:00:00')\n```", "code": "period = pd.Period('2012-1-1', freq='D')\nperiod.start_time\n# Output: Timestamp('2012-01-01 00:00:00')"}
{"text": "Instance: pandas.Series.dt.end_time\nOutput:\n```python\ns.dt.end_time\n```", "code": "s.dt.end_time"}
{"text": "Instance: pandas.Series.dt.days\nOutput:\n```python\nser = pd.Series(pd.to_timedelta([1, 2, 3], unit='d'))\nser.dt.days\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int64\n```", "code": "ser = pd.Series(pd.to_timedelta([1, 2, 3], unit='d'))\nser.dt.days\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int64"}
{"text": "Instance: pandas.Series.dt.seconds\nOutput:\n```python\nser = pd.Series(pd.to_timedelta([1, 2, 3], unit='s'))\nser.dt.seconds\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int32\n```", "code": "ser = pd.Series(pd.to_timedelta([1, 2, 3], unit='s'))\nser.dt.seconds\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int32"}
{"text": "Instance: pandas.Series.dt.microseconds\nOutput:\n```python\nser = pd.Series(pd.to_timedelta([1, 2, 3], unit='us'))\nser.dt.microseconds\n```", "code": "ser = pd.Series(pd.to_timedelta([1, 2, 3], unit='us'))\nser.dt.microseconds"}
{"text": "Instance: pandas.Series.dt.nanoseconds\nOutput:\n```python\nser = pd.Series(pd.to_timedelta([1, 2, 3], unit='ns'))\nser.dt.nanoseconds\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int32\n```", "code": "ser = pd.Series(pd.to_timedelta([1, 2, 3], unit='ns'))\nser.dt.nanoseconds\n# Output:\n# 0    1\n# 1    2\n# 2    3\n# dtype: int32"}
{"text": "Instance: pandas.Series.dt.components\nOutput:\n```python\ns.dt.components\n```", "code": "s.dt.components"}
{"text": "Instance: pandas.Series.dt.unit\nOutput:\n```python\ns = pd.Series(pd.date_range('2022-01-01', periods=3, freq='D'))\ns.dt.unit # outputs 'D' for a Series s with datetime values\n```", "code": "s = pd.Series(pd.date_range('2022-01-01', periods=3, freq='D'))\ns.dt.unit # outputs 'D' for a Series s with datetime values"}
{"text": "Instance: pandas.Series.dt.to_pytimedelta\nOutput:\n```python\ns.dt.to_pytimedelta()\n```", "code": "s.dt.to_pytimedelta()"}
{"text": "Instance: pandas.Series.dt.total_seconds\nOutput:\n```python\ns.dt.total_seconds() # returns a Series with total seconds for each timedelta value in the Series\n```", "code": "s.dt.total_seconds() # returns a Series with total seconds for each timedelta value in the Series"}
{"text": "Instance: pandas.Series.dt.asfreq\nOutput:\n```python\ns = pd.Series(pd.date_range('2022-01-01', periods=3, freq='D'))\ns.dt.asfreq('M') # convert the dates to the end of the month\n```", "code": "s = pd.Series(pd.date_range('2022-01-01', periods=3, freq='D'))\ns.dt.asfreq('M') # convert the dates to the end of the month"}
{"text": "Instance: pandas.Series.str.capitalize\nOutput:\n```python\ns = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.capitalize()\n```", "code": "s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.capitalize()"}
{"text": "Instance: pandas.Series.str.casefold\nOutput:\n```python\ns = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.casefold()\n```", "code": "s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.casefold()"}
{"text": "Instance: pandas.Series.str.cat\nOutput:\n```python\ns.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n0    a,A\n1    b,B\n2    -,C\n3    d,D\ndtype: object\n```", "code": "s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n0    a,A\n1    b,B\n2    -,C\n3    d,D\ndtype: object"}
{"text": "Instance: pandas.Series.str.center\nOutput:\n```python\nser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.center(8, fillchar='.')\n```", "code": "ser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.center(8, fillchar='.')"}
{"text": "Instance: pandas.Series.str.contains\nOutput:\n```python\ns1.str.contains('og', regex=False)\n```", "code": "s1.str.contains('og', regex=False)"}
{"text": "Instance: pandas.Series.str.count\nOutput:\n```python\ns = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])\ns.str.count('a')\n# Output:\n# 0    0.0\n# 1    0.0\n# 2    2.0\n# 3    2.0\n# 4    NaN\n# 5    0.0\n# 6    1.0\n# dtype: float64\n```", "code": "s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])\ns.str.count('a')\n# Output:\n# 0    0.0\n# 1    0.0\n# 2    2.0\n# 3    2.0\n# 4    NaN\n# 5    0.0\n# 6    1.0\n# dtype: float64"}
{"text": "Instance: pandas.Series.str.decode\nOutput:\n```python\nser = pd.Series([b'cow', b'123', b'()'])\nser.str.decode('ascii')\n```", "code": "ser = pd.Series([b'cow', b'123', b'()'])\nser.str.decode('ascii')"}
{"text": "Instance: pandas.Series.str.encode\nOutput:\n```python\nser = pd.Series(['cow', '123', '()'])\nser.str.encode(encoding='ascii')\n```", "code": "ser = pd.Series(['cow', '123', '()'])\nser.str.encode(encoding='ascii')"}
{"text": "Instance: pandas.Series.str.endswith\nOutput:\n```python\ns.str.endswith('t')\n```", "code": "s.str.endswith('t')"}
{"text": "Instance: pandas.Series.str.extract\nOutput:\n```python\ns = pd.Series(['a1', 'b2', 'c3'])\nresult = s.str.extract(r'([ab])(\\d)')\nprint(result)\n```", "code": "s = pd.Series(['a1', 'b2', 'c3'])\nresult = s.str.extract(r'([ab])(\\d)')\nprint(result)"}
{"text": "Instance: pandas.Series.str.extractall\nOutput:\n```python\nresult = s.str.extractall(r\"(?P<letter>[ab])?(?P<digit>\\d)\")\n```", "code": "result = s.str.extractall(r\"(?P<letter>[ab])?(?P<digit>\\d)\")"}
{"text": "Instance: pandas.Series.str.find\nOutput:\n```python\nser = pd.Series([\"cow_\", \"duck_\", \"do_ve\"])\nser.str.find(\"_\")\n# Output:\n# 0    3\n# 1    4\n# 2    2\n# dtype: int64\n```", "code": "ser = pd.Series([\"cow_\", \"duck_\", \"do_ve\"])\nser.str.find(\"_\")\n# Output:\n# 0    3\n# 1    4\n# 2    2\n# dtype: int64"}
{"text": "Instance: pandas.Series.str.findall\nOutput:\n```python\ns.str.findall('Monkey')\n```", "code": "s.str.findall('Monkey')"}
{"text": "Instance: pandas.Series.str.fullmatch\nOutput:\n```python\nser = pd.Series([\"cat\", \"duck\", \"dove\"])\nser.str.fullmatch(r'd.+')\n```", "code": "ser = pd.Series([\"cat\", \"duck\", \"dove\"])\nser.str.fullmatch(r'd.+')"}
{"text": "Instance: pandas.Series.str.get\nOutput:\n```python\ns = pd.Series([\"String\", (1, 2, 3), [\"a\", \"b\", \"c\"], 123, -456, {1: \"Hello\", \"2\": \"World\"}])\ns.str.get(1) # returns the character at index 1 for each element in the Series\n```", "code": "s = pd.Series([\"String\", (1, 2, 3), [\"a\", \"b\", \"c\"], 123, -456, {1: \"Hello\", \"2\": \"World\"}])\ns.str.get(1) # returns the character at index 1 for each element in the Series"}
{"text": "Instance: pandas.Series.str.index\nOutput:\n```python\nser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\nser.str.index(\"e\")\n# Output:\n# 0   4\n# 1   0\n# 2   4\n# dtype: int64\n```", "code": "ser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\nser.str.index(\"e\")\n# Output:\n# 0   4\n# 1   0\n# 2   4\n# dtype: int64"}
{"text": "Instance: pandas.Series.str.join\nOutput:\n```python\ns.str.join('-') # joins the elements of each list in the Series with a hyphen\n```", "code": "s.str.join('-') # joins the elements of each list in the Series with a hyphen"}
{"text": "Instance: pandas.Series.str.len\nOutput:\n```python\ns = pd.Series(['dog', '', 5, {'foo' : 'bar'}, [2, 3, 5, 7], ('one', 'two', 'three')])\ns.str.len() # outputs the length of each element in the Series\n```", "code": "s = pd.Series(['dog', '', 5, {'foo' : 'bar'}, [2, 3, 5, 7], ('one', 'two', 'three')])\ns.str.len() # outputs the length of each element in the Series"}
{"text": "Instance: pandas.Series.str.ljust\nOutput:\n```python\nser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.ljust(8, fillchar='.')\n```", "code": "ser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.ljust(8, fillchar='.')"}
{"text": "Instance: pandas.Series.str.lower\nOutput:\n```python\ns = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.lower()\n```", "code": "s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.lower()"}
{"text": "Instance: pandas.Series.str.lstrip\nOutput:\n```python\ns = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.lstrip('123.')\n```", "code": "s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.lstrip('123.')"}
{"text": "Instance: pandas.Series.str.match\nOutput:\n```python\nser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\nser.str.match(\"e\") # outputs boolean Series, e.g. 0   False, 1   True, 2   False, dtype: bool\n```", "code": "ser = pd.Series([\"horse\", \"eagle\", \"donkey\"])\nser.str.match(\"e\") # outputs boolean Series, e.g. 0   False, 1   True, 2   False, dtype: bool"}
{"text": "Instance: pandas.Series.str.normalize\nOutput:\n```python\nser = pd.Series(['\u00c3\u00b1'])\nser.str.normalize('NFC') == ser.str.normalize('NFD') # outputs a boolean Series\n```", "code": "ser = pd.Series(['\u00c3\u00b1'])\nser.str.normalize('NFC') == ser.str.normalize('NFD') # outputs a boolean Series"}
{"text": "Instance: pandas.Series.str.pad\nOutput:\n```python\ns = pd.Series([\"caribou\", \"tiger\"])\ns.str.pad(width=10)\ns.str.pad(width=10, side='right', fillchar='-')\ns.str.pad(width=10, side='both', fillchar='-')\n```", "code": "s = pd.Series([\"caribou\", \"tiger\"])\ns.str.pad(width=10)\ns.str.pad(width=10, side='right', fillchar='-')\ns.str.pad(width=10, side='both', fillchar='-')"}
{"text": "Instance: pandas.Series.str.partition\nOutput:\n```python\ns = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\ns.str.partition()\ns.str.rpartition()\ns.str.partition('-')\ns.str.partition('-', expand=False)\n\nidx = pd.Index(['X 123', 'Y 999'])\nidx.str.partition()\nidx.str.partition(expand=False)\n```", "code": "s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\ns.str.partition()\ns.str.rpartition()\ns.str.partition('-')\ns.str.partition('-', expand=False)\n\nidx = pd.Index(['X 123', 'Y 999'])\nidx.str.partition()\nidx.str.partition(expand=False)"}
{"text": "Instance: pandas.Series.str.removeprefix\nOutput:\n```python\ns = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\ns.str.removeprefix(\"str_\")\n# Output:\n# 0    foo\n# 1    bar\n# 2    no_prefix\n# dtype: object\n```", "code": "s = pd.Series([\"str_foo\", \"str_bar\", \"no_prefix\"])\ns.str.removeprefix(\"str_\")\n# Output:\n# 0    foo\n# 1    bar\n# 2    no_prefix\n# dtype: object"}
{"text": "Instance: pandas.Series.str.removesuffix\nOutput:\n```python\ns = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\ns.str.removesuffix(\"_str\")\n# Output:\n# 0    foo\n# 1    bar\n# 2    no_suffix\n# dtype: object\n```", "code": "s = pd.Series([\"foo_str\", \"bar_str\", \"no_suffix\"])\ns.str.removesuffix(\"_str\")\n# Output:\n# 0    foo\n# 1    bar\n# 2    no_suffix\n# dtype: object"}
{"text": "Instance: pandas.Series.str.repeat\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns.str.repeat(repeats=2) # repeats each element in the Series twice\n```", "code": "s = pd.Series(['a', 'b', 'c'])\ns.str.repeat(repeats=2) # repeats each element in the Series twice"}
{"text": "Instance: pandas.Series.str.replace\nOutput:\n```python\nresult = pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)\n```", "code": "result = pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)"}
{"text": "Instance: pandas.Series.str.rfind\nOutput:\n```python\nser = pd.Series([\"_cow_\", \"duck_\", \"do_v_e\"])\nser.str.rfind(\"_\")\n```", "code": "ser = pd.Series([\"_cow_\", \"duck_\", \"do_v_e\"])\nser.str.rfind(\"_\")"}
{"text": "Instance: pandas.Series.str.rindex\nOutput:\n```python\nser = pd.Series([\"Deer\", \"eagle\", \"Sheep\"])\nser.str.rindex(\"e\")\n# 0    2\n# 1    4\n# 2    3\n# dtype: int64\n```", "code": "ser = pd.Series([\"Deer\", \"eagle\", \"Sheep\"])\nser.str.rindex(\"e\")\n# 0    2\n# 1    4\n# 2    3\n# dtype: int64"}
{"text": "Instance: pandas.Series.str.rjust\nOutput:\n```python\nser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.rjust(8, fillchar='.')\n# Output:\n# 0   .....dog\n# 1   ....bird\n# 2   ...mouse\n# dtype: object\n```", "code": "ser = pd.Series(['dog', 'bird', 'mouse'])\nser.str.rjust(8, fillchar='.')\n# Output:\n# 0   .....dog\n# 1   ....bird\n# 2   ...mouse\n# dtype: object"}
{"text": "Instance: pandas.Series.str.rpartition\nOutput:\n```python\ns = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\ns.str.rpartition()\n# Output:\n#                0  1            2\n# 0  Linda van der            Berg\n# 1         George     Pitt-Rivers\n```", "code": "s = pd.Series(['Linda van der Berg', 'George Pitt-Rivers'])\ns.str.rpartition()\n# Output:\n#                0  1            2\n# 0  Linda van der            Berg\n# 1         George     Pitt-Rivers"}
{"text": "Instance: pandas.Series.str.rstrip\nOutput:\n```python\ns = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.rstrip('.!? \\n\\t')\n```", "code": "s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.rstrip('.!? \\n\\t')"}
{"text": "Instance: pandas.Series.str.slice\nOutput:\n```python\ns = pd.Series([\"koala\", \"dog\", \"chameleon\"])\ns.str.slice(start=1)\n```", "code": "s = pd.Series([\"koala\", \"dog\", \"chameleon\"])\ns.str.slice(start=1)"}
{"text": "Instance: pandas.Series.str.slice_replace\nOutput:\n```python\ns.str.slice_replace(1, repl='X')\n```", "code": "s.str.slice_replace(1, repl='X')"}
{"text": "Instance: pandas.Series.str.split\nOutput:\n```python\ns = pd.Series([\"this is a regular sentence\", \"https://docs.python.org/3/tutorial/index.html\", np.nan])\ns.str.split()\n```", "code": "s = pd.Series([\"this is a regular sentence\", \"https://docs.python.org/3/tutorial/index.html\", np.nan])\ns.str.split()"}
{"text": "Instance: pandas.Series.str.rsplit\nOutput:\n```python\ns.str.rsplit(n=2)\n```", "code": "s.str.rsplit(n=2)"}
{"text": "Instance: pandas.Series.str.startswith\nOutput:\n```python\ns.str.startswith('b', na=False) # returns a boolean Series indicating if each element starts with 'b', with NaN values replaced by False\n```", "code": "s.str.startswith('b', na=False) # returns a boolean Series indicating if each element starts with 'b', with NaN values replaced by False"}
{"text": "Instance: pandas.Series.str.strip\nOutput:\n```python\ns = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.strip()\n```", "code": "s = pd.Series(['1. Ant.  ', '2. Bee!\\n', '3. Cat?\\t', np.nan, 10, True])\ns.str.strip()"}
{"text": "Instance: pandas.Series.str.swapcase\nOutput:\n```python\ns = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.swapcase()\n```", "code": "s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.swapcase()"}
{"text": "Instance: pandas.Series.str.title\nOutput:\n```python\ns.str.title() # capitalizes the first letter of each word in the Series\n```", "code": "s.str.title() # capitalizes the first letter of each word in the Series"}
{"text": "Instance: pandas.Series.str.translate\nOutput:\n```python\nmytable = str.maketrans({'\u00c3\u00b1': 'n', '\u00c3\u00a7': 'c'})\nser.str.translate(mytable)\n```", "code": "mytable = str.maketrans({'\u00c3\u00b1': 'n', '\u00c3\u00a7': 'c'})\nser.str.translate(mytable)"}
{"text": "Instance: pandas.Series.str.upper\nOutput:\n```python\ns = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.upper()\n```", "code": "s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])\ns.str.upper()"}
{"text": "Instance: pandas.Series.str.wrap\nOutput:\n```python\ns = pd.Series(['line to be wrapped', 'another line to be wrapped'])\ns.str.wrap(12)\n```", "code": "s = pd.Series(['line to be wrapped', 'another line to be wrapped'])\ns.str.wrap(12)"}
{"text": "Instance: pandas.Series.str.zfill\nOutput:\n```python\ns = pd.Series(['-1', '1', '1000', 10, np.nan])\ns.str.zfill(3)\n```", "code": "s = pd.Series(['-1', '1', '1000', 10, np.nan])\ns.str.zfill(3)"}
{"text": "Instance: pandas.Series.str.isalnum\nOutput:\n```python\ns = pd.Series(['one', 'one1', '1', ''])\ns.str.isalnum()\n```", "code": "s = pd.Series(['one', 'one1', '1', ''])\ns.str.isalnum()"}
{"text": "Instance: pandas.Series.str.isalpha\nOutput:\n```python\ns = pd.Series(['one', 'one1', '1', ''])\ns.str.isalpha()\n```", "code": "s = pd.Series(['one', 'one1', '1', ''])\ns.str.isalpha()"}
{"text": "Instance: pandas.Series.str.isdigit\nOutput:\n```python\ns = pd.Series(['123', '456', 'abc', '789'])\ns.str.isdigit()\n```", "code": "s = pd.Series(['123', '456', 'abc', '789'])\ns.str.isdigit()"}
{"text": "Instance: pandas.Series.str.isspace\nOutput:\n```python\ns = pd.Series([' ', '\\t\\r\\n ', ''])\ns.str.isspace()\n```", "code": "s = pd.Series([' ', '\\t\\r\\n ', ''])\ns.str.isspace()"}
{"text": "Instance: pandas.Series.str.islower\nOutput:\n```python\ns = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\ns.str.islower()\n```", "code": "s = pd.Series(['leopard', 'Golden Eagle', 'SNAKE', ''])\ns.str.islower()"}
{"text": "Instance: pandas.Series.str.isupper\nOutput:\n```python\ns = pd.Series(['HELLO', 'WORLD', '123', ''])\ns.str.isupper()\n```", "code": "s = pd.Series(['HELLO', 'WORLD', '123', ''])\ns.str.isupper()"}
{"text": "Instance: pandas.Series.str.istitle\nOutput:\n```python\ns = pd.Series(['Hello World', 'Good Morning', 'how are you', ''])\n\ns.str.istitle()\n```", "code": "s = pd.Series(['Hello World', 'Good Morning', 'how are you', ''])\n\ns.str.istitle()"}
{"text": "Instance: pandas.Series.str.isnumeric\nOutput:\n```python\ns = pd.Series(['one', 'one1', '1', ''])\ns.str.isnumeric()\n# Output:\n# 0    False\n# 1    False\n# 2     True\n# 3    False\n# dtype: bool\n```", "code": "s = pd.Series(['one', 'one1', '1', ''])\ns.str.isnumeric()\n# Output:\n# 0    False\n# 1    False\n# 2     True\n# 3    False\n# dtype: bool"}
{"text": "Instance: pandas.Series.str.isdecimal\nOutput:\n```python\ns = pd.Series(['23', '\u00c2\u00b3', '\u00e2\u0085\u0095', ''])\ns.str.isdecimal()\n```", "code": "s = pd.Series(['23', '\u00c2\u00b3', '\u00e2\u0085\u0095', ''])\ns.str.isdecimal()"}
{"text": "Instance: pandas.Series.str.get_dummies\nOutput:\n```python\npd.Series(['a|b', 'a', 'a|c']).str.get_dummies()\n```", "code": "pd.Series(['a|b', 'a', 'a|c']).str.get_dummies()"}
{"text": "Instance: pandas.Series.cat.categories\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.categories\n# Output: Index(['a', 'b', 'c'], dtype='object')\n```", "code": "ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.categories\n# Output: Index(['a', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Series.cat.ordered\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.ordered # False\n```", "code": "ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.ordered # False"}
{"text": "Instance: pandas.Series.cat.codes\nOutput:\n```python\nser = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], categories=[\"a\", \"b\"]))\nser.cat.codes # outputs Series with codes for each category, e.g. 0, 1, -1, 0\n```", "code": "ser = pd.Series(pd.Categorical([\"a\", \"b\", \"c\", \"a\"], categories=[\"a\", \"b\"]))\nser.cat.codes # outputs Series with codes for each category, e.g. 0, 1, -1, 0"}
{"text": "Instance: pandas.Series.cat.rename_categories\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns = s.astype('category')\ns = s.cat.rename_categories({'a': 'A', 'b': 'B', 'c': 'C'})\ns\n```\n", "code": "s = pd.Series(['a', 'b', 'c'])\ns = s.astype('category')\ns = s.cat.rename_categories({'a': 'A', 'b': 'B', 'c': 'C'})\ns"}
{"text": "Instance: pandas.Series.cat.reorder_categories\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser = ser.cat.reorder_categories(['c', 'b', 'a'], ordered=True)\nser\n```", "code": "ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser = ser.cat.reorder_categories(['c', 'b', 'a'], ordered=True)\nser"}
{"text": "Instance: pandas.Series.cat.add_categories\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns = s.astype('category')\ns.cat.add_categories(['d', 'e'], inplace=True)\n```", "code": "s = pd.Series(['a', 'b', 'c'])\ns = s.astype('category')\ns.cat.add_categories(['d', 'e'], inplace=True)"}
{"text": "Instance: pandas.Series.cat.remove_categories\nOutput:\n```python\nc = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc.remove_categories(['d', 'a'])\n```\n", "code": "c = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc.remove_categories(['d', 'a'])"}
{"text": "Instance: pandas.Series.cat.remove_unused_categories\nOutput:\n```python\nc = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc[2] = 'a'\nc[4] = 'c'\nc.remove_unused_categories()\n```", "code": "c = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc[2] = 'a'\nc[4] = 'c'\nc.remove_unused_categories()"}
{"text": "Instance: pandas.Series.cat.set_categories\nOutput:\n```python\nser.cat.set_categories(['A', 'B', 'C'], rename=True)\n```", "code": "ser.cat.set_categories(['A', 'B', 'C'], rename=True)"}
{"text": "Instance: pandas.Series.cat.as_ordered\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.ordered # False\nser = ser.cat.as_ordered()\nser.cat.ordered # True\n```", "code": "ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.ordered # False\nser = ser.cat.as_ordered()\nser.cat.ordered # True"}
{"text": "Instance: pandas.Series.cat.as_unordered\nOutput:\n```python\nser = pd.Series(pd.Categorical(['a', 'b', 'c', 'a'], ordered=True))\nser.cat.ordered # True\nser = ser.cat.as_unordered()\nser.cat.ordered # False\n```", "code": "ser = pd.Series(pd.Categorical(['a', 'b', 'c', 'a'], ordered=True))\nser.cat.ordered # True\nser = ser.cat.as_unordered()\nser.cat.ordered # False"}
{"text": "Instance: pandas.Series.sparse.npoints\nOutput:\n```python\ns.npoints # 3\n```", "code": "s.npoints # 3"}
{"text": "Instance: pandas.Series.sparse.density\nOutput:\n```python\ns.density # outputs 0.6 for a SparseArray s with values [0, 0, 1, 1, 1]\n```", "code": "s.density # outputs 0.6 for a SparseArray s with values [0, 0, 1, 1, 1]"}
{"text": "Instance: pandas.Series.sparse.fill_value\nOutput:\n```python\nser = pd.Series([0, 0, 2, 2, 2], dtype=\"Sparse[int]\")\nser.sparse.fill_value # outputs 0\n\nspa_dtype = pd.SparseDtype(dtype=np.int32, fill_value=2)\nser = pd.Series([0, 0, 2, 2, 2], dtype=spa_dtype)\nser.sparse.fill_value # outputs 2\n```", "code": "ser = pd.Series([0, 0, 2, 2, 2], dtype=\"Sparse[int]\")\nser.sparse.fill_value # outputs 0\n\nspa_dtype = pd.SparseDtype(dtype=np.int32, fill_value=2)\nser = pd.Series([0, 0, 2, 2, 2], dtype=spa_dtype)\nser.sparse.fill_value # outputs 2"}
{"text": "Instance: pandas.Series.sparse.sp_values\nOutput:\n```python\ns.sp_values # array([1, 2])\n```", "code": "s.sp_values # array([1, 2])"}
{"text": "Instance: pandas.Series.sparse.from_coo\nOutput:\n```python\nss = pd.Series.sparse.from_coo(A)\n```", "code": "ss = pd.Series.sparse.from_coo(A)"}
{"text": "Instance: pandas.Series.sparse.to_coo\nOutput:\n```python\nA, rows, columns = ss.sparse.to_coo(\n    row_levels=[\"Country\", \"City\"], column_levels=[\"Population\", \"Area\"], sort_labels=True\n)\n```", "code": "A, rows, columns = ss.sparse.to_coo(\n    row_levels=[\"Country\", \"City\"], column_levels=[\"Population\", \"Area\"], sort_labels=True\n)"}
{"text": "Instance: pandas.Series.list.flatten\nOutput:\n```python\ns.list.flatten()\n```", "code": "s.list.flatten()"}
{"text": "Instance: pandas.Series.list.len\nOutput:\n```python\ns = pd.Series(\n    [\n        [1, 2, 3],\n        [3],\n    ],\n    dtype=pd.ArrowDtype(pa.list_(\n        pa.int64()\n    ))\n)\ns.list.len()\n```", "code": "s = pd.Series(\n    [\n        [1, 2, 3],\n        [3],\n    ],\n    dtype=pd.ArrowDtype(pa.list_(\n        pa.int64()\n    ))\n)\ns.list.len()"}
{"text": "Instance: pandas.Series.list.__getitem__\nOutput:\n```python\ns.list[0] # returns the first element of the list stored in the Series\n```", "code": "s.list[0] # returns the first element of the list stored in the Series"}
{"text": "Instance: pandas.Series.struct.dtypes\nOutput:\n```python\ns.struct.dtypes\n# version     int64[pyarrow]\n# project    string[pyarrow]\n# dtype: object\n```", "code": "s.struct.dtypes\n# version     int64[pyarrow]\n# project    string[pyarrow]\n# dtype: object"}
{"text": "Instance: pandas.Series.struct.field\nOutput:\n```python\ns.struct.field(\"project\") # Extracts the 'project' field from the struct Series\n```", "code": "s.struct.field(\"project\") # Extracts the 'project' field from the struct Series"}
{"text": "Instance: pandas.Series.struct.explode\nOutput:\n```python\ns.struct.explode()\n```", "code": "s.struct.explode()"}
{"text": "Instance: pandas.Flags\nOutput:\n```python\ndf = pd.DataFrame()\ndf.flags\ndf.flags.allows_duplicate_labels = False\ndf.flags['allows_duplicate_labels'] = True\n```", "code": "df = pd.DataFrame()\ndf.flags\ndf.flags.allows_duplicate_labels = False\ndf.flags['allows_duplicate_labels'] = True"}
{"text": "Instance: pandas.Series.attrs\nOutput:\n```python\nser = pd.Series([1, 2, 3])\nser.attrs = {\"A\": [10, 20, 30]}\nser.attrs # {'A': [10, 20, 30]}\n```", "code": "ser = pd.Series([1, 2, 3])\nser.attrs = {\"A\": [10, 20, 30]}\nser.attrs # {'A': [10, 20, 30]}"}
{"text": "Instance: pandas.Series.plot\nOutput:\n```python\nser = pd.Series([1, 2, 3, 3])\nplot = ser.plot(kind='hist', title=\"My plot\")\n```", "code": "ser = pd.Series([1, 2, 3, 3])\nplot = ser.plot(kind='hist', title=\"My plot\")"}
{"text": "Instance: pandas.Series.plot.area\nOutput:\n```python\ndf = pd.DataFrame({\n    'revenue': [1000, 2000, 1500, 3000, 2500],\n    'expenses': [800, 1500, 1200, 2000, 1800],\n    'profit': [200, 500, 300, 1000, 700],\n}, index=pd.date_range(start='2022/01/01', periods=5))\nax = df.plot.area()\n```", "code": "df = pd.DataFrame({\n    'revenue': [1000, 2000, 1500, 3000, 2500],\n    'expenses': [800, 1500, 1200, 2000, 1800],\n    'profit': [200, 500, 300, 1000, 700],\n}, index=pd.date_range(start='2022/01/01', periods=5))\nax = df.plot.area()"}
{"text": "Instance: pandas.Series.plot.bar\nOutput:\n```python\nax = df.plot.bar(x='category', y='value', rot=0)\n```", "code": "ax = df.plot.bar(x='category', y='value', rot=0)"}
{"text": "Instance: pandas.Series.plot.barh\nOutput:\n```python\nax = df.plot.barh(x='lab', y='val')\n```", "code": "ax = df.plot.barh(x='lab', y='val')"}
{"text": "Instance: pandas.Series.plot.box\nOutput:\n```python\nax = df.plot.box(column=\"age\", by=\"gender\", figsize=(10, 8))\n```", "code": "ax = df.plot.box(column=\"age\", by=\"gender\", figsize=(10, 8))"}
{"text": "Instance: pandas.Series.plot.density\nOutput:\n```python\ns = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\nax = s.plot.kde()\n```", "code": "s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\nax = s.plot.kde()"}
{"text": "Instance: pandas.Series.plot.hist\nOutput:\n```python\nax = df.plot.hist(bins=12, alpha=0.5)\n```", "code": "ax = df.plot.hist(bins=12, alpha=0.5)"}
{"text": "Instance: pandas.Series.plot.kde\nOutput:\n```python\nax = s.plot.kde()\n```", "code": "ax = s.plot.kde()"}
{"text": "Instance: pandas.Series.plot.line\nOutput:\n```python\ns = pd.Series([1, 3, 2])\ns.plot.line()\n```", "code": "s = pd.Series([1, 3, 2])\ns.plot.line()"}
{"text": "Instance: pandas.Series.plot.pie\nOutput:\n```python\nplot = df.plot.pie(y='mass', figsize=(5, 5))\n```", "code": "plot = df.plot.pie(y='mass', figsize=(5, 5))"}
{"text": "Instance: pandas.Series.hist\nOutput:\n```python\nhist = ser.hist()\n```", "code": "hist = ser.hist()"}
{"text": "Instance: pandas.Series.to_pickle\nOutput:\n```python\noriginal_series = pd.Series({\"apples\": 10, \"oranges\": 20, \"bananas\": 15})\noriginal_series.to_pickle(\"./fruits.pkl\")\n\nunpickled_series = pd.read_pickle(\"./fruits.pkl\")\nprint(unpickled_series)\n```", "code": "original_series = pd.Series({\"apples\": 10, \"oranges\": 20, \"bananas\": 15})\noriginal_series.to_pickle(\"./fruits.pkl\")\n\nunpickled_series = pd.read_pickle(\"./fruits.pkl\")\nprint(unpickled_series)"}
{"text": "Instance: pandas.Series.to_csv\nOutput:\n```python\ns = pd.Series([10, 20, 30, 40], name='random_numbers')\ns.to_csv('random_numbers.csv', index=False)\n```", "code": "s = pd.Series([10, 20, 30, 40], name='random_numbers')\ns.to_csv('random_numbers.csv', index=False)"}
{"text": "Instance: pandas.Series.to_dict\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.to_dict()\n# Output: {0: 1, 1: 2, 2: 3, 3: 4}\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.to_dict()\n# Output: {0: 1, 1: 2, 2: 3, 3: 4}"}
{"text": "Instance: pandas.Series.to_excel\nOutput:\n```python\ns = pd.Series([10, 20, 30, 40], name='Random_Numbers')\ns.to_excel(\"output.xlsx\")\n```", "code": "s = pd.Series([10, 20, 30, 40], name='Random_Numbers')\ns.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.Series.to_frame\nOutput:\n```python\ns = pd.Series([\"a\", \"b\", \"c\"], name=\"letters\")\ns.to_frame()\n```", "code": "s = pd.Series([\"a\", \"b\", \"c\"], name=\"letters\")\ns.to_frame()"}
{"text": "Instance: pandas.Series.to_xarray\nOutput:\n```python\nseries.to_xarray() # converts a pandas Series to xarray DataArray\n```", "code": "series.to_xarray() # converts a pandas Series to xarray DataArray"}
{"text": "Instance: pandas.Series.to_hdf\nOutput:\n```python\ns = pd.Series([10, 20, 30, 40], name='Temperature')\ns.to_hdf('weather_data.h5', key='temperature_data')\n```", "code": "s = pd.Series([10, 20, 30, 40], name='Temperature')\ns.to_hdf('weather_data.h5', key='temperature_data')"}
{"text": "Instance: pandas.Series.to_sql\nOutput:\n```python\ndf.to_sql(name='users', con=engine, if_exists='replace', index_label='id')\n```", "code": "df.to_sql(name='users', con=engine, if_exists='replace', index_label='id')"}
{"text": "Instance: pandas.Series.to_json\nOutput:\n```python\nresult = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)\n```", "code": "result = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)"}
{"text": "Instance: pandas.Series.to_string\nOutput:\n```python\nser = pd.Series([1, 2, 3]).to_string()\nser # '0    1\\n1    2\\n2    3'\n```", "code": "ser = pd.Series([1, 2, 3]).to_string()\nser # '0    1\\n1    2\\n2    3'"}
{"text": "Instance: pandas.Series.to_clipboard\nOutput:\n```python\ndf = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['Height', 'Weight', 'Age'])\ndf.to_clipboard(sep=',')  \n# Wrote the following to the system clipboard:\n# ,Height,Weight,Age\n# 0,1,2,3\n# 1,4,5,6\n```", "code": "df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['Height', 'Weight', 'Age'])\ndf.to_clipboard(sep=',')  \n# Wrote the following to the system clipboard:\n# ,Height,Weight,Age\n# 0,1,2,3\n# 1,4,5,6"}
{"text": "Instance: pandas.Series.to_latex\nOutput:\n```python\nprint(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))\n```", "code": "print(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))"}
{"text": "Instance: pandas.Series.to_markdown\nOutput:\n```python\nprint(s.to_markdown())\n```", "code": "print(s.to_markdown())"}
{"text": "Instance: pandas.api.interchange.from_dataframe\nOutput:\n```python\ndf_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0    60\n# 1    70\n```", "code": "df_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0    60\n# 1    70"}
{"text": "Instance: pandas.Series\nOutput:\n```python\nd = {'a': 1, 'b': 2, 'c': 3}\nser = pd.Series(data=d, index=['a', 'b', 'c'])\nser\n```\n```python\nd = {'a': 1, 'b': 2, 'c': 3}\nser = pd.Series(data=d, index=['x', 'y', 'z'])\nser\n```\n```python\nr = [1, 2]\nser = pd.Series(r, copy=False)\nser.iloc[0] = 999\nser\n```\n```python\nr = np.array([1, 2])\nser = pd.Series(r, copy=False)\nser.iloc[0] = 999\nser\n```", "code": "d = {'a': 1, 'b': 2, 'c': 3}\nser = pd.Series(data=d, index=['a', 'b', 'c'])\nser\nd = {'a': 1, 'b': 2, 'c': 3}\nser = pd.Series(data=d, index=['x', 'y', 'z'])\nser\nr = [1, 2]\nser = pd.Series(r, copy=False)\nser.iloc[0] = 999\nser\nr = np.array([1, 2])\nser = pd.Series(r, copy=False)\nser.iloc[0] = 999\nser"}
{"text": "Instance: pandas.DataFrame\nOutput:\n```python\ndata = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)\n```", "code": "data = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)"}
{"text": "Instance: pandas.DataFrame.index\nOutput:\n```python\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n                   'Age': [25, 30, 35],\n                   'Location': ['Seattle', 'New York', 'Kona']},\n                  index=([10, 20, 30]))\ndf.index\n# Output: Index([10, 20, 30], dtype='int64')\n\ndf.index = [100, 200, 300]\ndf\n# Output:\n#     Name  Age Location\n# 100  Alice   25  Seattle\n# 200    Bob   30 New York\n# 300  Aritra  35    Kona\n```", "code": "df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Aritra'],\n                   'Age': [25, 30, 35],\n                   'Location': ['Seattle', 'New York', 'Kona']},\n                  index=([10, 20, 30]))\ndf.index\n# Output: Index([10, 20, 30], dtype='int64')\n\ndf.index = [100, 200, 300]\ndf\n# Output:\n#     Name  Age Location\n# 100  Alice   25  Seattle\n# 200    Bob   30 New York\n# 300  Aritra  35    Kona"}
{"text": "Instance: pandas.DataFrame.columns\nOutput:\n```python\ndf.columns # Index(['Temperature', 'Humidity', 'Pressure'], dtype='object')\n```", "code": "df.columns # Index(['Temperature', 'Humidity', 'Pressure'], dtype='object')"}
{"text": "Instance: pandas.DataFrame.dtypes\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25.0],\n                   'humidity': [50],\n                   'timestamp': [pd.Timestamp('2022-01-01')],\n                   'location': ['New York']})\ndf.dtypes\n```", "code": "df = pd.DataFrame({'temperature': [25.0],\n                   'humidity': [50],\n                   'timestamp': [pd.Timestamp('2022-01-01')],\n                   'location': ['New York']})\ndf.dtypes"}
{"text": "Instance: pandas.DataFrame.info\nOutput:\n```python\ndf.info(verbose=True)\n```", "code": "df.info(verbose=True)"}
{"text": "Instance: pandas.DataFrame.select_dtypes\nOutput:\n```python\ndf.select_dtypes(include='bool')\ndf.select_dtypes(include=['float64'])\ndf.select_dtypes(exclude=['int64'])\n```", "code": "df.select_dtypes(include='bool')\ndf.select_dtypes(include=['float64'])\ndf.select_dtypes(exclude=['int64'])"}
{"text": "Instance: pandas.DataFrame.values\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 22],\n                   'humidity': [60, 70, 55],\n                   'wind_speed': [10, 15, 8]})\ndf.values\n```\n", "code": "df = pd.DataFrame({'temperature': [25, 30, 22],\n                   'humidity': [60, 70, 55],\n                   'wind_speed': [10, 15, 8]})\ndf.values"}
{"text": "Instance: pandas.DataFrame.axes\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 35], 'humidity': [50, 60, 70]})\ndf.axes # outputs [RangeIndex(start=0, stop=3, step=1), Index(['temperature', 'humidity'], dtype='object')]\n```", "code": "df = pd.DataFrame({'temperature': [25, 30, 35], 'humidity': [50, 60, 70]})\ndf.axes # outputs [RangeIndex(start=0, stop=3, step=1), Index(['temperature', 'humidity'], dtype='object')]"}
{"text": "Instance: pandas.DataFrame.ndim\nOutput:\n```python\ndf.ndim # outputs the number of dimensions of the DataFrame, e.g. 2\n```", "code": "df.ndim # outputs the number of dimensions of the DataFrame, e.g. 2"}
{"text": "Instance: pandas.DataFrame.size\nOutput:\n```python\ndf.size # outputs the number of elements in the DataFrame, e.g. 4\n```", "code": "df.size # outputs the number of elements in the DataFrame, e.g. 4"}
{"text": "Instance: pandas.DataFrame.shape\nOutput:\n```python\ndf = pd.DataFrame({'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.shape # outputs tuple, e.g. (3, 2)\n```", "code": "df = pd.DataFrame({'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.shape # outputs tuple, e.g. (3, 2)"}
{"text": "Instance: pandas.DataFrame.memory_usage\nOutput:\n```python\ndf.memory_usage()\n```", "code": "df.memory_usage()"}
{"text": "Instance: pandas.DataFrame.empty\nOutput:\n```python\ndf_empty = pd.DataFrame({'Science' : []})\ndf_empty.empty # True\n```", "code": "df_empty = pd.DataFrame({'Science' : []})\ndf_empty.empty # True"}
{"text": "Instance: pandas.DataFrame.set_flags\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": [25, 30], \"Humidity\": [60, 70]})\ndf.flags.allows_duplicate_labels # True\ndf2 = df.set_flags(allows_duplicate_labels=False)\ndf2.flags.allows_duplicate_labels # False\n```", "code": "df = pd.DataFrame({\"Temperature\": [25, 30], \"Humidity\": [60, 70]})\ndf.flags.allows_duplicate_labels # True\ndf2 = df.set_flags(allows_duplicate_labels=False)\ndf2.flags.allows_duplicate_labels # False"}
{"text": "Instance: pandas.DataFrame.astype\nOutput:\n```python\ndf.astype('float64').dtypes\n```", "code": "df.astype('float64').dtypes"}
{"text": "Instance: pandas.DataFrame.convert_dtypes\nOutput:\n```python\ndf = pd.DataFrame(\n    {\n        \"name\": pd.Series([\"Alice\", \"Bob\", \"Charlie\"], dtype=np.dtype(\"O\")),\n        \"age\": pd.Series([25, 30, np.nan], dtype=np.dtype(\"float\")),\n        \"city\": pd.Series([\"New York\", \"Los Angeles\", np.nan], dtype=np.dtype(\"O\")),\n    }\n)\n\ndfn = df.convert_dtypes()\ndfn\n```\n", "code": "df = pd.DataFrame(\n    {\n        \"name\": pd.Series([\"Alice\", \"Bob\", \"Charlie\"], dtype=np.dtype(\"O\")),\n        \"age\": pd.Series([25, 30, np.nan], dtype=np.dtype(\"float\")),\n        \"city\": pd.Series([\"New York\", \"Los Angeles\", np.nan], dtype=np.dtype(\"O\")),\n    }\n)\n\ndfn = df.convert_dtypes()\ndfn"}
{"text": "Instance: pandas.DataFrame.infer_objects\nOutput:\n```python\ndf = pd.DataFrame({\"Category\": [\"A\", 1, 2, 3]})\ndf = df.iloc[1:]\ndf.dtypes\n# Output: \n# Category    object\n# dtype: object\n\ndf.infer_objects().dtypes\n# Output:\n# Category    int64\n# dtype: object\n```", "code": "df = pd.DataFrame({\"Category\": [\"A\", 1, 2, 3]})\ndf = df.iloc[1:]\ndf.dtypes\n# Output: \n# Category    object\n# dtype: object\n\ndf.infer_objects().dtypes\n# Output:\n# Category    int64\n# dtype: object"}
{"text": "Instance: pandas.DataFrame.copy\nOutput:\n```python\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf_copy = df.copy()\n```", "code": "df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf_copy = df.copy()"}
{"text": "Instance: pandas.DataFrame.bool\nOutput:\n```python\ndf = pd.DataFrame({'is_positive': [True]})\ndf.bool() # outputs True\n```", "code": "df = pd.DataFrame({'is_positive': [True]})\ndf.bool() # outputs True"}
{"text": "Instance: pandas.DataFrame.head\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.head()\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.head()"}
{"text": "Instance: pandas.DataFrame.at\nOutput:\n```python\ndf = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], index=[4, 5, 6], columns=['Height', 'Weight', 'Age'])\ndf.at[4, 'Weight'] # Output: 2\n```", "code": "df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], index=[4, 5, 6], columns=['Height', 'Weight', 'Age'])\ndf.at[4, 'Weight'] # Output: 2"}
{"text": "Instance: pandas.DataFrame.iat\nOutput:\n```python\ndf = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], columns=['X', 'Y', 'Z'])\nvalue = df.iat[1, 2] # returns the value at row 1, column 2\n```", "code": "df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]], columns=['X', 'Y', 'Z'])\nvalue = df.iat[1, 2] # returns the value at row 1, column 2"}
{"text": "Instance: pandas.DataFrame.loc\nOutput:\n```python\ndf.loc['viper']\n```\n```python\ndf.loc[['viper', 'sidewinder']]\n```\n```python\ndf.loc['cobra', 'shield']\n```\n```python\ndf.loc['cobra':'viper', 'max_speed']\n```\n```python\ndf.loc[[False, False, True]]\n```\n```python\ndf.loc[pd.Series([False, True, False], index=['viper', 'sidewinder', 'cobra'])]\n```\n```python\ndf.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\n```\n```python\ndf.loc[df['shield'] > 6]\n```\n```python\ndf.loc[df['shield'] > 6, ['max_speed']]\n```\n```python\ndf.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]\n```\n```python\ndf.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]\n```\n```python\ndf.loc[lambda df: df['shield'] == 8]\n```\n```python\ndf.loc[['viper', 'sidewinder'], ['shield']] = 50\n```\n```python\ndf.loc['cobra'] = 10\n```\n```python\ndf.loc[:, 'max_speed'] = 30\n```\n```python\ndf.loc[df['shield'] > 35] = 0\n```\n```python\ndf.loc[\"viper\", \"shield\"] += 5\n```\n```python\nshuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\n```\n```python\ndf.loc[:] += shuffled_df\n```\n```python\ndf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=[7, 8, 9], columns=['max_speed', 'shield'])\n```\n```python\ndf.loc[7:9]\n```\n```python\ntuples = [('cobra', 'mark i'), ('cobra', 'mark ii'), ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'), ('viper', 'mark ii'), ('viper', 'mark iii')]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20], [1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n```\n```python\ndf.loc['cobra']\n```\n```python\ndf.loc[('cobra', 'mark ii')]\n```\n```python\ndf.loc['cobra', 'mark i']\n```\n```python\ndf.loc[[('cobra', 'mark ii')]]\n```\n```python\ndf.loc[('cobra', 'mark i'), 'shield']\n```\n```python\ndf.loc[('cobra', 'mark i'):'viper']\n```\n```python\ndf.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n```", "code": "df.loc['viper']\ndf.loc[['viper', 'sidewinder']]\ndf.loc['cobra', 'shield']\ndf.loc['cobra':'viper', 'max_speed']\ndf.loc[[False, False, True]]\ndf.loc[pd.Series([False, True, False], index=['viper', 'sidewinder', 'cobra'])]\ndf.loc[pd.Index([\"cobra\", \"viper\"], name=\"foo\")]\ndf.loc[df['shield'] > 6]\ndf.loc[df['shield'] > 6, ['max_speed']]\ndf.loc[(df['max_speed'] > 1) & (df['shield'] < 8)]\ndf.loc[(df['max_speed'] > 4) | (df['shield'] < 5)]\ndf.loc[lambda df: df['shield'] == 8]\ndf.loc[['viper', 'sidewinder'], ['shield']] = 50\ndf.loc['cobra'] = 10\ndf.loc[:, 'max_speed'] = 30\ndf.loc[df['shield'] > 35] = 0\ndf.loc[\"viper\", \"shield\"] += 5\nshuffled_df = df.loc[[\"viper\", \"cobra\", \"sidewinder\"]]\ndf.loc[:] += shuffled_df\ndf = pd.DataFrame([[1, 2], [4, 5], [7, 8]], index=[7, 8, 9], columns=['max_speed', 'shield'])\ndf.loc[7:9]\ntuples = [('cobra', 'mark i'), ('cobra', 'mark ii'), ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'), ('viper', 'mark ii'), ('viper', 'mark iii')]\nindex = pd.MultiIndex.from_tuples(tuples)\nvalues = [[12, 2], [0, 4], [10, 20], [1, 4], [7, 1], [16, 36]]\ndf = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\ndf.loc['cobra']\ndf.loc[('cobra', 'mark ii')]\ndf.loc['cobra', 'mark i']\ndf.loc[[('cobra', 'mark ii')]]\ndf.loc[('cobra', 'mark i'), 'shield']\ndf.loc[('cobra', 'mark i'):'viper']\ndf.loc[('cobra', 'mark i'):('viper', 'mark ii')]"}
{"text": "Instance: pandas.DataFrame.iloc\nOutput:\n```python\ndf.iloc[0, 1] # outputs the value at row 0, column 1, e.g. 2\n```", "code": "df.iloc[0, 1] # outputs the value at row 0, column 1, e.g. 2"}
{"text": "Instance: pandas.DataFrame.insert\nOutput:\n```python\ndf.insert(2, \"new_column\", [10, 20, 30]) # inserts a new column named \"new_column\" at index 2 with values [10, 20, 30]\n```", "code": "df.insert(2, \"new_column\", [10, 20, 30]) # inserts a new column named \"new_column\" at index 2 with values [10, 20, 30]"}
{"text": "Instance: pandas.DataFrame.__iter__\nOutput:\n```python\ndf = pd.DataFrame({'Science': [85, 90, 88], 'History': [92, 87, 89]})\nfor x in df:\n    print(x)\n```", "code": "df = pd.DataFrame({'Science': [85, 90, 88], 'History': [92, 87, 89]})\nfor x in df:\n    print(x)"}
{"text": "Instance: pandas.DataFrame.items\nOutput:\n```python\nfor label, content in df.items():\n    print(f'label: {label}')\n    print(f'content: {content}', sep='\\n')\n```", "code": "for label, content in df.items():\n    print(f'label: {label}')\n    print(f'content: {content}', sep='\\n')"}
{"text": "Instance: pandas.DataFrame.keys\nOutput:\n```python\nd = pd.DataFrame(data={'Sales': [100, 200, 300], 'Expenses': [50, 150, 250]},\n                 index=['Q1', 'Q2', 'Q3'])\nd.keys() # Index(['Sales', 'Expenses'], dtype='object')\n```", "code": "d = pd.DataFrame(data={'Sales': [100, 200, 300], 'Expenses': [50, 150, 250]},\n                 index=['Q1', 'Q2', 'Q3'])\nd.keys() # Index(['Sales', 'Expenses'], dtype='object')"}
{"text": "Instance: pandas.DataFrame.iterrows\nOutput:\n```python\ndf = pd.DataFrame([[1, 1.5]], columns=['temperature', 'humidity'])\nrow = next(df.iterrows())[1]\nprint(row)\nprint(row['temperature'].dtype)\nprint(df['temperature'].dtype)\n```", "code": "df = pd.DataFrame([[1, 1.5]], columns=['temperature', 'humidity'])\nrow = next(df.iterrows())[1]\nprint(row)\nprint(row['temperature'].dtype)\nprint(df['temperature'].dtype)"}
{"text": "Instance: pandas.DataFrame.itertuples\nOutput:\n```python\nfor row in df.itertuples():\n    print(row)\n```", "code": "for row in df.itertuples():\n    print(row)"}
{"text": "Instance: pandas.DataFrame.pop\nOutput:\n```python\ndf = pd.DataFrame([('apple', 'fruit', 0.5),\n                   ('banana', 'fruit', 0.3),\n                   ('carrot', 'vegetable', 0.2)],\n                  columns=('item', 'category', 'price'))\n\ndf.pop('category')\n# Output:\n# 0       fruit\n# 1       fruit\n# 2    vegetable\n# Name: category, dtype: object\n\n# df now becomes:\n#      item  price\n# 0   apple    0.5\n# 1  banana    0.3\n# 2  carrot    0.2\n```", "code": "df = pd.DataFrame([('apple', 'fruit', 0.5),\n                   ('banana', 'fruit', 0.3),\n                   ('carrot', 'vegetable', 0.2)],\n                  columns=('item', 'category', 'price'))\n\ndf.pop('category')\n# Output:\n# 0       fruit\n# 1       fruit\n# 2    vegetable\n# Name: category, dtype: object\n\n# df now becomes:\n#      item  price\n# 0   apple    0.5\n# 1  banana    0.3\n# 2  carrot    0.2"}
{"text": "Instance: pandas.DataFrame.tail\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.tail()\n```\n```python\ndf.tail(3)\n```\n```python\ndf.tail(-3)\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.tail()\ndf.tail(3)\ndf.tail(-3)"}
{"text": "Instance: pandas.DataFrame.xs\nOutput:\n```python\ndf.xs('mammal')\n```", "code": "df.xs('mammal')"}
{"text": "Instance: pandas.DataFrame.get\nOutput:\n```python\ndf.get([\"temp_celsius\", \"windspeed\"])\n```", "code": "df.get([\"temp_celsius\", \"windspeed\"])"}
{"text": "Instance: pandas.DataFrame.isin\nOutput:\n```python\ndf.isin([0, 2])\n```", "code": "df.isin([0, 2])"}
{"text": "Instance: pandas.DataFrame.where\nOutput:\n```python\ndf = pd.DataFrame(np.random.randint(0, 10, size=(5, 3)), columns=['Height', 'Weight', 'Age'])\nm = df['Height'] > 5\nresult = df.where(m, -df)\n```", "code": "df = pd.DataFrame(np.random.randint(0, 10, size=(5, 3)), columns=['Height', 'Weight', 'Age'])\nm = df['Height'] > 5\nresult = df.where(m, -df)"}
{"text": "Instance: pandas.DataFrame.mask\nOutput:\n```python\ndf = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['Height', 'Width'])\nm = df % 3 == 0\nmasked_df = df.mask(~m, -df)\n```", "code": "df = pd.DataFrame(np.arange(10).reshape(-1, 2), columns=['Height', 'Width'])\nm = df % 3 == 0\nmasked_df = df.mask(~m, -df)"}
{"text": "Instance: pandas.DataFrame.query\nOutput:\n```python\ndf.query('A > B')\n```", "code": "df.query('A > B')"}
{"text": "Instance: pandas.DataFrame.__add__\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30], 'humidity': [60, 70]}, index=['city1', 'city2'])\ns = pd.Series([2, 3], index=['temperature', 'humidity'])\nresult = df + s\n```", "code": "df = pd.DataFrame({'temperature': [25, 30], 'humidity': [60, 70]}, index=['city1', 'city2'])\ns = pd.Series([2, 3], index=['temperature', 'humidity'])\nresult = df + s"}
{"text": "Instance: pandas.DataFrame.add\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 20],\n                   'humidity': [50, 60, 40]},\n                  index=['Monday', 'Tuesday', 'Wednesday'])\n\nresult = df.add(5)\n```", "code": "df = pd.DataFrame({'temperature': [25, 30, 20],\n                   'humidity': [50, 60, 40]},\n                  index=['Monday', 'Tuesday', 'Wednesday'])\n\nresult = df.add(5)"}
{"text": "Instance: pandas.DataFrame.sub\nOutput:\n```python\ndf.sub([1, 2], axis='columns')\n```", "code": "df.sub([1, 2], axis='columns')"}
{"text": "Instance: pandas.DataFrame.mul\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 20],\n                   'humidity': [60, 70, 50]},\n                  index=['Monday', 'Tuesday', 'Wednesday'])\n\nresult = df.mul({'temperature': 2, 'humidity': 0.5})\nprint(result)\n```\n", "code": "df = pd.DataFrame({'temperature': [25, 30, 20],\n                   'humidity': [60, 70, 50]},\n                  index=['Monday', 'Tuesday', 'Wednesday'])\n\nresult = df.mul({'temperature': 2, 'humidity': 0.5})\nprint(result)"}
{"text": "Instance: pandas.DataFrame.div\nOutput:\n```python\ndf.div(10)\n```", "code": "df.div(10)"}
{"text": "Instance: pandas.DataFrame.truediv\nOutput:\n```python\ndf.truediv(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0\n```", "code": "df.truediv(10)\n           angles  degrees\ncircle        0.0     36.0\ntriangle      0.3     18.0\nrectangle     0.4     36.0"}
{"text": "Instance: pandas.DataFrame.floordiv\nOutput:\n```python\nresult = df.floordiv(5)\n```", "code": "result = df.floordiv(5)"}
{"text": "Instance: pandas.DataFrame.mod\nOutput:\n```python\ndf.mod(5)\n```", "code": "df.mod(5)"}
{"text": "Instance: pandas.DataFrame.pow\nOutput:\n```python\ndf.pow(2)\n```", "code": "df.pow(2)"}
{"text": "Instance: pandas.DataFrame.dot\nOutput:\n```python\ndf = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\ns = pd.Series([1, 1, 2, 1])\nresult = df.dot(s)\n```", "code": "df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\ns = pd.Series([1, 1, 2, 1])\nresult = df.dot(s)"}
{"text": "Instance: pandas.DataFrame.radd\nOutput:\n```python\nresult = df.radd(5)\n```", "code": "result = df.radd(5)"}
{"text": "Instance: pandas.DataFrame.rsub\nOutput:\n```python\nresult = df.rsub(5)\n```", "code": "result = df.rsub(5)"}
{"text": "Instance: pandas.DataFrame.rmul\nOutput:\n```python\nresult = df.rmul({'angles': 2, 'degrees': 0.5})\n```", "code": "result = df.rmul({'angles': 2, 'degrees': 0.5})"}
{"text": "Instance: pandas.DataFrame.rdiv\nOutput:\n```python\ndf = pd.DataFrame({'speed': [50, 60, 70],\n                   'distance': [100, 120, 140]},\n                  index=['car', 'bike', 'train'])\n\ndf_rdiv = df.rdiv(10)\nprint(df_rdiv)\n```\n", "code": "df = pd.DataFrame({'speed': [50, 60, 70],\n                   'distance': [100, 120, 140]},\n                  index=['car', 'bike', 'train'])\n\ndf_rdiv = df.rdiv(10)\nprint(df_rdiv)"}
{"text": "Instance: pandas.DataFrame.rtruediv\nOutput:\n```python\ndf.rtruediv(5)\n```\n", "code": "df.rtruediv(5)"}
{"text": "Instance: pandas.DataFrame.rfloordiv\nOutput:\n```python\ndf.rfloordiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778\n```", "code": "df.rfloordiv(10)\n             angles   degrees\ncircle          inf  0.027778\ntriangle   3.333333  0.055556\nrectangle  2.500000  0.027778"}
{"text": "Instance: pandas.DataFrame.rmod\nOutput:\n```python\nresult = df.rmod(5)\n```", "code": "result = df.rmod(5)"}
{"text": "Instance: pandas.DataFrame.rpow\nOutput:\n```python\ndf = pd.DataFrame({'speed': [50, 60, 70],\n                   'distance': [100, 120, 140]},\n                  index=['car', 'bike', 'train'])\n\ndf_rpow = df.rpow(2)\nprint(df_rpow)\n```\n", "code": "df = pd.DataFrame({'speed': [50, 60, 70],\n                   'distance': [100, 120, 140]},\n                  index=['car', 'bike', 'train'])\n\ndf_rpow = df.rpow(2)\nprint(df_rpow)"}
{"text": "Instance: pandas.DataFrame.lt\nOutput:\n```python\nresult = df.lt(100)\nresult = df.lt(pd.Series([100, 250], index=[\"cost\", \"revenue\"]))\nresult = df.lt([250, 100])\nresult = df.lt(other)\nresult = df_multindex.lt(df_multindex, level=1)\n```", "code": "result = df.lt(100)\nresult = df.lt(pd.Series([100, 250], index=[\"cost\", \"revenue\"]))\nresult = df.lt([250, 100])\nresult = df.lt(other)\nresult = df_multindex.lt(df_multindex, level=1)"}
{"text": "Instance: pandas.DataFrame.gt\nOutput:\n```python\nresult = df.gt(pd.DataFrame({'cost': [200, 100, 50], 'revenue': [50, 200, 250]}, index=['A', 'B', 'C']))\n```", "code": "result = df.gt(pd.DataFrame({'cost': [200, 100, 50], 'revenue': [50, 200, 250]}, index=['A', 'B', 'C']))"}
{"text": "Instance: pandas.DataFrame.le\nOutput:\n```python\ndf.le(pd.DataFrame({'cost': [200, 250, 100], 'revenue': [150, 200, 300]}, index=['A', 'B', 'C']))\n```", "code": "df.le(pd.DataFrame({'cost': [200, 250, 100], 'revenue': [150, 200, 300]}, index=['A', 'B', 'C']))"}
{"text": "Instance: pandas.DataFrame.ge\nOutput:\n```python\ndf.ge(pd.Series([100, 250], index=[\"cost\", \"revenue\"]))\n```", "code": "df.ge(pd.Series([100, 250], index=[\"cost\", \"revenue\"]))"}
{"text": "Instance: pandas.DataFrame.ne\nOutput:\n```python\nresult = df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')\n```", "code": "result = df.ne(pd.Series([100, 300], index=[\"A\", \"D\"]), axis='index')"}
{"text": "Instance: pandas.DataFrame.eq\nOutput:\n```python\ndf.eq(100) # outputs DataFrame with True/False values indicating equality to 100\n```", "code": "df.eq(100) # outputs DataFrame with True/False values indicating equality to 100"}
{"text": "Instance: pandas.DataFrame.combine\nOutput:\n```python\ndf1 = pd.DataFrame({'X': [0, 0], 'Y': [4, 4]})\ndf2 = pd.DataFrame({'X': [1, 1], 'Y': [3, 3]})\ntake_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\nresult = df1.combine(df2, take_smaller)\nprint(result)\n```", "code": "df1 = pd.DataFrame({'X': [0, 0], 'Y': [4, 4]})\ndf2 = pd.DataFrame({'X': [1, 1], 'Y': [3, 3]})\ntake_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\nresult = df1.combine(df2, take_smaller)\nprint(result)"}
{"text": "Instance: pandas.DataFrame.combine_first\nOutput:\n```python\ndf1 = pd.DataFrame({'Temperature': [None, 25, 30], 'Humidity': [None, 50, None]})\ndf2 = pd.DataFrame({'Temperature': [20, 22, 24], 'Humidity': [60, 55, 65]})\nresult = df1.combine_first(df2)\n```", "code": "df1 = pd.DataFrame({'Temperature': [None, 25, 30], 'Humidity': [None, 50, None]})\ndf2 = pd.DataFrame({'Temperature': [20, 22, 24], 'Humidity': [60, 55, 65]})\nresult = df1.combine_first(df2)"}
{"text": "Instance: pandas.DataFrame.apply\nOutput:\n```python\ndf.apply(np.sum, axis=0) # sums the values in each column of the DataFrame df\n```", "code": "df.apply(np.sum, axis=0) # sums the values in each column of the DataFrame df"}
{"text": "Instance: pandas.DataFrame.map\nOutput:\n```python\ndf.map(lambda x: len(str(x)))\n```", "code": "df.map(lambda x: len(str(x)))"}
{"text": "Instance: pandas.DataFrame.applymap\nOutput:\n```python\ndf = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\ndf.applymap(lambda x: len(str(x)))\n```", "code": "df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\ndf.applymap(lambda x: len(str(x)))"}
{"text": "Instance: pandas.DataFrame.pipe\nOutput:\n```python\n(\n    df.pipe(subtract_federal_tax)\n    .pipe(subtract_state_tax, rate=0.12)\n    .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n)\n```", "code": "(\n    df.pipe(subtract_federal_tax)\n    .pipe(subtract_state_tax, rate=0.12)\n    .pipe(subtract_national_insurance, rate=0.05, rate_increase=0.02)\n)"}
{"text": "Instance: pandas.DataFrame.agg\nOutput:\n```python\ndf = pd.DataFrame([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [np.nan, np.nan, np.nan]],\n                  columns=['X', 'Y', 'Z'])\n\ndf.agg(['sum', 'min'])\n```\n```python\ndf.agg({'X': ['sum', 'min'], 'Y': ['min', 'max']})\n```\n```python\ndf.agg(x=('X', 'max'), y=('Y', 'min'), z=('Z', 'mean'))\n```\n```python\ndf.agg(\"mean\", axis=\"columns\")\n```", "code": "df = pd.DataFrame([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [np.nan, np.nan, np.nan]],\n                  columns=['X', 'Y', 'Z'])\n\ndf.agg(['sum', 'min'])\ndf.agg({'X': ['sum', 'min'], 'Y': ['min', 'max']})\ndf.agg(x=('X', 'max'), y=('Y', 'min'), z=('Z', 'mean'))\ndf.agg(\"mean\", axis=\"columns\")"}
{"text": "Instance: pandas.DataFrame.aggregate\nOutput:\n```python\ndf = pd.DataFrame([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [np.nan, np.nan, np.nan]],\n                  columns=['X', 'Y', 'Z'])\n\ndf.agg(['sum', 'min'])\n```\n```python\ndf.agg({'X': ['sum', 'min'], 'Y': ['min', 'max']})\n```\n```python\ndf.agg(x=('X', 'max'), y=('Y', 'min'), z=('Z', 'mean'))\n```\n```python\ndf.agg(\"mean\", axis=\"columns\")\n```", "code": "df = pd.DataFrame([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [np.nan, np.nan, np.nan]],\n                  columns=['X', 'Y', 'Z'])\n\ndf.agg(['sum', 'min'])\ndf.agg({'X': ['sum', 'min'], 'Y': ['min', 'max']})\ndf.agg(x=('X', 'max'), y=('Y', 'min'), z=('Z', 'mean'))\ndf.agg(\"mean\", axis=\"columns\")"}
{"text": "Instance: pandas.DataFrame.transform\nOutput:\n```python\ndf = pd.DataFrame({\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"Salary\": [50000, 60000, 70000]\n})\ndf.transform(lambda x: x + 100)\n```", "code": "df = pd.DataFrame({\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"Salary\": [50000, 60000, 70000]\n})\ndf.transform(lambda x: x + 100)"}
{"text": "Instance: pandas.DataFrame.groupby\nOutput:\n```python\ndf = pd.DataFrame({'Animal': ['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n                   'Max Speed': [380., 370., 24., 26.]})\n\ndf.groupby(['Animal']).mean()\n```", "code": "df = pd.DataFrame({'Animal': ['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n                   'Max Speed': [380., 370., 24., 26.]})\n\ndf.groupby(['Animal']).mean()"}
{"text": "Instance: pandas.DataFrame.rolling\nOutput:\n```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf.rolling(2).mean()\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf.rolling(2).mean()"}
{"text": "Instance: pandas.DataFrame.expanding\nOutput:\n```python\ndf = pd.DataFrame({\"Sales\": [100, 200, 300, 400, 500]})\ndf.expanding(2).mean() # calculates the expanding mean of the 'Sales' column with a window size of 2\n```", "code": "df = pd.DataFrame({\"Sales\": [100, 200, 300, 400, 500]})\ndf.expanding(2).mean() # calculates the expanding mean of the 'Sales' column with a window size of 2"}
{"text": "Instance: pandas.DataFrame.ewm\nOutput:\n```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf.ewm(span=2).mean()\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300, 250]})\ndf.ewm(span=2).mean()"}
{"text": "Instance: pandas.DataFrame.abs\nOutput:\n```python\ndf.loc[(df['Temperature'] - 25).abs().argsort()]\n```", "code": "df.loc[(df['Temperature'] - 25).abs().argsort()]"}
{"text": "Instance: pandas.DataFrame.all\nOutput:\n```python\ndf = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all()\n```\n```python\ndf = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all(axis='columns')\n```\n```python\ndf = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all(axis=None)\n```", "code": "df = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all()\ndf = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all(axis='columns')\ndf = pd.DataFrame({'is_positive': [True, True, False], 'is_even': [True, False, True]})\ndf.all(axis=None)"}
{"text": "Instance: pandas.DataFrame.any\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": [25, 30, 20], \"Humidity\": [60, 70, 75]})\ndf.any()\n```\n", "code": "df = pd.DataFrame({\"Temperature\": [25, 30, 20], \"Humidity\": [60, 70, 75]})\ndf.any()"}
{"text": "Instance: pandas.DataFrame.clip\nOutput:\n```python\ndf.clip(-2, 5) # clips values in DataFrame df to be within the range of -2 and 5\n```", "code": "df.clip(-2, 5) # clips values in DataFrame df to be within the range of -2 and 5"}
{"text": "Instance: pandas.DataFrame.corr\nOutput:\n```python\ndf = pd.DataFrame([(1, 2), (3, 4), (5, 6)], columns=['apples', 'oranges'])\ndf.corr()\n```", "code": "df = pd.DataFrame([(1, 2), (3, 4), (5, 6)], columns=['apples', 'oranges'])\ndf.corr()"}
{"text": "Instance: pandas.DataFrame.corrwith\nOutput:\n```python\ndf1 = pd.DataFrame(np.random.randn(5, 4), columns=['Math', 'Science', 'History', 'English'])\ndf2 = pd.DataFrame(np.random.randn(5, 4), columns=['Math', 'Science', 'History', 'English'])\nresult = df1.corrwith(df2)\n```", "code": "df1 = pd.DataFrame(np.random.randn(5, 4), columns=['Math', 'Science', 'History', 'English'])\ndf2 = pd.DataFrame(np.random.randn(5, 4), columns=['Math', 'Science', 'History', 'English'])\nresult = df1.corrwith(df2)"}
{"text": "Instance: pandas.DataFrame.count\nOutput:\n```python\ndf = pd.DataFrame({\"Country\": [\"USA\", \"Canada\", \"Mexico\", \"USA\", \"Canada\"],\n                   \"Population\": [328, 38, 126, 328, 38],\n                   \"Area\": [9833517, 9984670, 1964375, 9833517, 9984670]})\n\ndf.count() # outputs the count of non-NA/null values for each column\n```", "code": "df = pd.DataFrame({\"Country\": [\"USA\", \"Canada\", \"Mexico\", \"USA\", \"Canada\"],\n                   \"Population\": [328, 38, 126, 328, 38],\n                   \"Area\": [9833517, 9984670, 1964375, 9833517, 9984670]})\n\ndf.count() # outputs the count of non-NA/null values for each column"}
{"text": "Instance: pandas.DataFrame.cov\nOutput:\n```python\ndf = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)], columns=['height', 'weight'])\ndf.cov()\n```", "code": "df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)], columns=['height', 'weight'])\ndf.cov()"}
{"text": "Instance: pandas.DataFrame.cummax\nOutput:\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Height', 'Width'])\n\ndf.cummax()\n```\n", "code": "df = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Height', 'Width'])\n\ndf.cummax()"}
{"text": "Instance: pandas.DataFrame.cummin\nOutput:\n```python\ndf.cummin() # returns a DataFrame with cumulative minimum values along each column\n```", "code": "df.cummin() # returns a DataFrame with cumulative minimum values along each column"}
{"text": "Instance: pandas.DataFrame.cumprod\nOutput:\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Sales', 'Profit'])\n\ndf.cumprod()\n```\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Revenue', 'Expense'])\n\ndf.cumprod(skipna=False)\n```\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Production', 'Cost'])\n\ndf.cumprod(axis=1)\n```", "code": "df = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Sales', 'Profit'])\n\ndf.cumprod()\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Revenue', 'Expense'])\n\ndf.cumprod(skipna=False)\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Production', 'Cost'])\n\ndf.cumprod(axis=1)"}
{"text": "Instance: pandas.DataFrame.cumsum\nOutput:\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Height', 'Width'])\n\ndf.cumsum()\n```\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Length', 'Breadth'])\n\ndf.cumsum(skipna=False)\n```\n```python\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['X', 'Y'])\n\ndf.cumsum(axis=1)\n```", "code": "df = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Height', 'Width'])\n\ndf.cumsum()\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['Length', 'Breadth'])\n\ndf.cumsum(skipna=False)\ndf = pd.DataFrame([[2.0, 1.0],\n                   [3.0, np.nan],\n                   [1.0, 0.0]],\n                  columns=['X', 'Y'])\n\ndf.cumsum(axis=1)"}
{"text": "Instance: pandas.DataFrame.describe\nOutput:\n```python\ndf.describe(include='all')\n```", "code": "df.describe(include='all')"}
{"text": "Instance: pandas.DataFrame.diff\nOutput:\n```python\ndf = pd.DataFrame({'height': [150, 155, 160, 165, 170],\n                   'weight': [50, 55, 60, 65, 70],\n                   'age': [20, 25, 30, 35, 40]})\ndf.diff()\n```\n", "code": "df = pd.DataFrame({'height': [150, 155, 160, 165, 170],\n                   'weight': [50, 55, 60, 65, 70],\n                   'age': [20, 25, 30, 35, 40]})\ndf.diff()"}
{"text": "Instance: pandas.DataFrame.eval\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 35], 'Humidity': [50, 60, 70]})\ndf.eval('Heat_Index = 0.5 * Temperature + 0.4 * Humidity')\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 35], 'Humidity': [50, 60, 70]})\ndf.eval('Heat_Index = 0.5 * Temperature + 0.4 * Humidity')"}
{"text": "Instance: pandas.DataFrame.kurt\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 165, 180], 'weight': [60, 70, 65, 75]},\n                  index=['Alice', 'Bob', 'Charlie', 'David'])\ndf.kurt()\n# Output:\n# height    0.25\n# weight   -0.5\n# dtype: float64\n```", "code": "df = pd.DataFrame({'height': [160, 170, 165, 180], 'weight': [60, 70, 65, 75]},\n                  index=['Alice', 'Bob', 'Charlie', 'David'])\ndf.kurt()\n# Output:\n# height    0.25\n# weight   -0.5\n# dtype: float64"}
{"text": "Instance: pandas.DataFrame.kurtosis\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 165, 180], 'weight': [60, 70, 65, 75]})\ndf.kurtosis()\n# Output:\n# height    -1.2\n# weight    -1.2\n# dtype: float64\n```", "code": "df = pd.DataFrame({'height': [160, 170, 165, 180], 'weight': [60, 70, 65, 75]})\ndf.kurtosis()\n# Output:\n# height    -1.2\n# weight    -1.2\n# dtype: float64"}
{"text": "Instance: pandas.DataFrame.max\nOutput:\n```python\ndf.max() # returns the maximum value in each column of the DataFrame df\n```", "code": "df.max() # returns the maximum value in each column of the DataFrame df"}
{"text": "Instance: pandas.DataFrame.mean\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.mean() # calculates the mean of each column\n```\n```python\ndf.mean(axis=1) # calculates the mean of each row\n```\n```python\ndf = pd.DataFrame({'temperature': [25, 30], 'humidity': [60, 70]}, index=['Monday', 'Tuesday'])\ndf.mean() # calculates the mean of each column\n```", "code": "df = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.mean() # calculates the mean of each column\ndf.mean(axis=1) # calculates the mean of each row\ndf = pd.DataFrame({'temperature': [25, 30], 'humidity': [60, 70]}, index=['Monday', 'Tuesday'])\ndf.mean() # calculates the mean of each column"}
{"text": "Instance: pandas.DataFrame.median\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.median() # returns the median of each column\n```", "code": "df = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80]})\ndf.median() # returns the median of each column"}
{"text": "Instance: pandas.DataFrame.min\nOutput:\n```python\ns.min() # outputs 0\n```", "code": "s.min() # outputs 0"}
{"text": "Instance: pandas.DataFrame.mode\nOutput:\n```python\ndf = pd.DataFrame([('bird', 2, 2),\n                   ('mammal', 4, np.nan),\n                   ('arthropod', 8, 0),\n                   ('bird', 2, np.nan)],\n                  index=('falcon', 'horse', 'spider', 'ostrich'),\n                  columns=('species', 'legs', 'wings'))\n\ndf.mode()\ndf.mode(dropna=False)\ndf.mode(numeric_only=True)\ndf.mode(axis='columns', numeric_only=True)\n```", "code": "df = pd.DataFrame([('bird', 2, 2),\n                   ('mammal', 4, np.nan),\n                   ('arthropod', 8, 0),\n                   ('bird', 2, np.nan)],\n                  index=('falcon', 'horse', 'spider', 'ostrich'),\n                  columns=('species', 'legs', 'wings'))\n\ndf.mode()\ndf.mode(dropna=False)\ndf.mode(numeric_only=True)\ndf.mode(axis='columns', numeric_only=True)"}
{"text": "Instance: pandas.DataFrame.pct_change\nOutput:\n```python\ndf = pd.DataFrame({\n    'Sales': [1000, 1500, 1200],\n    'Expenses': [800, 1000, 900],\n    'Profit': [200, 500, 300]},\n    index=['Q1', 'Q2', 'Q3'])\n\ndf.pct_change()\n```\n", "code": "df = pd.DataFrame({\n    'Sales': [1000, 1500, 1200],\n    'Expenses': [800, 1000, 900],\n    'Profit': [200, 500, 300]},\n    index=['Q1', 'Q2', 'Q3'])\n\ndf.pct_change()"}
{"text": "Instance: pandas.DataFrame.prod\nOutput:\n```python\ndf.prod() # returns the product of all elements in the DataFrame\n```", "code": "df.prod() # returns the product of all elements in the DataFrame"}
{"text": "Instance: pandas.DataFrame.product\nOutput:\n```python\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nresult = df.product()\n```", "code": "df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nresult = df.product()"}
{"text": "Instance: pandas.DataFrame.quantile\nOutput:\n```python\ndf = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]), columns=['x', 'y'])\ndf.quantile(0.25) # returns the 25th percentile of the DataFrame\n```", "code": "df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]), columns=['x', 'y'])\ndf.quantile(0.25) # returns the 25th percentile of the DataFrame"}
{"text": "Instance: pandas.DataFrame.rank\nOutput:\n```python\ndf['default_rank'] = df['Number_legs'].rank()\ndf['max_rank'] = df['Number_legs'].rank(method='max')\ndf['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\ndf['pct_rank'] = df['Number_legs'].rank(pct=True)\n```", "code": "df['default_rank'] = df['Number_legs'].rank()\ndf['max_rank'] = df['Number_legs'].rank(method='max')\ndf['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\ndf['pct_rank'] = df['Number_legs'].rank(pct=True)"}
{"text": "Instance: pandas.DataFrame.round\nOutput:\n```python\ndf = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndf.round(1)\n```\n```python\ndf = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndecimals = pd.Series([0, 1], index=['humidity', 'temperature'])\ndf.round(decimals)\n```\n```python\ndf = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndf.round({'temperature': 1, 'humidity': 0})\n```", "code": "df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndf.round(1)\ndf = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndecimals = pd.Series([0, 1], index=['humidity', 'temperature'])\ndf.round(decimals)\ndf = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)], columns=['temperature', 'humidity'])\ndf.round({'temperature': 1, 'humidity': 0})"}
{"text": "Instance: pandas.DataFrame.sem\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 165], 'weight': [60, 70, 65]})\ndf.sem()\n```\n", "code": "df = pd.DataFrame({'height': [160, 170, 165], 'weight': [60, 70, 65]})\ndf.sem()"}
{"text": "Instance: pandas.DataFrame.skew\nOutput:\n```python\ndf = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80], 'age': [25, 30, 35]})\ndf.skew()\n```\n", "code": "df = pd.DataFrame({'height': [160, 170, 180], 'weight': [60, 70, 80], 'age': [25, 30, 35]})\ndf.skew()"}
{"text": "Instance: pandas.DataFrame.sum\nOutput:\n```python\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf.sum() # outputs sum of each column in the DataFrame\n```", "code": "df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf.sum() # outputs sum of each column in the DataFrame"}
{"text": "Instance: pandas.DataFrame.std\nOutput:\n```python\ndf = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points_scored': [25, 30, 20, 35],\n                   'rebounds': [10, 5, 8, 12]}\n                  ).set_index('player_id')\n\ndf.std()\n# Output:\n# points_scored    5.590170\n# rebounds         2.588436\n# dtype: float64\n\ndf.std(ddof=0)\n# Output:\n# points_scored    4.472136\n# rebounds         2.236068\n# dtype: float64\n```", "code": "df = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points_scored': [25, 30, 20, 35],\n                   'rebounds': [10, 5, 8, 12]}\n                  ).set_index('player_id')\n\ndf.std()\n# Output:\n# points_scored    5.590170\n# rebounds         2.588436\n# dtype: float64\n\ndf.std(ddof=0)\n# Output:\n# points_scored    4.472136\n# rebounds         2.236068\n# dtype: float64"}
{"text": "Instance: pandas.DataFrame.var\nOutput:\n```python\ndf = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points': [25, 30, 20, 35],\n                   'rebounds': [10, 8, 12, 6]}\n                  ).set_index('player_id')\n\ndf.var()\n# Output:\n# points      25.0\n# rebounds     6.25\n# dtype: float64\n\ndf.var(ddof=0)\n# Output:\n# points      18.75\n# rebounds     4.6875\n# dtype: float64\n```", "code": "df = pd.DataFrame({'player_id': [101, 102, 103, 104],\n                   'points': [25, 30, 20, 35],\n                   'rebounds': [10, 8, 12, 6]}\n                  ).set_index('player_id')\n\ndf.var()\n# Output:\n# points      25.0\n# rebounds     6.25\n# dtype: float64\n\ndf.var(ddof=0)\n# Output:\n# points      18.75\n# rebounds     4.6875\n# dtype: float64"}
{"text": "Instance: pandas.DataFrame.nunique\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 27], 'Humidity': [60, 55, 70]})\ndf.nunique() # outputs unique values count for each column\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 27], 'Humidity': [60, 55, 70]})\ndf.nunique() # outputs unique values count for each column"}
{"text": "Instance: pandas.DataFrame.value_counts\nOutput:\n```python\ndf = pd.DataFrame({'city': ['New York', 'Los Angeles', 'Chicago', 'New York'],\n                   'population': [8000000, 4000000, 3000000, 8000000]})\ndf.value_counts()\n```\n", "code": "df = pd.DataFrame({'city': ['New York', 'Los Angeles', 'Chicago', 'New York'],\n                   'population': [8000000, 4000000, 3000000, 8000000]})\ndf.value_counts()"}
{"text": "Instance: pandas.DataFrame.add_prefix\nOutput:\n```python\ndf.add_prefix('col_')\n```", "code": "df.add_prefix('col_')"}
{"text": "Instance: pandas.DataFrame.add_suffix\nOutput:\n```python\ndf.add_suffix('_new')\n```", "code": "df.add_suffix('_new')"}
{"text": "Instance: pandas.DataFrame.align\nOutput:\n```python\nleft, right = df.align(other, join=\"outer\", axis=1)\n```", "code": "left, right = df.align(other, join=\"outer\", axis=1)"}
{"text": "Instance: pandas.DataFrame.at_time\nOutput:\n```python\nts.at_time('12:00')\n```", "code": "ts.at_time('12:00')"}
{"text": "Instance: pandas.DataFrame.between_time\nOutput:\n```python\nts.between_time('0:15', '0:45')\n```", "code": "ts.between_time('0:15', '0:45')"}
{"text": "Instance: pandas.DataFrame.drop\nOutput:\n```python\ndf = pd.DataFrame(np.arange(12).reshape(3, 4), columns=['X', 'Y', 'Z', 'W'])\ndf.drop(['Y', 'Z'], axis=1)\n```", "code": "df = pd.DataFrame(np.arange(12).reshape(3, 4), columns=['X', 'Y', 'Z', 'W'])\ndf.drop(['Y', 'Z'], axis=1)"}
{"text": "Instance: pandas.DataFrame.drop_duplicates\nOutput:\n```python\ndf.drop_duplicates()\n```\n```python\ndf.drop_duplicates(subset=['brand'])\n```\n```python\ndf.drop_duplicates(subset=['brand', 'style'], keep='last')\n```", "code": "df.drop_duplicates()\ndf.drop_duplicates(subset=['brand'])\ndf.drop_duplicates(subset=['brand', 'style'], keep='last')"}
{"text": "Instance: pandas.DataFrame.duplicated\nOutput:\n```python\ndf = pd.DataFrame({\n    'product': ['Apple', 'Banana', 'Apple', 'Orange', 'Banana'],\n    'price': [1.5, 0.5, 1.5, 2.0, 0.5],\n    'quantity': [10, 5, 10, 8, 5]\n})\n\ndf.duplicated()\ndf.duplicated(keep='last')\ndf.duplicated(keep=False)\ndf.duplicated(subset=['product'])\n```", "code": "df = pd.DataFrame({\n    'product': ['Apple', 'Banana', 'Apple', 'Orange', 'Banana'],\n    'price': [1.5, 0.5, 1.5, 2.0, 0.5],\n    'quantity': [10, 5, 10, 8, 5]\n})\n\ndf.duplicated()\ndf.duplicated(keep='last')\ndf.duplicated(keep=False)\ndf.duplicated(subset=['product'])"}
{"text": "Instance: pandas.DataFrame.equals\nOutput:\n```python\ndf = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\nexactly_equal = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf.equals(exactly_equal) # True\n\ndifferent_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\ndf.equals(different_column_type) # True\n\ndifferent_data_type = pd.DataFrame({'A': [1.0, 2.0], 'B': [3.0, 4.0]})\ndf.equals(different_data_type) # False\n```", "code": "df = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\nexactly_equal = pd.DataFrame({'A': [1, 2], 'B': [3, 4]})\ndf.equals(exactly_equal) # True\n\ndifferent_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\ndf.equals(different_column_type) # True\n\ndifferent_data_type = pd.DataFrame({'A': [1.0, 2.0], 'B': [3.0, 4.0]})\ndf.equals(different_data_type) # False"}
{"text": "Instance: pandas.DataFrame.filter\nOutput:\n```python\ndf.filter(items=['one', 'three'])\n```", "code": "df.filter(items=['one', 'three'])"}
{"text": "Instance: pandas.DataFrame.first\nOutput:\n```python\nts.first('3D')\n```", "code": "ts.first('3D')"}
{"text": "Instance: pandas.DataFrame.head\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Australia', 'Japan']})\ndf.head()\n```\n```python\ndf.head(3)\n```\n```python\ndf.head(-3)\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Australia', 'Japan']})\ndf.head()\ndf.head(3)\ndf.head(-3)"}
{"text": "Instance: pandas.DataFrame.idxmax\nOutput:\n```python\ndf.idxmax() # returns the index label of the maximum value in each column\n```", "code": "df.idxmax() # returns the index label of the maximum value in each column"}
{"text": "Instance: pandas.DataFrame.idxmin\nOutput:\n```python\ndf.idxmin() # returns the index label of the minimum values in each column\n```", "code": "df.idxmin() # returns the index label of the minimum values in each column"}
{"text": "Instance: pandas.DataFrame.last\nOutput:\n```python\nts.last('3D')  \n```", "code": "ts.last('3D')"}
{"text": "Instance: pandas.DataFrame.reindex\nOutput:\n```python\ndf.reindex(['column1', 'column2'], axis=\"columns\")\n```", "code": "df.reindex(['column1', 'column2'], axis=\"columns\")"}
{"text": "Instance: pandas.DataFrame.reindex_like\nOutput:\n```python\ndf2.reindex_like(df1)\n```", "code": "df2.reindex_like(df1)"}
{"text": "Instance: pandas.DataFrame.rename\nOutput:\n```python\ndf.rename(columns={\"A\": \"apple\", \"B\": \"banana\"})\n```", "code": "df.rename(columns={\"A\": \"apple\", \"B\": \"banana\"})"}
{"text": "Instance: pandas.DataFrame.rename_axis\nOutput:\n```python\ndf = df.rename_axis(\"animal\")\n```", "code": "df = df.rename_axis(\"animal\")"}
{"text": "Instance: pandas.DataFrame.reset_index\nOutput:\n```python\ndf.reset_index(level='class', col_level=1, col_fill='genus')\n```", "code": "df.reset_index(level='class', col_level=1, col_fill='genus')"}
{"text": "Instance: pandas.DataFrame.sample\nOutput:\n```python\ndf.sample(n=2, weights='num_specimen_seen', random_state=1)\n```", "code": "df.sample(n=2, weights='num_specimen_seen', random_state=1)"}
{"text": "Instance: pandas.DataFrame.set_axis\nOutput:\n```python\ndf.set_axis(['Height', 'Width'], axis='columns')\n```", "code": "df.set_axis(['Height', 'Width'], axis='columns')"}
{"text": "Instance: pandas.DataFrame.set_index\nOutput:\n```python\ndf.set_index('year') # sets the 'year' column as the index of the DataFrame\n```", "code": "df.set_index('year') # sets the 'year' column as the index of the DataFrame"}
{"text": "Instance: pandas.DataFrame.tail\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.tail()\n```\n```python\ndf.tail(3)\n```\n```python\ndf.tail(-3)\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico', 'Brazil', 'Argentina', 'Chile', 'Peru', 'Colombia', 'Ecuador']})\ndf.tail()\ndf.tail(3)\ndf.tail(-3)"}
{"text": "Instance: pandas.DataFrame.take\nOutput:\n```python\ndf.take([0, 3]) # returns a new DataFrame with rows at index 0 and 3\n```", "code": "df.take([0, 3]) # returns a new DataFrame with rows at index 0 and 3"}
{"text": "Instance: pandas.DataFrame.truncate\nOutput:\n```python\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n                   'Age': [25, 30, 35, 40, 45],\n                   'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Miami']},\n                  index=[1, 2, 3, 4, 5])\n\ndf.truncate(before=2, after=4)\n```", "code": "df = pd.DataFrame({'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n                   'Age': [25, 30, 35, 40, 45],\n                   'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Miami']},\n                  index=[1, 2, 3, 4, 5])\n\ndf.truncate(before=2, after=4)"}
{"text": "Instance: pandas.DataFrame.backfill\nOutput:\n```python\ndf.backfill() # fills NaN values backward in the DataFrame\n```", "code": "df.backfill() # fills NaN values backward in the DataFrame"}
{"text": "Instance: pandas.DataFrame.bfill\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [22, None, None, 25], 'Humidity': [None, 60, None, 70]})\ndf.bfill()\n```\n```python\ndf.bfill(limit=1)\n```", "code": "df = pd.DataFrame({'Temperature': [22, None, None, 25], 'Humidity': [None, 60, None, 70]})\ndf.bfill()\ndf.bfill(limit=1)"}
{"text": "Instance: pandas.DataFrame.dropna\nOutput:\n```python\ndf.dropna() # drops rows with any NaN values\n```", "code": "df.dropna() # drops rows with any NaN values"}
{"text": "Instance: pandas.DataFrame.ffill\nOutput:\n```python\ndf = pd.DataFrame([[np.nan, 2, np.nan, 0],\n                   [3, 4, np.nan, 1],\n                   [np.nan, np.nan, np.nan, np.nan],\n                   [np.nan, 3, np.nan, 4]],\n                  columns=list(\"WXYZ\"))\n\ndf.ffill()\n```", "code": "df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n                   [3, 4, np.nan, 1],\n                   [np.nan, np.nan, np.nan, np.nan],\n                   [np.nan, 3, np.nan, 4]],\n                  columns=list(\"WXYZ\"))\n\ndf.ffill()"}
{"text": "Instance: pandas.DataFrame.fillna\nOutput:\n```python\ndf.fillna(0)\n```", "code": "df.fillna(0)"}
{"text": "Instance: pandas.DataFrame.interpolate\nOutput:\n```python\ndf.interpolate(method='linear', limit_direction='forward', axis=0) # Interpolates missing values in the DataFrame 'df' using linear method along columns\n```", "code": "df.interpolate(method='linear', limit_direction='forward', axis=0) # Interpolates missing values in the DataFrame 'df' using linear method along columns"}
{"text": "Instance: pandas.DataFrame.isna\nOutput:\n```python\ndf.isna() # outputs DataFrame with boolean values indicating missing values\n```", "code": "df.isna() # outputs DataFrame with boolean values indicating missing values"}
{"text": "Instance: pandas.DataFrame.isnull\nOutput:\n```python\ndf.isna()\n```", "code": "df.isna()"}
{"text": "Instance: pandas.DataFrame.notna\nOutput:\n```python\ndf.notna() # outputs DataFrame with boolean values indicating if each element is not NaN\n```", "code": "df.notna() # outputs DataFrame with boolean values indicating if each element is not NaN"}
{"text": "Instance: pandas.DataFrame.notnull\nOutput:\n```python\ndf.notnull() # returns a DataFrame with True for non-null values and False for null values\n```", "code": "df.notnull() # returns a DataFrame with True for non-null values and False for null values"}
{"text": "Instance: pandas.DataFrame.pad\nOutput:\n```python\ndf.pad(axis='columns', method='ffill') # pads the DataFrame with forward fill along the columns\n```", "code": "df.pad(axis='columns', method='ffill') # pads the DataFrame with forward fill along the columns"}
{"text": "Instance: pandas.DataFrame.replace\nOutput:\n```python\ndf = pd.DataFrame({'Player': ['Messi', 'Ronaldo', 'Neymar'],\n                   'Goals': [30, 25, 20],\n                   'Assists': [15, 10, 5]})\ndf.replace({'Player': 'Messi', 'Goals': 30}, {'Player': 'Lewandowski', 'Goals': 40})\n```\n", "code": "df = pd.DataFrame({'Player': ['Messi', 'Ronaldo', 'Neymar'],\n                   'Goals': [30, 25, 20],\n                   'Assists': [15, 10, 5]})\ndf.replace({'Player': 'Messi', 'Goals': 30}, {'Player': 'Lewandowski', 'Goals': 40})"}
{"text": "Instance: pandas.DataFrame.droplevel\nOutput:\n```python\ndf.droplevel('a') # drops the 'a' level from the index\n```", "code": "df.droplevel('a') # drops the 'a' level from the index"}
{"text": "Instance: pandas.DataFrame.pivot\nOutput:\n```python\ndf.pivot(index='foo', columns='bar', values='baz')\n```", "code": "df.pivot(index='foo', columns='bar', values='baz')"}
{"text": "Instance: pandas.DataFrame.pivot_table\nOutput:\n```python\ntable = pd.pivot_table(df, values=['Sales', 'Profit'], index=['Region', 'Product'], columns=['Year'], aggfunc={'Sales': \"sum\", 'Profit': \"mean\"}, fill_value=0)\n```", "code": "table = pd.pivot_table(df, values=['Sales', 'Profit'], index=['Region', 'Product'], columns=['Year'], aggfunc={'Sales': \"sum\", 'Profit': \"mean\"}, fill_value=0)"}
{"text": "Instance: pandas.DataFrame.reorder_levels\nOutput:\n```python\ndf.reorder_levels([\"diet\", \"class\"])\n```", "code": "df.reorder_levels([\"diet\", \"class\"])"}
{"text": "Instance: pandas.DataFrame.sort_values\nOutput:\n```python\ndf.sort_values(by=['col1'])\n```", "code": "df.sort_values(by=['col1'])"}
{"text": "Instance: pandas.DataFrame.sort_index\nOutput:\n```python\ndf = pd.DataFrame({\"population\": [1000000, 2000000, 500000, 300000], \"area\": [500, 1000, 200, 300]}, index=['C', 'A', 'D', 'B'])\ndf.sort_index()\n```\n```python\ndf.sort_index(ascending=False)\n```\n```python\ndf.sort_index(key=lambda x: x.str.lower())\n```", "code": "df = pd.DataFrame({\"population\": [1000000, 2000000, 500000, 300000], \"area\": [500, 1000, 200, 300]}, index=['C', 'A', 'D', 'B'])\ndf.sort_index()\ndf.sort_index(ascending=False)\ndf.sort_index(key=lambda x: x.str.lower())"}
{"text": "Instance: pandas.DataFrame.nlargest\nOutput:\n```python\ndf.nlargest(3, 'population')\n```", "code": "df.nlargest(3, 'population')"}
{"text": "Instance: pandas.DataFrame.nsmallest\nOutput:\n```python\ndf.nsmallest(3, 'population')\n```", "code": "df.nsmallest(3, 'population')"}
{"text": "Instance: pandas.DataFrame.swaplevel\nOutput:\n```python\ndf.swaplevel() # swaps the levels of the index, resulting in a new DataFrame with the levels swapped\n```", "code": "df.swaplevel() # swaps the levels of the index, resulting in a new DataFrame with the levels swapped"}
{"text": "Instance: pandas.DataFrame.stack\nOutput:\n```python\nstacked_df = df.stack()\n```", "code": "stacked_df = df.stack()"}
{"text": "Instance: pandas.DataFrame.unstack\nOutput:\n```python\ndf = s.unstack(level=0)\ndf.unstack()\n```\n", "code": "df = s.unstack(level=0)\ndf.unstack()"}
{"text": "Instance: pandas.DataFrame.swapaxes\nOutput:\n```python\ndf.swapaxes(axis1='column_name1', axis2='column_name2')\n```", "code": "df.swapaxes(axis1='column_name1', axis2='column_name2')"}
{"text": "Instance: pandas.DataFrame.melt\nOutput:\n```python\ndf.melt(id_vars=['Country'], value_vars=['Population'])\n```", "code": "df.melt(id_vars=['Country'], value_vars=['Population'])"}
{"text": "Instance: pandas.DataFrame.explode\nOutput:\n```python\ndf.explode('A')\n```", "code": "df.explode('A')"}
{"text": "Instance: pandas.DataFrame.squeeze\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [3, 4]], columns=['height', 'width'])\ndf_width = df[['width']]\ndf_width.squeeze()\n```", "code": "df = pd.DataFrame([[1, 2], [3, 4]], columns=['height', 'width'])\ndf_width = df[['width']]\ndf_width.squeeze()"}
{"text": "Instance: pandas.DataFrame.to_xarray\nOutput:\n```python\ndf.to_xarray()\n```", "code": "df.to_xarray()"}
{"text": "Instance: pandas.DataFrame.T\nOutput:\n```python\ndf = pd.DataFrame({'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.T # Transpose the DataFrame\n```", "code": "df = pd.DataFrame({'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.T # Transpose the DataFrame"}
{"text": "Instance: pandas.DataFrame.transpose\nOutput:\n```python\ndf = pd.DataFrame(data={'student': ['Alice', 'Bob', 'Charlie'], 'grade': [85, 90, 88]})\ndf_transposed = df.T\ndf_transposed\n```\n", "code": "df = pd.DataFrame(data={'student': ['Alice', 'Bob', 'Charlie'], 'grade': [85, 90, 88]})\ndf_transposed = df.T\ndf_transposed"}
{"text": "Instance: pandas.DataFrame.assign\nOutput:\n```python\ndf.assign(new_column=lambda x: x['existing_column'] * 2)\n```", "code": "df.assign(new_column=lambda x: x['existing_column'] * 2)"}
{"text": "Instance: pandas.DataFrame.compare\nOutput:\n```python\ndf.compare(df2, keep_shape=True, keep_equal=True)\n```", "code": "df.compare(df2, keep_shape=True, keep_equal=True)"}
{"text": "Instance: pandas.DataFrame.join\nOutput:\n```python\ndf = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                   'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\nother = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n                      'B': ['B0', 'B1', 'B2']})\n\nresult = df.join(other, lsuffix='_caller', rsuffix='_other')\nprint(result)\n```", "code": "df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n                   'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\nother = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n                      'B': ['B0', 'B1', 'B2']})\n\nresult = df.join(other, lsuffix='_caller', rsuffix='_other')\nprint(result)"}
{"text": "Instance: pandas.DataFrame.merge\nOutput:\n```python\ndf1 = pd.DataFrame({'category': ['fruit', 'vegetable', 'meat', 'fruit'],\n                    'price': [2.5, 1.5, 3.0, 4.0]})\ndf2 = pd.DataFrame({'category': ['fruit', 'vegetable', 'meat', 'fruit'],\n                    'quantity': [10, 20, 5, 15]})\n\ndf_merged = df1.merge(df2, on='category')\nprint(df_merged)\n```\n", "code": "df1 = pd.DataFrame({'category': ['fruit', 'vegetable', 'meat', 'fruit'],\n                    'price': [2.5, 1.5, 3.0, 4.0]})\ndf2 = pd.DataFrame({'category': ['fruit', 'vegetable', 'meat', 'fruit'],\n                    'quantity': [10, 20, 5, 15]})\n\ndf_merged = df1.merge(df2, on='category')\nprint(df_merged)"}
{"text": "Instance: pandas.DataFrame.update\nOutput:\n```python\ndf = pd.DataFrame({'Country': ['USA', 'Canada', 'Mexico'],\n                   'Population': [328, 38, 126]})\nnew_df = pd.DataFrame({'Population': [330, 40, 130],\n                       'Area': [9833517, 9984670, 1964375]})\ndf.update(new_df)\ndf\n```\n", "code": "df = pd.DataFrame({'Country': ['USA', 'Canada', 'Mexico'],\n                   'Population': [328, 38, 126]})\nnew_df = pd.DataFrame({'Population': [330, 40, 130],\n                       'Area': [9833517, 9984670, 1964375]})\ndf.update(new_df)\ndf"}
{"text": "Instance: pandas.DataFrame.asfreq\nOutput:\n```python\ndf.asfreq(freq='30s', fill_value=9.0)\n```", "code": "df.asfreq(freq='30s', fill_value=9.0)"}
{"text": "Instance: pandas.DataFrame.asof\nOutput:\n```python\ndf.asof(pd.DatetimeIndex(['2018-02-27 09:03:30', '2018-02-27 09:04:30']), subset=['a'])\n```", "code": "df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30', '2018-02-27 09:04:30']), subset=['a'])"}
{"text": "Instance: pandas.DataFrame.shift\nOutput:\n```python\ndf.shift(periods=3, fill_value=0)\n```", "code": "df.shift(periods=3, fill_value=0)"}
{"text": "Instance: pandas.DataFrame.first_valid_index\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [None, None, 25, 30], 'Humidity': [None, 60, 65, 70]})\ndf.first_valid_index() # outputs 1\n```", "code": "df = pd.DataFrame({'Temperature': [None, None, 25, 30], 'Humidity': [None, 60, 65, 70]})\ndf.first_valid_index() # outputs 1"}
{"text": "Instance: pandas.DataFrame.last_valid_index\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [None, None, 25, 30], 'Humidity': [None, 60, 70, 80]})\ndf.last_valid_index() # outputs 3\n```", "code": "df = pd.DataFrame({'Temperature': [None, None, 25, 30], 'Humidity': [None, 60, 70, 80]})\ndf.last_valid_index() # outputs 3"}
{"text": "Instance: pandas.DataFrame.resample\nOutput:\n```python\ndf.resample('W').mean()\n```", "code": "df.resample('W').mean()"}
{"text": "Instance: pandas.DataFrame.to_period\nOutput:\n```python\ndf.to_period(\"M\") # Converts the DataFrame index to PeriodIndex with monthly frequency\n```", "code": "df.to_period(\"M\") # Converts the DataFrame index to PeriodIndex with monthly frequency"}
{"text": "Instance: pandas.DataFrame.to_timestamp\nOutput:\n```python\ndf = pd.DataFrame(data={'sales': [100, 200, 150]}, index=pd.date_range('2023-01-01', periods=3, freq='D'))\ndf = df.to_timestamp()\ndf\n```\n", "code": "df = pd.DataFrame(data={'sales': [100, 200, 150]}, index=pd.date_range('2023-01-01', periods=3, freq='D'))\ndf = df.to_timestamp()\ndf"}
{"text": "Instance: pandas.DataFrame.tz_convert\nOutput:\n```python\ns = pd.Series([1], index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\ns.tz_convert('Asia/Shanghai')\n```", "code": "s = pd.Series([1], index=pd.DatetimeIndex(['2018-09-15 01:30:00+02:00']))\ns.tz_convert('Asia/Shanghai')"}
{"text": "Instance: pandas.DataFrame.tz_localize\nOutput:\n```python\ns = pd.Series(range(7),\n              index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 03:00:00',\n                                      '2018-10-28 03:30:00']))\ns.tz_localize('CET', ambiguous='infer')\n```", "code": "s = pd.Series(range(7),\n              index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 02:00:00',\n                                      '2018-10-28 02:30:00',\n                                      '2018-10-28 03:00:00',\n                                      '2018-10-28 03:30:00']))\ns.tz_localize('CET', ambiguous='infer')"}
{"text": "Instance: pandas.Flags\nOutput:\n```python\ndf = pd.DataFrame()\ndf.flags\ndf.flags.allows_duplicate_labels = False\ndf.flags['allows_duplicate_labels'] = True\n```", "code": "df = pd.DataFrame()\ndf.flags\ndf.flags.allows_duplicate_labels = False\ndf.flags['allows_duplicate_labels'] = True"}
{"text": "Instance: pandas.DataFrame.attrs\nOutput:\n```python\ndf.attrs = {\"Region\": [\"Asia\", \"Europe\", \"Africa\"]}\ndf.attrs # {'Region': ['Asia', 'Europe', 'Africa']}\n```", "code": "df.attrs = {\"Region\": [\"Asia\", \"Europe\", \"Africa\"]}\ndf.attrs # {'Region': ['Asia', 'Europe', 'Africa']}"}
{"text": "Instance: pandas.DataFrame.plot\nOutput:\n```python\nplot = df.plot(kind='scatter', x='height', y='weight', title=\"Height vs Weight Plot\")\n```", "code": "plot = df.plot(kind='scatter', x='height', y='weight', title=\"Height vs Weight Plot\")"}
{"text": "Instance: pandas.DataFrame.plot.area\nOutput:\n```python\nax = df.plot.area()\n```", "code": "ax = df.plot.area()"}
{"text": "Instance: pandas.DataFrame.plot.bar\nOutput:\n```python\nax = df.plot.bar(x='lab', y='val', rot=0)\n```", "code": "ax = df.plot.bar(x='lab', y='val', rot=0)"}
{"text": "Instance: pandas.DataFrame.plot.barh\nOutput:\n```python\nax = df.plot.barh(x='lab', y='val')\n```", "code": "ax = df.plot.barh(x='lab', y='val')"}
{"text": "Instance: pandas.DataFrame.plot.box\nOutput:\n```python\nax = df.plot.box(column=\"age\", by=\"gender\", figsize=(10, 8))\n```", "code": "ax = df.plot.box(column=\"age\", by=\"gender\", figsize=(10, 8))"}
{"text": "Instance: pandas.DataFrame.plot.density\nOutput:\n```python\nax = df.plot.kde()\n```", "code": "ax = df.plot.kde()"}
{"text": "Instance: pandas.DataFrame.plot.hexbin\nOutput:\n```python\nax = df.plot.hexbin(x='coord_x',\n                    y='coord_y',\n                    C='observations',\n                    reduce_C_function=np.sum,\n                    gridsize=10,\n                    cmap=\"viridis\")\n```", "code": "ax = df.plot.hexbin(x='coord_x',\n                    y='coord_y',\n                    C='observations',\n                    reduce_C_function=np.sum,\n                    gridsize=10,\n                    cmap=\"viridis\")"}
{"text": "Instance: pandas.DataFrame.plot.hist\nOutput:\n```python\nax = df.plot.hist(bins=12, alpha=0.5)\n```", "code": "ax = df.plot.hist(bins=12, alpha=0.5)"}
{"text": "Instance: pandas.DataFrame.plot.kde\nOutput:\n```python\nax = df.plot.kde()\n```", "code": "ax = df.plot.kde()"}
{"text": "Instance: pandas.DataFrame.plot.line\nOutput:\n```python\ndf = pd.DataFrame({\n    'temperature': [25, 28, 30, 32, 29],\n    'humidity': [60, 55, 50, 45, 55]\n})\ndf.plot.line()\n```", "code": "df = pd.DataFrame({\n    'temperature': [25, 28, 30, 32, 29],\n    'humidity': [60, 55, 50, 45, 55]\n})\ndf.plot.line()"}
{"text": "Instance: pandas.DataFrame.plot.pie\nOutput:\n```python\nplot = df.plot.pie(y='mass', figsize=(5, 5))\n```", "code": "plot = df.plot.pie(y='mass', figsize=(5, 5))"}
{"text": "Instance: pandas.DataFrame.plot.scatter\nOutput:\n```python\nax1 = df.plot.scatter(x='length', y='width', c='DarkBlue')\n```\n```python\nax2 = df.plot.scatter(x='length', y='width', c='species', colormap='viridis')\n```", "code": "ax1 = df.plot.scatter(x='length', y='width', c='DarkBlue')\nax2 = df.plot.scatter(x='length', y='width', c='species', colormap='viridis')"}
{"text": "Instance: pandas.DataFrame.boxplot\nOutput:\n```python\nboxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])\n```", "code": "boxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])"}
{"text": "Instance: pandas.DataFrame.hist\nOutput:\n```python\nhist = df.hist(bins=3)\n```", "code": "hist = df.hist(bins=3)"}
{"text": "Instance: pandas.DataFrame.sparse.density\nOutput:\n```python\ndf = pd.DataFrame({\"Science\": pd.arrays.SparseArray([0, 1, 0, 1])})\ndf.sparse.density # outputs 0.5\n```", "code": "df = pd.DataFrame({\"Science\": pd.arrays.SparseArray([0, 1, 0, 1])})\ndf.sparse.density # outputs 0.5"}
{"text": "Instance: pandas.DataFrame.sparse.from_spmatrix\nOutput:\n```python\ndf = pd.DataFrame.sparse.from_spmatrix(mat)\n```", "code": "df = pd.DataFrame.sparse.from_spmatrix(mat)"}
{"text": "Instance: pandas.DataFrame.sparse.to_coo\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": pd.arrays.SparseArray([20, 25, 0, 30])})\ncoo_matrix = df.sparse.to_coo()\n```", "code": "df = pd.DataFrame({\"Temperature\": pd.arrays.SparseArray([20, 25, 0, 30])})\ncoo_matrix = df.sparse.to_coo()"}
{"text": "Instance: pandas.DataFrame.sparse.to_dense\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": pd.arrays.SparseArray([20, 25, 0])})\ndf.sparse.to_dense()\n```", "code": "df = pd.DataFrame({\"Temperature\": pd.arrays.SparseArray([20, 25, 0])})\ndf.sparse.to_dense()"}
{"text": "Instance: pandas.DataFrame.from_dict\nOutput:\n```python\ndata = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\ndf = pd.DataFrame.from_dict(data)\n```", "code": "data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\ndf = pd.DataFrame.from_dict(data)"}
{"text": "Instance: pandas.DataFrame.from_records\nOutput:\n```python\ndata = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]\npd.DataFrame.from_records(data, columns=['num', 'letter'])\n```", "code": "data = [(3, 'a'), (2, 'b'), (1, 'c'), (0, 'd')]\npd.DataFrame.from_records(data, columns=['num', 'letter'])"}
{"text": "Instance: pandas.DataFrame.to_orc\nOutput:\n```python\ndf.to_orc('df.orc')\n```", "code": "df.to_orc('df.orc')"}
{"text": "Instance: pandas.DataFrame.to_parquet\nOutput:\n```python\ndf = pd.DataFrame(data={'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.to_parquet('sales_data.parquet', compression='snappy')\n```", "code": "df = pd.DataFrame(data={'sales': [100, 200, 300], 'revenue': [500, 600, 700]})\ndf.to_parquet('sales_data.parquet', compression='snappy')"}
{"text": "Instance: pandas.DataFrame.to_pickle\nOutput:\n```python\noriginal_df.to_pickle(\"./dummy.pkl\")\n```", "code": "original_df.to_pickle(\"./dummy.pkl\")"}
{"text": "Instance: pandas.DataFrame.to_csv\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'area_sqkm': [9833517, 9984670, 1964375]})\ndf.to_csv('countries.csv', index=False)\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'area_sqkm': [9833517, 9984670, 1964375]})\ndf.to_csv('countries.csv', index=False)"}
{"text": "Instance: pandas.DataFrame.to_hdf\nOutput:\n```python\ndf = pd.DataFrame({'Sales': [100, 200, 300], 'Profit': [20, 40, 60]}, index=['Q1', 'Q2', 'Q3'])\ndf.to_hdf('sales_data.h5', key='quarterly_data', mode='w')\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 300], 'Profit': [20, 40, 60]}, index=['Q1', 'Q2', 'Q3'])\ndf.to_hdf('sales_data.h5', key='quarterly_data', mode='w')"}
{"text": "Instance: pandas.DataFrame.to_sql\nOutput:\n```python\ndf.to_sql(name='users', con=engine, if_exists='append', index_label='id')\n```", "code": "df.to_sql(name='users', con=engine, if_exists='append', index_label='id')"}
{"text": "Instance: pandas.DataFrame.to_dict\nOutput:\n```python\ndf.to_dict() # {'subject': {'math': 90, 'history': 85}, 'student': {'Alice': 95, 'Bob': 88}}\n```", "code": "df.to_dict() # {'subject': {'math': 90, 'history': 85}, 'student': {'Alice': 95, 'Bob': 88}}"}
{"text": "Instance: pandas.DataFrame.to_excel\nOutput:\n```python\ndf1.to_excel(\"output.xlsx\")\n```", "code": "df1.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.DataFrame.to_json\nOutput:\n```python\nresult = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)\n```", "code": "result = df.to_json(orient=\"split\")\nparsed = loads(result)\ndumps(parsed, indent=4)"}
{"text": "Instance: pandas.DataFrame.to_html\nOutput:\n```python\nhtml_string = df.to_html()\n```", "code": "html_string = df.to_html()"}
{"text": "Instance: pandas.DataFrame.to_feather\nOutput:\n```python\ndf.to_feather(\"file.feather\")\n```", "code": "df.to_feather(\"file.feather\")"}
{"text": "Instance: pandas.DataFrame.to_latex\nOutput:\n```python\nprint(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))\n```", "code": "print(df.to_latex(index=False,\n                  formatters={\"name\": str.upper},\n                  float_format=\"{:.1f}\".format,\n))"}
{"text": "Instance: pandas.DataFrame.to_stata\nOutput:\n```python\ndf = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'area_sq_km': [9833517, 9984670, 1964375]})\ndf.to_stata('countries_data.dta')\n```", "code": "df = pd.DataFrame({'country': ['USA', 'Canada', 'Mexico'],\n                   'population': [328, 38, 126],\n                   'area_sq_km': [9833517, 9984670, 1964375]})\ndf.to_stata('countries_data.dta')"}
{"text": "Instance: pandas.DataFrame.to_gbq\nOutput:\n```python\ndf.to_gbq(table_id, project_id=project_id)\n```", "code": "df.to_gbq(table_id, project_id=project_id)"}
{"text": "Instance: pandas.DataFrame.to_records\nOutput:\n```python\ndf.to_records()\n```", "code": "df.to_records()"}
{"text": "Instance: pandas.DataFrame.to_string\nOutput:\n```python\nprint(df.to_string())\n```", "code": "print(df.to_string())"}
{"text": "Instance: pandas.DataFrame.to_clipboard\nOutput:\n```python\ndf.to_clipboard(sep=',', index=False)  \n```", "code": "df.to_clipboard(sep=',', index=False)"}
{"text": "Instance: pandas.DataFrame.to_markdown\nOutput:\n```python\nprint(df.to_markdown())\n```", "code": "print(df.to_markdown())"}
{"text": "Instance: pandas.DataFrame.style\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 35], 'Humidity': [50, 60, 70]})\nstyled_df = df.style\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 35], 'Humidity': [50, 60, 70]})\nstyled_df = df.style"}
{"text": "Instance: pandas.DataFrame.__dataframe__\nOutput:\n```python\ndf_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\n# Output: Index(['Temperature', 'Humidity'], dtype='object')\n\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0        60\n# 1        70\n```", "code": "df_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\n# Output: Index(['Temperature', 'Humidity'], dtype='object')\n\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0        60\n# 1        70"}
{"text": "Instance: pandas.Series.to_markdown\nOutput:\n```python\nprint(s.to_markdown())\n```", "code": "print(s.to_markdown())"}
{"text": "Instance: pandas.DataFrame\nOutput:\n```python\ndata = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)\n```", "code": "data = {'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['New York', 'Los Angeles', 'Chicago']}\ndf = pd.DataFrame(data)"}
{"text": "Instance: pandas.array\nOutput:\n```python\narr = pd.array([\"a\", None, \"c\"])\n```", "code": "arr = pd.array([\"a\", None, \"c\"])"}
{"text": "Instance: pandas.arrays.ArrowExtensionArray\nOutput:\n```python\narr = pd.array([1, 1, None], dtype=\"int64[pyarrow]\")\nprint(arr)\n# Output:\n# <ArrowExtensionArray>\n# [1, 1, <NA>]\n# Length: 3, dtype: int64[pyarrow]\n```", "code": "arr = pd.array([1, 1, None], dtype=\"int64[pyarrow]\")\nprint(arr)\n# Output:\n# <ArrowExtensionArray>\n# [1, 1, <NA>]\n# Length: 3, dtype: int64[pyarrow]"}
{"text": "Instance: pandas.ArrowDtype\nOutput:\n```python\ndtype = pd.ArrowDtype(pa.timestamp(\"s\", tz=\"America/New_York\"))\n```", "code": "dtype = pd.ArrowDtype(pa.timestamp(\"s\", tz=\"America/New_York\"))"}
{"text": "Instance: pandas.Timestamp\nOutput:\n```python\ntimestamp = pd.Timestamp(2022, 12, 25, 10, 30, 15)\n```", "code": "timestamp = pd.Timestamp(2022, 12, 25, 10, 30, 15)"}
{"text": "Instance: pandas.Timestamp.asm8\nOutput:\n```python\nts.asm8 # numpy.datetime64('2020-03-14T15:00:00.000000')\n```", "code": "ts.asm8 # numpy.datetime64('2020-03-14T15:00:00.000000')"}
{"text": "Instance: pandas.Timestamp.day\nOutput:\n```python\nts = pd.Timestamp('2022-12-31')\nday = ts.day # outputs 31\n```", "code": "ts = pd.Timestamp('2022-12-31')\nday = ts.day # outputs 31"}
{"text": "Instance: pandas.Timestamp.dayofweek\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.day_of_week # outputs 5\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.day_of_week # outputs 5"}
{"text": "Instance: pandas.Timestamp.day_of_week\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.day_of_week # outputs 5\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.day_of_week # outputs 5"}
{"text": "Instance: pandas.Timestamp.dayofyear\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.day_of_year # outputs 74\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.day_of_year # outputs 74"}
{"text": "Instance: pandas.Timestamp.day_of_year\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.day_of_year # outputs 74\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.day_of_year # outputs 74"}
{"text": "Instance: pandas.Timestamp.days_in_month\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.days_in_month # outputs 31\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.days_in_month # outputs 31"}
{"text": "Instance: pandas.Timestamp.daysinmonth\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.days_in_month # outputs 31\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.days_in_month # outputs 31"}
{"text": "Instance: pandas.Timestamp.fold\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 12:00:00')\nts.fold # 0 for a Timestamp '2022-12-31 12:00:00'\n```", "code": "ts = pd.Timestamp('2022-12-31 12:00:00')\nts.fold # 0 for a Timestamp '2022-12-31 12:00:00'"}
{"text": "Instance: pandas.Timestamp.hour\nOutput:\n```python\ntimestamp = pd.Timestamp('2022-12-31 08:15:00')\nhour = timestamp.hour # outputs 8\n```", "code": "timestamp = pd.Timestamp('2022-12-31 08:15:00')\nhour = timestamp.hour # outputs 8"}
{"text": "Instance: pandas.Timestamp.is_leap_year\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_leap_year # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_leap_year # True"}
{"text": "Instance: pandas.Timestamp.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_month_end # False\n\nts = pd.Timestamp(2020, 12, 31)\nts.is_month_end # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_month_end # False\n\nts = pd.Timestamp(2020, 12, 31)\nts.is_month_end # True"}
{"text": "Instance: pandas.Timestamp.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_month_start # False\n\nts = pd.Timestamp(2020, 1, 1)\nts.is_month_start # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_month_start # False\n\nts = pd.Timestamp(2020, 1, 1)\nts.is_month_start # True"}
{"text": "Instance: pandas.Timestamp.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_quarter_end # False\n\nts = pd.Timestamp(2020, 3, 31)\nts.is_quarter_end # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_quarter_end # False\n\nts = pd.Timestamp(2020, 3, 31)\nts.is_quarter_end # True"}
{"text": "Instance: pandas.Timestamp.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2020, 4, 1)\nts.is_quarter_start # True\n```", "code": "ts = pd.Timestamp(2020, 4, 1)\nts.is_quarter_start # True"}
{"text": "Instance: pandas.Timestamp.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_year_end # False\n\nts = pd.Timestamp(2020, 12, 31)\nts.is_year_end # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_year_end # False\n\nts = pd.Timestamp(2020, 12, 31)\nts.is_year_end # True"}
{"text": "Instance: pandas.Timestamp.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.is_year_start # False\n\nts = pd.Timestamp(2020, 1, 1)\nts.is_year_start # True\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.is_year_start # False\n\nts = pd.Timestamp(2020, 1, 1)\nts.is_year_start # True"}
{"text": "Instance: pandas.Timestamp.max\nOutput:\n```python\nmax_timestamp = pd.Timestamp.max\n```", "code": "max_timestamp = pd.Timestamp.max"}
{"text": "Instance: pandas.Timestamp.microsecond\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 23:59:59.999999')\nmicrosec = ts.microsecond # outputs 999999\n```", "code": "ts = pd.Timestamp('2022-12-31 23:59:59.999999')\nmicrosec = ts.microsecond # outputs 999999"}
{"text": "Instance: pandas.Timestamp.min\nOutput:\n```python\npd.Timestamp.min # outputs Timestamp('1677-09-21 00:12:43.145225')\n```", "code": "pd.Timestamp.min # outputs Timestamp('1677-09-21 00:12:43.145225')"}
{"text": "Instance: pandas.Timestamp.minute\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 23:59:59')\nminute = ts.minute # outputs 59\n```", "code": "ts = pd.Timestamp('2022-12-31 23:59:59')\nminute = ts.minute # outputs 59"}
{"text": "Instance: pandas.Timestamp.month\nOutput:\n```python\nts = pd.Timestamp('2022-12-25')\nmonth = ts.month # outputs 12\n```", "code": "ts = pd.Timestamp('2022-12-25')\nmonth = ts.month # outputs 12"}
{"text": "Instance: pandas.Timestamp.nanosecond\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 23:59:59.999999999')\nns = ts.nanosecond # 999999999\n```", "code": "ts = pd.Timestamp('2022-12-31 23:59:59.999999999')\nns = ts.nanosecond # 999999999"}
{"text": "Instance: pandas.Timestamp.quarter\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.quarter # outputs 1\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.quarter # outputs 1"}
{"text": "Instance: pandas.Timestamp.resolution\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 23:59:59.999999999')\nres = ts.resolution # outputs Timedelta('0 days 00:00:00.000000001')\n```", "code": "ts = pd.Timestamp('2022-12-31 23:59:59.999999999')\nres = ts.resolution # outputs Timedelta('0 days 00:00:00.000000001')"}
{"text": "Instance: pandas.Timestamp.second\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 23:59:59')\nsecond = ts.second # outputs 59\n```", "code": "ts = pd.Timestamp('2022-12-31 23:59:59')\nsecond = ts.second # outputs 59"}
{"text": "Instance: pandas.Timestamp.tz\nOutput:\n```python\nts = pd.Timestamp(1584226800, unit='s', tz='Europe/Stockholm')\nts.tz # <DstTzInfo 'Europe/Stockholm' CET+1:00:00 STD>\n```", "code": "ts = pd.Timestamp(1584226800, unit='s', tz='Europe/Stockholm')\nts.tz # <DstTzInfo 'Europe/Stockholm' CET+1:00:00 STD>"}
{"text": "Instance: pandas.Timestamp.tzinfo\nOutput:\n```python\nts = pd.Timestamp('2022-12-31 12:00:00', tz='US/Eastern')\nts.tzinfo # returns the timezone information for the timestamp\n```", "code": "ts = pd.Timestamp('2022-12-31 12:00:00', tz='US/Eastern')\nts.tzinfo # returns the timezone information for the timestamp"}
{"text": "Instance: pandas.Timestamp.unit\nOutput:\n```python\npd.Timestamp(\"2020-01-01 12:34:56\").unit # 's'\n```", "code": "pd.Timestamp(\"2020-01-01 12:34:56\").unit # 's'"}
{"text": "Instance: pandas.Timestamp.value\nOutput:\n```python\nts = pd.Timestamp('2022-12-31')\nts_value = ts.value\n```", "code": "ts = pd.Timestamp('2022-12-31')\nts_value = ts.value"}
{"text": "Instance: pandas.Timestamp.week\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.week # outputs 11\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.week # outputs 11"}
{"text": "Instance: pandas.Timestamp.weekofyear\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14)\nts.week # outputs 11\n```", "code": "ts = pd.Timestamp(2020, 3, 14)\nts.week # outputs 11"}
{"text": "Instance: pandas.Timestamp.year\nOutput:\n```python\nts = pd.Timestamp('2022-12-31')\nyear = ts.year # outputs 2022\n```", "code": "ts = pd.Timestamp('2022-12-31')\nyear = ts.year # outputs 2022"}
{"text": "Instance: pandas.Timestamp.as_unit\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 00:00:00.01')\nts.unit\n# Output: 'ms'\n\nts = ts.as_unit('s')\nts\n# Output: Timestamp('2023-01-01 00:00:00')\nts.unit\n# Output: 's'\n```", "code": "ts = pd.Timestamp('2023-01-01 00:00:00.01')\nts.unit\n# Output: 'ms'\n\nts = ts.as_unit('s')\nts\n# Output: Timestamp('2023-01-01 00:00:00')\nts.unit\n# Output: 's'"}
{"text": "Instance: pandas.Timestamp.astimezone\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651', tz='UTC')\nts.astimezone(tz='Asia/Tokyo') # Outputs Timestamp('2020-03-15 00:32:52.192548651+0900', tz='Asia/Tokyo')\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651', tz='UTC')\nts.astimezone(tz='Asia/Tokyo') # Outputs Timestamp('2020-03-15 00:32:52.192548651+0900', tz='Asia/Tokyo')"}
{"text": "Instance: pandas.Timestamp.ceil\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.ceil(freq='h') # hour\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.ceil(freq='h') # hour"}
{"text": "Instance: pandas.Timestamp.combine\nOutput:\n```python\npd.Timestamp.combine(date(2020, 3, 14), time(15, 30, 15))\n```", "code": "pd.Timestamp.combine(date(2020, 3, 14), time(15, 30, 15))"}
{"text": "Instance: pandas.Timestamp.ctime\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00.00')\nts.ctime() # 'Sun Jan  1 10:00:00 2023'\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00.00')\nts.ctime() # 'Sun Jan  1 10:00:00 2023'"}
{"text": "Instance: pandas.Timestamp.date\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00.00')\nts.date() # outputs datetime.date(2023, 1, 1)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00.00')\nts.date() # outputs datetime.date(2023, 1, 1)"}
{"text": "Instance: pandas.Timestamp.day_name\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.day_name() # outputs 'Saturday'\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.day_name() # outputs 'Saturday'"}
{"text": "Instance: pandas.Timestamp.dst\nOutput:\n```python\nts = pd.Timestamp('2000-06-01 00:00:00', tz='Europe/Brussels')\nts.dst() # outputs datetime.timedelta(seconds=3600)\n```", "code": "ts = pd.Timestamp('2000-06-01 00:00:00', tz='Europe/Brussels')\nts.dst() # outputs datetime.timedelta(seconds=3600)"}
{"text": "Instance: pandas.Timestamp.floor\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.floor(freq='h') # hour\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.floor(freq='h') # hour"}
{"text": "Instance: pandas.Timestamp.fromordinal\nOutput:\n```python\ntimestamp = pd.Timestamp.fromordinal(737425) # Timestamp('2020-01-01 00:00:00')\n```", "code": "timestamp = pd.Timestamp.fromordinal(737425) # Timestamp('2020-01-01 00:00:00')"}
{"text": "Instance: pandas.Timestamp.fromtimestamp\nOutput:\n```python\ntimestamp = pd.Timestamp.fromtimestamp(1584199972) # Timestamp('2020-03-14 15:32:52')\n```", "code": "timestamp = pd.Timestamp.fromtimestamp(1584199972) # Timestamp('2020-03-14 15:32:52')"}
{"text": "Instance: pandas.Timestamp.isocalendar\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00')\nts.isocalendar() # datetime.IsoCalendarDate(year=2022, week=52, weekday=7)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00')\nts.isocalendar() # datetime.IsoCalendarDate(year=2022, week=52, weekday=7)"}
{"text": "Instance: pandas.Timestamp.isoformat\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.isoformat() # '2020-03-14T15:32:52.192548651'\nts.isoformat(timespec='microseconds') # '2020-03-14T15:32:52.192548'\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.isoformat() # '2020-03-14T15:32:52.192548651'\nts.isoformat(timespec='microseconds') # '2020-03-14T15:32:52.192548'"}
{"text": "Instance: pandas.Timestamp.isoweekday\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00')\nts.isoweekday() # outputs 7\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00')\nts.isoweekday() # outputs 7"}
{"text": "Instance: pandas.Timestamp.month_name\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.month_name() # outputs 'March'\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.month_name() # outputs 'March'"}
{"text": "Instance: pandas.Timestamp.normalize\nOutput:\n```python\nts = pd.Timestamp(2020, 3, 14, 15, 30)\nts.normalize() # Timestamp('2020-03-14 00:00:00')\n```", "code": "ts = pd.Timestamp(2020, 3, 14, 15, 30)\nts.normalize() # Timestamp('2020-03-14 00:00:00')"}
{"text": "Instance: pandas.Timestamp.now\nOutput:\n```python\ncurrent_time = pd.Timestamp.now() # Timestamp('2022-01-05 15:30:45.123456')\n```", "code": "current_time = pd.Timestamp.now() # Timestamp('2022-01-05 15:30:45.123456')"}
{"text": "Instance: pandas.Timestamp.replace\nOutput:\n```python\nts.replace(year=1999, hour=10)\n```", "code": "ts.replace(year=1999, hour=10)"}
{"text": "Instance: pandas.Timestamp.round\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts_rounded = ts.round(freq='h') # round to the nearest hour\nprint(ts_rounded)\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts_rounded = ts.round(freq='h') # round to the nearest hour\nprint(ts_rounded)"}
{"text": "Instance: pandas.Timestamp.strftime\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.strftime('%Y-%m-%d %X') # '2020-03-14 15:32:52'\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.strftime('%Y-%m-%d %X') # '2020-03-14 15:32:52'"}
{"text": "Instance: pandas.Timestamp.strptime\nOutput:\n```python\npd.Timestamp.strptime(\"2023-01-01\", \"%d/%m/%y\")\n```", "code": "pd.Timestamp.strptime(\"2023-01-01\", \"%d/%m/%y\")"}
{"text": "Instance: pandas.Timestamp.time\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00')\nts.time() # outputs datetime.time(10, 0)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00')\nts.time() # outputs datetime.time(10, 0)"}
{"text": "Instance: pandas.Timestamp.timestamp\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548')\nts.timestamp() # 1584199972.192548\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548')\nts.timestamp() # 1584199972.192548"}
{"text": "Instance: pandas.Timestamp.timetuple\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00')\nts.timetuple() # returns time.struct_time(tm_year=2023, tm_mon=1, tm_mday=1, tm_hour=10, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=1, tm_isdst=-1)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00')\nts.timetuple() # returns time.struct_time(tm_year=2023, tm_mon=1, tm_mday=1, tm_hour=10, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=1, tm_isdst=-1)"}
{"text": "Instance: pandas.Timestamp.timetz\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.timetz() # outputs datetime.time(10, 0, tzinfo=<DstTzInfo 'Europe/Brussels' CET+1:00:00 STD>)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.timetz() # outputs datetime.time(10, 0, tzinfo=<DstTzInfo 'Europe/Brussels' CET+1:00:00 STD>)"}
{"text": "Instance: pandas.Timestamp.to_datetime64\nOutput:\n```python\nts = pd.Timestamp(year=2023, month=1, day=1, hour=10, second=15)\nts.to_datetime64() # numpy.datetime64('2023-01-01T10:00:15.000000')\n```", "code": "ts = pd.Timestamp(year=2023, month=1, day=1, hour=10, second=15)\nts.to_datetime64() # numpy.datetime64('2023-01-01T10:00:15.000000')"}
{"text": "Instance: pandas.Timestamp.to_numpy\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.to_numpy() # numpy.datetime64('2020-03-14T15:32:52.192548651')\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.to_numpy() # numpy.datetime64('2020-03-14T15:32:52.192548651')"}
{"text": "Instance: pandas.Timestamp.to_julian_date\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52')\nts.to_julian_date() # 2458923.147824074\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52')\nts.to_julian_date() # 2458923.147824074"}
{"text": "Instance: pandas.Timestamp.to_period\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.to_period(freq='Y') # Period('2020', 'Y-DEC')\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.to_period(freq='Y') # Period('2020', 'Y-DEC')"}
{"text": "Instance: pandas.Timestamp.to_pydatetime\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548')\nts.to_pydatetime() # datetime.datetime(2020, 3, 14, 15, 32, 52, 192548)\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548')\nts.to_pydatetime() # datetime.datetime(2020, 3, 14, 15, 32, 52, 192548)"}
{"text": "Instance: pandas.Timestamp.today\nOutput:\n```python\ntoday = pd.Timestamp.today() # Returns the current date and time as a Timestamp object, e.g. Timestamp('2020-11-16 22:37:39.969883')\n```", "code": "today = pd.Timestamp.today() # Returns the current date and time as a Timestamp object, e.g. Timestamp('2020-11-16 22:37:39.969883')"}
{"text": "Instance: pandas.Timestamp.toordinal\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:50')\nts.toordinal() # 738521\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:50')\nts.toordinal() # 738521"}
{"text": "Instance: pandas.Timestamp.tz_convert\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651', tz='UTC')\nts.tz_convert(tz='Asia/Tokyo') # Outputs Timestamp('2020-03-15 00:32:52.192548651+0900', tz='Asia/Tokyo')\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651', tz='UTC')\nts.tz_convert(tz='Asia/Tokyo') # Outputs Timestamp('2020-03-15 00:32:52.192548651+0900', tz='Asia/Tokyo')"}
{"text": "Instance: pandas.Timestamp.tz_localize\nOutput:\n```python\nts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.tz_localize(tz='Europe/Stockholm') # Outputs Timestamp('2020-03-14 15:32:52.192548651+0100', tz='Europe/Stockholm')\n```", "code": "ts = pd.Timestamp('2020-03-14T15:32:52.192548651')\nts.tz_localize(tz='Europe/Stockholm') # Outputs Timestamp('2020-03-14 15:32:52.192548651+0100', tz='Europe/Stockholm')"}
{"text": "Instance: pandas.Timestamp.tzname\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.tzname() # outputs 'CET'\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.tzname() # outputs 'CET'"}
{"text": "Instance: pandas.Timestamp.utcfromtimestamp\nOutput:\n```python\npd.Timestamp.utcfromtimestamp(1584199972) # Timestamp('2020-03-14 15:32:52+0000', tz='UTC')\n```", "code": "pd.Timestamp.utcfromtimestamp(1584199972) # Timestamp('2020-03-14 15:32:52+0000', tz='UTC')"}
{"text": "Instance: pandas.Timestamp.utcnow\nOutput:\n```python\npd.Timestamp.utcnow() # Timestamp('2020-11-16 22:50:18.092888+0000', tz='UTC')\n```", "code": "pd.Timestamp.utcnow() # Timestamp('2020-11-16 22:50:18.092888+0000', tz='UTC')"}
{"text": "Instance: pandas.Timestamp.utcoffset\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.utcoffset() # outputs datetime.timedelta(seconds=3600)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.utcoffset() # outputs datetime.timedelta(seconds=3600)"}
{"text": "Instance: pandas.Timestamp.utctimetuple\nOutput:\n```python\nts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.utctimetuple() # time.struct_time(tm_year=2023, tm_mon=1, tm_mday=1, tm_hour=9, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=1, tm_isdst=0)\n```", "code": "ts = pd.Timestamp('2023-01-01 10:00:00', tz='Europe/Brussels')\nts.utctimetuple() # time.struct_time(tm_year=2023, tm_mon=1, tm_mday=1, tm_hour=9, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=1, tm_isdst=0)"}
{"text": "Instance: pandas.Timestamp.weekday\nOutput:\n```python\nts = pd.Timestamp('2023-01-01')\nts.weekday() # outputs 6\n```", "code": "ts = pd.Timestamp('2023-01-01')\nts.weekday() # outputs 6"}
{"text": "Instance: pandas.arrays.DatetimeArray\nOutput:\n```python\npd.arrays.DatetimeArray._from_sequence(pd.DatetimeIndex(['2023-01-01', '2023-01-02'], freq='D'))\n```", "code": "pd.arrays.DatetimeArray._from_sequence(pd.DatetimeIndex(['2023-01-01', '2023-01-02'], freq='D'))"}
{"text": "Instance: pandas.DatetimeTZDtype\nOutput:\n```python\ndtype = pd.DatetimeTZDtype(tz=ZoneInfo('Asia/Tokyo'))\n```", "code": "dtype = pd.DatetimeTZDtype(tz=ZoneInfo('Asia/Tokyo'))"}
{"text": "Instance: pandas.Timedelta\nOutput:\n```python\ntd = pd.Timedelta(1, \"d\") # creates a Timedelta object representing 1 day\n```", "code": "td = pd.Timedelta(1, \"d\") # creates a Timedelta object representing 1 day"}
{"text": "Instance: pandas.Timedelta.asm8\nOutput:\n```python\ntd = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.asm8 # numpy.timedelta64(86520000003042,'ns')\n```", "code": "td = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.asm8 # numpy.timedelta64(86520000003042,'ns')"}
{"text": "Instance: pandas.Timedelta.components\nOutput:\n```python\ntd = pd.Timedelta('2 day 4 min 3 us 42 ns')\ntd.components\n```", "code": "td = pd.Timedelta('2 day 4 min 3 us 42 ns')\ntd.components"}
{"text": "Instance: pandas.Timedelta.days\nOutput:\n```python\ntd = pd.Timedelta(1, \"d\")\ntd.days # 1\n\ntd = pd.Timedelta('4 min 3 us 42 ns')\ntd.days # 0\n```", "code": "td = pd.Timedelta(1, \"d\")\ntd.days # 1\n\ntd = pd.Timedelta('4 min 3 us 42 ns')\ntd.days # 0"}
{"text": "Instance: pandas.Timedelta.max\nOutput:\n```python\nmax_timedelta = pd.Timedelta.max\n```", "code": "max_timedelta = pd.Timedelta.max"}
{"text": "Instance: pandas.Timedelta.microseconds\nOutput:\n```python\ntd = pd.Timedelta('1 days 05:30:00.000005')\nmicroseconds = td.microseconds # outputs 5\n```", "code": "td = pd.Timedelta('1 days 05:30:00.000005')\nmicroseconds = td.microseconds # outputs 5"}
{"text": "Instance: pandas.Timedelta.min\nOutput:\n```python\npd.Timedelta.min # outputs Timedelta('-106752 days +00:12:43.145224')\n```", "code": "pd.Timedelta.min # outputs Timedelta('-106752 days +00:12:43.145224')"}
{"text": "Instance: pandas.Timedelta.nanoseconds\nOutput:\n```python\ntd = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.nanoseconds # 42\n\ntd = pd.Timedelta(42, unit='ns')\ntd.nanoseconds # 42\n```", "code": "td = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.nanoseconds # 42\n\ntd = pd.Timedelta(42, unit='ns')\ntd.nanoseconds # 42"}
{"text": "Instance: pandas.Timedelta.resolution\nOutput:\n```python\ntd = pd.Timedelta('1 days 2 hours 3 minutes 4 seconds')\ntd.resolution # outputs 'nanoseconds'\n```", "code": "td = pd.Timedelta('1 days 2 hours 3 minutes 4 seconds')\ntd.resolution # outputs 'nanoseconds'"}
{"text": "Instance: pandas.Timedelta.seconds\nOutput:\n```python\ntd = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.seconds # outputs 120\n\ntd = pd.Timedelta(42, unit='s')\ntd.seconds # outputs 42\n```", "code": "td = pd.Timedelta('1 days 2 min 3 us 42 ns')\ntd.seconds # outputs 120\n\ntd = pd.Timedelta(42, unit='s')\ntd.seconds # outputs 42"}
{"text": "Instance: pandas.Timedelta.unit\nOutput:\n```python\ntd = pd.Timedelta('1 days 1 hours 30 minutes')\nunit = td.unit # outputs 's'\n```", "code": "td = pd.Timedelta('1 days 1 hours 30 minutes')\nunit = td.unit # outputs 's'"}
{"text": "Instance: pandas.Timedelta.value\nOutput:\n```python\ntd = pd.Timedelta(days=5)\nvalue = td.value # outputs the value of the Timedelta in nanoseconds\n```", "code": "td = pd.Timedelta(days=5)\nvalue = td.value # outputs the value of the Timedelta in nanoseconds"}
{"text": "Instance: pandas.Timedelta.view\nOutput:\n```python\ntd.view(int) # 259200000000000\n```", "code": "td.view(int) # 259200000000000"}
{"text": "Instance: pandas.Timedelta.as_unit\nOutput:\n```python\ntd = pd.Timedelta('1001ms')\ntd.as_unit('s') # Timedelta('0 days 00:00:01')\n```", "code": "td = pd.Timedelta('1001ms')\ntd.as_unit('s') # Timedelta('0 days 00:00:01')"}
{"text": "Instance: pandas.Timedelta.ceil\nOutput:\n```python\ntd = pd.Timedelta('1001ms')\ntd.ceil('s') # Timedelta('0 days 00:00:02')\n```", "code": "td = pd.Timedelta('1001ms')\ntd.ceil('s') # Timedelta('0 days 00:00:02')"}
{"text": "Instance: pandas.Timedelta.floor\nOutput:\n```python\ntd = pd.Timedelta('1001ms')\ntd.floor('s') # Timedelta('0 days 00:00:01')\n```", "code": "td = pd.Timedelta('1001ms')\ntd.floor('s') # Timedelta('0 days 00:00:01')"}
{"text": "Instance: pandas.Timedelta.isoformat\nOutput:\n```python\ntd = pd.Timedelta(days=6, minutes=50, seconds=3, milliseconds=10, microseconds=10, nanoseconds=12)\ntd.isoformat() # 'P6DT0H50M3.010010012S'\n```", "code": "td = pd.Timedelta(days=6, minutes=50, seconds=3, milliseconds=10, microseconds=10, nanoseconds=12)\ntd.isoformat() # 'P6DT0H50M3.010010012S'"}
{"text": "Instance: pandas.Timedelta.round\nOutput:\n```python\ntd = pd.Timedelta('1001ms')\ntd.round('s') # Timedelta('0 days 00:00:01')\n```", "code": "td = pd.Timedelta('1001ms')\ntd.round('s') # Timedelta('0 days 00:00:01')"}
{"text": "Instance: pandas.Timedelta.to_pytimedelta\nOutput:\n```python\ntd = pd.Timedelta('3D')\ntd.to_pytimedelta() # outputs datetime.timedelta(days=3)\n```", "code": "td = pd.Timedelta('3D')\ntd.to_pytimedelta() # outputs datetime.timedelta(days=3)"}
{"text": "Instance: pandas.Timedelta.to_timedelta64\nOutput:\n```python\ntd = pd.Timedelta('3D')\ntd.to_timedelta64() # numpy.timedelta64(259200000000000,'ns')\n```", "code": "td = pd.Timedelta('3D')\ntd.to_timedelta64() # numpy.timedelta64(259200000000000,'ns')"}
{"text": "Instance: pandas.Timedelta.to_numpy\nOutput:\n```python\ntd = pd.Timedelta('3D')\ntd.to_numpy() # numpy.timedelta64(259200000000000,'ns')\n```", "code": "td = pd.Timedelta('3D')\ntd.to_numpy() # numpy.timedelta64(259200000000000,'ns')"}
{"text": "Instance: pandas.Timedelta.total_seconds\nOutput:\n```python\ntd = pd.Timedelta('1min')\nseconds = td.total_seconds() # returns 60.0\n```", "code": "td = pd.Timedelta('1min')\nseconds = td.total_seconds() # returns 60.0"}
{"text": "Instance: pandas.arrays.TimedeltaArray\nOutput:\n```python\ntimedelta_array = pd.arrays.TimedeltaArray._from_sequence(pd.TimedeltaIndex(['1h', '2h']))\n```", "code": "timedelta_array = pd.arrays.TimedeltaArray._from_sequence(pd.TimedeltaIndex(['1h', '2h']))"}
{"text": "Instance: pandas.Period\nOutput:\n```python\nperiod = pd.Period('2012-1-1', freq='D')\nperiod # Period('2012-01-01', 'D')\n```", "code": "period = pd.Period('2012-1-1', freq='D')\nperiod # Period('2012-01-01', 'D')"}
{"text": "Instance: pandas.Period.day\nOutput:\n```python\np = pd.Period(\"2018-03-11\", freq='h')\np.day # outputs 11\n```", "code": "p = pd.Period(\"2018-03-11\", freq='h')\np.day # outputs 11"}
{"text": "Instance: pandas.Period.dayofweek\nOutput:\n```python\nper = pd.Period('2017-12-31 22:00', 'h')\nper.day_of_week # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.day_of_week # outputs 2\n```", "code": "per = pd.Period('2017-12-31 22:00', 'h')\nper.day_of_week # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.day_of_week # outputs 2"}
{"text": "Instance: pandas.Period.day_of_week\nOutput:\n```python\nper = pd.Period('2017-12-31 22:00', 'h')\nper.day_of_week # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.day_of_week # outputs 2\n```", "code": "per = pd.Period('2017-12-31 22:00', 'h')\nper.day_of_week # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.day_of_week # outputs 2"}
{"text": "Instance: pandas.Period.dayofyear\nOutput:\n```python\nperiod = pd.Period(\"2015-10-23\", freq='h')\nperiod.day_of_year # outputs 296\n\nperiod = pd.Period(\"2012-12-31\", freq='D')\nperiod.day_of_year # outputs 366\n\nperiod = pd.Period(\"2013-01-01\", freq='D')\nperiod.day_of_year # outputs 1\n```", "code": "period = pd.Period(\"2015-10-23\", freq='h')\nperiod.day_of_year # outputs 296\n\nperiod = pd.Period(\"2012-12-31\", freq='D')\nperiod.day_of_year # outputs 366\n\nperiod = pd.Period(\"2013-01-01\", freq='D')\nperiod.day_of_year # outputs 1"}
{"text": "Instance: pandas.Period.day_of_year\nOutput:\n```python\nperiod = pd.Period(\"2015-10-23\", freq='h')\nperiod.day_of_year # outputs 296\n\nperiod = pd.Period(\"2012-12-31\", freq='D')\nperiod.day_of_year # outputs 366\n\nperiod = pd.Period(\"2013-01-01\", freq='D')\nperiod.day_of_year # outputs 1\n```", "code": "period = pd.Period(\"2015-10-23\", freq='h')\nperiod.day_of_year # outputs 296\n\nperiod = pd.Period(\"2012-12-31\", freq='D')\nperiod.day_of_year # outputs 366\n\nperiod = pd.Period(\"2013-01-01\", freq='D')\nperiod.day_of_year # outputs 1"}
{"text": "Instance: pandas.Period.days_in_month\nOutput:\n```python\np = pd.Period('2018-2-17')\np.days_in_month # outputs 28\n\npd.Period('2018-03-01').days_in_month # outputs 31\n\np = pd.Period('2016-2-17')\np.days_in_month # outputs 29\n```", "code": "p = pd.Period('2018-2-17')\np.days_in_month # outputs 28\n\npd.Period('2018-03-01').days_in_month # outputs 31\n\np = pd.Period('2016-2-17')\np.days_in_month # outputs 29"}
{"text": "Instance: pandas.Period.daysinmonth\nOutput:\n```python\np = pd.Period(\"2018-03-11\", freq='h')\np.daysinmonth # outputs 31\n```", "code": "p = pd.Period(\"2018-03-11\", freq='h')\np.daysinmonth # outputs 31"}
{"text": "Instance: pandas.Period.end_time\nOutput:\n```python\nperiod = pd.Period('2020-01', 'D')\nend_time = period.end_time\n```", "code": "period = pd.Period('2020-01', 'D')\nend_time = period.end_time"}
{"text": "Instance: pandas.Period.freq\nOutput:\n```python\nperiod = pd.Period('2022-01', freq='M')\nperiod.freq # outputs 'M'\n```", "code": "period = pd.Period('2022-01', freq='M')\nperiod.freq # outputs 'M'"}
{"text": "Instance: pandas.Period.freqstr\nOutput:\n```python\npd.Period('2020-01', 'D').freqstr # 'D'\n```", "code": "pd.Period('2020-01', 'D').freqstr # 'D'"}
{"text": "Instance: pandas.Period.hour\nOutput:\n```python\np = pd.Period(\"2018-03-11 13:03:12.050000\")\np.hour # outputs 13\n\np = pd.Period(\"2018-03-11\", freq=\"M\")\np.hour # outputs 0\n```", "code": "p = pd.Period(\"2018-03-11 13:03:12.050000\")\np.hour # outputs 13\n\np = pd.Period(\"2018-03-11\", freq=\"M\")\np.hour # outputs 0"}
{"text": "Instance: pandas.Period.is_leap_year\nOutput:\n```python\nperiod = pd.Period('2022-01', 'M')\nperiod.is_leap_year # False\n\nperiod = pd.Period('2020-01', 'M')\nperiod.is_leap_year # True\n```", "code": "period = pd.Period('2022-01', 'M')\nperiod.is_leap_year # False\n\nperiod = pd.Period('2020-01', 'M')\nperiod.is_leap_year # True"}
{"text": "Instance: pandas.Period.minute\nOutput:\n```python\np = pd.Period(\"2018-03-11 13:03:12.050000\")\np.minute # outputs 3\n```", "code": "p = pd.Period(\"2018-03-11 13:03:12.050000\")\np.minute # outputs 3"}
{"text": "Instance: pandas.Period.month\nOutput:\n```python\nperiod = pd.Period('2022-01', 'M')\nperiod.month # outputs 1\n```", "code": "period = pd.Period('2022-01', 'M')\nperiod.month # outputs 1"}
{"text": "Instance: pandas.Period.ordinal\nOutput:\n```python\nperiod = pd.Period('2021-10-15')\nordinal_value = period.ordinal # returns the ordinal representation of the period, e.g. 737999\n```", "code": "period = pd.Period('2021-10-15')\nordinal_value = period.ordinal # returns the ordinal representation of the period, e.g. 737999"}
{"text": "Instance: pandas.Period.quarter\nOutput:\n```python\nperiod = pd.Period('2022-04', 'M')\nquarter = period.quarter # outputs 2\n```", "code": "period = pd.Period('2022-04', 'M')\nquarter = period.quarter # outputs 2"}
{"text": "Instance: pandas.Period.qyear\nOutput:\n```python\nper = pd.Period('2018Q1', freq='Q')\nper.qyear # outputs 2018\n```", "code": "per = pd.Period('2018Q1', freq='Q')\nper.qyear # outputs 2018"}
{"text": "Instance: pandas.Period.second\nOutput:\n```python\np = pd.Period(\"2018-03-11 13:03:12.050000\")\np.second # outputs 12\n```", "code": "p = pd.Period(\"2018-03-11 13:03:12.050000\")\np.second # outputs 12"}
{"text": "Instance: pandas.Period.start_time\nOutput:\n```python\nperiod.start_time # Timestamp('2012-01-01 00:00:00')\n```", "code": "period.start_time # Timestamp('2012-01-01 00:00:00')"}
{"text": "Instance: pandas.Period.week\nOutput:\n```python\np = pd.Period(\"2018-03-11\", \"h\")\np.week # outputs 10\n\np = pd.Period(\"2018-02-01\", \"D\")\np.week # outputs 5\n\np = pd.Period(\"2018-01-06\", \"D\")\np.week # outputs 1\n```", "code": "p = pd.Period(\"2018-03-11\", \"h\")\np.week # outputs 10\n\np = pd.Period(\"2018-02-01\", \"D\")\np.week # outputs 5\n\np = pd.Period(\"2018-01-06\", \"D\")\np.week # outputs 1"}
{"text": "Instance: pandas.Period.weekday\nOutput:\n```python\nper = pd.Period('2017-12-31 22:00', 'h')\nper.dayofweek # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.dayofweek # outputs 2\n```", "code": "per = pd.Period('2017-12-31 22:00', 'h')\nper.dayofweek # outputs 6\n\nper = pd.Period('2018-01', 'M')\nper.dayofweek # outputs 2"}
{"text": "Instance: pandas.Period.weekofyear\nOutput:\n```python\np = pd.Period(\"2018-03-11\", \"h\")\np.weekofyear # outputs 10\n\np = pd.Period(\"2018-02-01\", \"D\")\np.weekofyear # outputs 5\n\np = pd.Period(\"2018-01-06\", \"D\")\np.weekofyear # outputs 1\n```", "code": "p = pd.Period(\"2018-03-11\", \"h\")\np.weekofyear # outputs 10\n\np = pd.Period(\"2018-02-01\", \"D\")\np.weekofyear # outputs 5\n\np = pd.Period(\"2018-01-06\", \"D\")\np.weekofyear # outputs 1"}
{"text": "Instance: pandas.Period.year\nOutput:\n```python\nperiod = pd.Period('2022-01', 'M')\nperiod.year # 2022\n```", "code": "period = pd.Period('2022-01', 'M')\nperiod.year # 2022"}
{"text": "Instance: pandas.Period.asfreq\nOutput:\n```python\nperiod = pd.Period('2023-1-1', freq='D')\nperiod.asfreq('h') # Output: Period('2023-01-01 23:00', 'h')\n```", "code": "period = pd.Period('2023-1-1', freq='D')\nperiod.asfreq('h') # Output: Period('2023-01-01 23:00', 'h')"}
{"text": "Instance: pandas.Period.now\nOutput:\n```python\ncurrent_period = pd.Period.now('h') # Period('2023-06-12 11:00', 'h')\n```", "code": "current_period = pd.Period.now('h') # Period('2023-06-12 11:00', 'h')"}
{"text": "Instance: pandas.Period.strftime\nOutput:\n```python\na = Period(freq='Q-JUL', year=2006, quarter=1)\na.strftime('%F-Q%q') # '2006-Q1'\n```", "code": "a = Period(freq='Q-JUL', year=2006, quarter=1)\na.strftime('%F-Q%q') # '2006-Q1'"}
{"text": "Instance: pandas.Period.to_timestamp\nOutput:\n```python\nperiod = pd.Period('2023-1-1', freq='D')\ntimestamp = period.to_timestamp()\ntimestamp # Timestamp('2023-01-01 00:00:00')\n```", "code": "period = pd.Period('2023-1-1', freq='D')\ntimestamp = period.to_timestamp()\ntimestamp # Timestamp('2023-01-01 00:00:00')"}
{"text": "Instance: pandas.arrays.PeriodArray\nOutput:\n```python\nperiod_array = pd.arrays.PeriodArray(pd.PeriodIndex(['2023-01-01', '2023-01-02'], freq='D'))\n```", "code": "period_array = pd.arrays.PeriodArray(pd.PeriodIndex(['2023-01-01', '2023-01-02'], freq='D'))"}
{"text": "Instance: pandas.PeriodDtype\nOutput:\n```python\ndtype = pd.PeriodDtype(freq='D')\n```", "code": "dtype = pd.PeriodDtype(freq='D')"}
{"text": "Instance: pandas.Interval\nOutput:\n```python\niv = pd.Interval(left=0, right=5)\niv # Interval(0, 5, closed='right')\n\n2.5 in iv # True\npd.Interval(left=2, right=5, closed='both') in iv # True\n\niv.length # 5\n\nshifted_iv = iv + 3\nshifted_iv # Interval(3, 8, closed='right')\n\nyear_2017 = pd.Interval(pd.Timestamp('2017-01-01 00:00:00'), pd.Timestamp('2018-01-01 00:00:00'), closed='left')\npd.Timestamp('2017-01-01 00:00') in year_2017 # True\nyear_2017.length # Timedelta('365 days 00:00:00')\n```", "code": "iv = pd.Interval(left=0, right=5)\niv # Interval(0, 5, closed='right')\n\n2.5 in iv # True\npd.Interval(left=2, right=5, closed='both') in iv # True\n\niv.length # 5\n\nshifted_iv = iv + 3\nshifted_iv # Interval(3, 8, closed='right')\n\nyear_2017 = pd.Interval(pd.Timestamp('2017-01-01 00:00:00'), pd.Timestamp('2018-01-01 00:00:00'), closed='left')\npd.Timestamp('2017-01-01 00:00') in year_2017 # True\nyear_2017.length # Timedelta('365 days 00:00:00')"}
{"text": "Instance: pandas.Interval.closed\nOutput:\n```python\ninterval = pd.Interval(left=1, right=2, closed='left')\ninterval.closed # 'left'\n```", "code": "interval = pd.Interval(left=1, right=2, closed='left')\ninterval.closed # 'left'"}
{"text": "Instance: pandas.Interval.closed_left\nOutput:\n```python\niv = pd.Interval(0, 5, closed='left')\niv.closed_left # True\n```", "code": "iv = pd.Interval(0, 5, closed='left')\niv.closed_left # True"}
{"text": "Instance: pandas.Interval.closed_right\nOutput:\n```python\niv = pd.Interval(0, 5, closed='both')\niv.closed_right # True\n\niv = pd.Interval(0, 5, closed='left')\niv.closed_right # False\n```", "code": "iv = pd.Interval(0, 5, closed='both')\niv.closed_right # True\n\niv = pd.Interval(0, 5, closed='left')\niv.closed_right # False"}
{"text": "Instance: pandas.Interval.is_empty\nOutput:\n```python\npd.Interval(0, 1, closed='right').is_empty # False\n```", "code": "pd.Interval(0, 1, closed='right').is_empty # False"}
{"text": "Instance: pandas.Interval.left\nOutput:\n```python\ninterval = pd.Interval(left=1, right=2, closed='left')\ninterval.left # outputs 1\n```", "code": "interval = pd.Interval(left=1, right=2, closed='left')\ninterval.left # outputs 1"}
{"text": "Instance: pandas.Interval.length\nOutput:\n```python\ninterval = pd.Interval(left=1, right=2, closed='left')\ninterval.length # 1\n```", "code": "interval = pd.Interval(left=1, right=2, closed='left')\ninterval.length # 1"}
{"text": "Instance: pandas.Interval.mid\nOutput:\n```python\niv = pd.Interval(0, 5)\nmid = iv.mid # outputs 2.5\n```", "code": "iv = pd.Interval(0, 5)\nmid = iv.mid # outputs 2.5"}
{"text": "Instance: pandas.Interval.open_left\nOutput:\n```python\niv = pd.Interval(0, 5, closed='neither')\niv.open_left # True\n\niv = pd.Interval(0, 5, closed='both')\niv.open_left # False\n```", "code": "iv = pd.Interval(0, 5, closed='neither')\niv.open_left # True\n\niv = pd.Interval(0, 5, closed='both')\niv.open_left # False"}
{"text": "Instance: pandas.Interval.open_right\nOutput:\n```python\niv = pd.Interval(0, 5, closed='left')\niv.open_right # True\n\niv = pd.Interval(0, 5)\niv.open_right # False\n```", "code": "iv = pd.Interval(0, 5, closed='left')\niv.open_right # True\n\niv = pd.Interval(0, 5)\niv.open_right # False"}
{"text": "Instance: pandas.Interval.overlaps\nOutput:\n```python\ni1 = pd.Interval(0, 2)\ni2 = pd.Interval(1, 3)\ni1.overlaps(i2) # True\n\ni3 = pd.Interval(4, 5)\ni1.overlaps(i3) # False\n\ni4 = pd.Interval(0, 1, closed='both')\ni5 = pd.Interval(1, 2, closed='both')\ni4.overlaps(i5) # True\n\ni6 = pd.Interval(1, 2, closed='neither')\ni4.overlaps(i6) # False\n```", "code": "i1 = pd.Interval(0, 2)\ni2 = pd.Interval(1, 3)\ni1.overlaps(i2) # True\n\ni3 = pd.Interval(4, 5)\ni1.overlaps(i3) # False\n\ni4 = pd.Interval(0, 1, closed='both')\ni5 = pd.Interval(1, 2, closed='both')\ni4.overlaps(i5) # True\n\ni6 = pd.Interval(1, 2, closed='neither')\ni4.overlaps(i6) # False"}
{"text": "Instance: pandas.Interval.right\nOutput:\n```python\ninterval = pd.Interval(left=1, right=2, closed='left')\ninterval.right # outputs 2\n```", "code": "interval = pd.Interval(left=1, right=2, closed='left')\ninterval.right # outputs 2"}
{"text": "Instance: pandas.arrays.IntervalArray\nOutput:\n```python\narr = pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])\n```", "code": "arr = pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])"}
{"text": "Instance: pandas.IntervalDtype\nOutput:\n```python\ndtype = pd.IntervalDtype(subtype='int64', closed='both') # interval[int64, both]\n```", "code": "dtype = pd.IntervalDtype(subtype='int64', closed='both') # interval[int64, both]"}
{"text": "Instance: pandas.arrays.IntegerArray\nOutput:\n```python\nint_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())\nint_array\n```", "code": "int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())\nint_array"}
{"text": "Instance: pandas.Int8Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\nser.dtype\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())\nser.dtype"}
{"text": "Instance: pandas.Int16Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\nser.dtype # Int16Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())\nser.dtype # Int16Dtype()"}
{"text": "Instance: pandas.Int32Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\nser.dtype # Int32Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())\nser.dtype # Int32Dtype()"}
{"text": "Instance: pandas.Int64Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\nser.dtype # Int64Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())\nser.dtype # Int64Dtype()"}
{"text": "Instance: pandas.UInt8Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\nser.dtype # outputs UInt8Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())\nser.dtype # outputs UInt8Dtype()"}
{"text": "Instance: pandas.UInt16Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\nser.dtype # outputs UInt16Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())\nser.dtype # outputs UInt16Dtype()"}
{"text": "Instance: pandas.UInt32Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\nser.dtype # outputs UInt32Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())\nser.dtype # outputs UInt32Dtype()"}
{"text": "Instance: pandas.UInt64Dtype\nOutput:\n```python\nser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\nser.dtype # outputs UInt64Dtype()\n```", "code": "ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())\nser.dtype # outputs UInt64Dtype()"}
{"text": "Instance: pandas.arrays.FloatingArray\nOutput:\n```python\narr = pd.array([0.1, None, 0.3], dtype=pd.Float32Dtype())\nprint(arr)\n```\n```python\narr = pd.array([0.1, None, 0.3], dtype=\"Float32\")\nprint(arr)\n```", "code": "arr = pd.array([0.1, None, 0.3], dtype=pd.Float32Dtype())\nprint(arr)\narr = pd.array([0.1, None, 0.3], dtype=\"Float32\")\nprint(arr)"}
{"text": "Instance: pandas.Float32Dtype\nOutput:\n```python\nser = pd.Series([2.25, pd.NA], dtype=pd.Float32Dtype())\nser.dtype\n```", "code": "ser = pd.Series([2.25, pd.NA], dtype=pd.Float32Dtype())\nser.dtype"}
{"text": "Instance: pandas.Float64Dtype\nOutput:\n```python\nser = pd.Series([2.25, pd.NA], dtype=pd.Float64Dtype())\nser.dtype # outputs Float64Dtype()\n```", "code": "ser = pd.Series([2.25, pd.NA], dtype=pd.Float64Dtype())\nser.dtype # outputs Float64Dtype()"}
{"text": "Instance: pandas.CategoricalDtype\nOutput:\n```python\nt = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)\npd.Series(['a', 'b', 'a', 'c'], dtype=t)\n```", "code": "t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)\npd.Series(['a', 'b', 'a', 'c'], dtype=t)"}
{"text": "Instance: pandas.CategoricalDtype.categories\nOutput:\n```python\ncat_type.categories # Index(['a', 'b'], dtype='object')\n```", "code": "cat_type.categories # Index(['a', 'b'], dtype='object')"}
{"text": "Instance: pandas.CategoricalDtype.ordered\nOutput:\n```python\ncat_type = pd.CategoricalDtype(categories=['a', 'b'], ordered=True)\ncat_type.ordered # True\n\ncat_type = pd.CategoricalDtype(categories=['a', 'b'], ordered=False)\ncat_type.ordered # False\n```", "code": "cat_type = pd.CategoricalDtype(categories=['a', 'b'], ordered=True)\ncat_type.ordered # True\n\ncat_type = pd.CategoricalDtype(categories=['a', 'b'], ordered=False)\ncat_type.ordered # False"}
{"text": "Instance: pandas.Categorical\nOutput:\n```python\nc = pd.Categorical(['x', 'y', 'z', 'x', 'y', 'z'], ordered=True, categories=['z', 'y', 'x'])\nc\n# Output: ['x', 'y', 'z', 'x', 'y', 'z']\n# Categories (3, object): ['z' < 'y' < 'x']\n```", "code": "c = pd.Categorical(['x', 'y', 'z', 'x', 'y', 'z'], ordered=True, categories=['z', 'y', 'x'])\nc\n# Output: ['x', 'y', 'z', 'x', 'y', 'z']\n# Categories (3, object): ['z' < 'y' < 'x']"}
{"text": "Instance: pandas.Categorical.from_codes\nOutput:\n```python\ndtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\npd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n# Output: ['a', 'b', 'a', 'b']\n# Categories (2, object): ['a' < 'b']\n```", "code": "dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\npd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n# Output: ['a', 'b', 'a', 'b']\n# Categories (2, object): ['a' < 'b']"}
{"text": "Instance: pandas.Categorical.dtype\nOutput:\n```python\ncat.dtype # CategoricalDtype(categories=['a', 'b'], ordered=True, categories_dtype=object)\n```", "code": "cat.dtype # CategoricalDtype(categories=['a', 'b'], ordered=True, categories_dtype=object)"}
{"text": "Instance: pandas.Categorical.categories\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.categories # Index(['a', 'b', 'c'], dtype='object')\n```", "code": "ser = pd.Series(['a', 'b', 'c', 'a'], dtype='category')\nser.cat.categories # Index(['a', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Categorical.ordered\nOutput:\n```python\ncat = pd.Categorical(['a', 'b', 'c'], ordered=True)\ncat.ordered # True\n```", "code": "cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\ncat.ordered # True"}
{"text": "Instance: pandas.Categorical.codes\nOutput:\n```python\ncat = pd.Categorical(['a', 'b'], ordered=True)\ncat.codes # array([0, 1], dtype=int8)\n```", "code": "cat = pd.Categorical(['a', 'b'], ordered=True)\ncat.codes # array([0, 1], dtype=int8)"}
{"text": "Instance: pandas.Categorical.__array__\nOutput:\n```python\ncat = pd.Categorical(['a', 'b'], ordered=True)\nnp.asarray(cat) # array(['a', 'b'], dtype=object)\n```", "code": "cat = pd.Categorical(['a', 'b'], ordered=True)\nnp.asarray(cat) # array(['a', 'b'], dtype=object)"}
{"text": "Instance: pandas.arrays.SparseArray\nOutput:\n```python\narr = SparseArray([0, 0, 1, 2])\narr\n# Output: [0, 0, 1, 2]\n```", "code": "arr = SparseArray([0, 0, 1, 2])\narr\n# Output: [0, 0, 1, 2]"}
{"text": "Instance: pandas.SparseDtype\nOutput:\n```python\nser = pd.Series([1, 0, 0], dtype=pd.SparseDtype(dtype=int, fill_value=0))\nser.sparse.density # outputs 0.3333333333333333\n```", "code": "ser = pd.Series([1, 0, 0], dtype=pd.SparseDtype(dtype=int, fill_value=0))\nser.sparse.density # outputs 0.3333333333333333"}
{"text": "Instance: pandas.arrays.StringArray\nOutput:\n```python\narr = pd.array(['This is', 'some text', None, 'data.'], dtype=\"string\")\n```", "code": "arr = pd.array(['This is', 'some text', None, 'data.'], dtype=\"string\")"}
{"text": "Instance: pandas.arrays.ArrowStringArray\nOutput:\n```python\narr = pd.array(['This is', 'some text', None, 'data.'], dtype=\"string[pyarrow]\")\nprint(arr)\n```\n", "code": "arr = pd.array(['This is', 'some text', None, 'data.'], dtype=\"string[pyarrow]\")\nprint(arr)"}
{"text": "Instance: pandas.StringDtype\nOutput:\n```python\ndtype = pd.StringDtype()\n```", "code": "dtype = pd.StringDtype()"}
{"text": "Instance: pandas.arrays.BooleanArray\nOutput:\n```python\narr = pd.array([True, False, None], dtype=\"boolean\")\nprint(arr)\n```\n", "code": "arr = pd.array([True, False, None], dtype=\"boolean\")\nprint(arr)"}
{"text": "Instance: pandas.BooleanDtype\nOutput:\n```python\ndtype = pd.BooleanDtype()\n```", "code": "dtype = pd.BooleanDtype()"}
{"text": "Instance: pandas.api.types.union_categoricals\nOutput:\n```python\na = pd.Categorical([\"b\", \"c\"])\nb = pd.Categorical([\"a\", \"b\"])\npd.api.types.union_categoricals([a, b])\n```", "code": "a = pd.Categorical([\"b\", \"c\"])\nb = pd.Categorical([\"a\", \"b\"])\npd.api.types.union_categoricals([a, b])"}
{"text": "Instance: pandas.api.types.infer_dtype\nOutput:\n```python\ninfer_dtype(['foo', 'bar'])\n```", "code": "infer_dtype(['foo', 'bar'])"}
{"text": "Instance: pandas.api.types.pandas_dtype\nOutput:\n```python\ndtype = pd.api.types.pandas_dtype(int) # dtype('int64')\n```", "code": "dtype = pd.api.types.pandas_dtype(int) # dtype('int64')"}
{"text": "Instance: pandas.api.types.is_any_real_numeric_dtype\nOutput:\n```python\nis_any_real_numeric_dtype(int) # True\n```", "code": "is_any_real_numeric_dtype(int) # True"}
{"text": "Instance: pandas.api.types.is_bool_dtype\nOutput:\n```python\nis_bool_dtype(str) # False\n```", "code": "is_bool_dtype(str) # False"}
{"text": "Instance: pandas.api.types.is_categorical_dtype\nOutput:\n```python\nis_categorical_dtype(object) # False\n```", "code": "is_categorical_dtype(object) # False"}
{"text": "Instance: pandas.api.types.is_complex_dtype\nOutput:\n```python\nis_complex_dtype(np.array([1 + 1j, 5])) # True\n```", "code": "is_complex_dtype(np.array([1 + 1j, 5])) # True"}
{"text": "Instance: pandas.api.types.is_datetime64_any_dtype\nOutput:\n```python\nis_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\")) # True\n```", "code": "is_datetime64_any_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\")) # True"}
{"text": "Instance: pandas.api.types.is_datetime64_dtype\nOutput:\n```python\nis_datetime64_dtype(np.array([], dtype=np.datetime64)) # True\n```", "code": "is_datetime64_dtype(np.array([], dtype=np.datetime64)) # True"}
{"text": "Instance: pandas.api.types.is_datetime64_ns_dtype\nOutput:\n```python\nis_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\")) # True\n```", "code": "is_datetime64_ns_dtype(pd.DatetimeIndex([1, 2, 3], dtype=\"datetime64[ns]\")) # True"}
{"text": "Instance: pandas.api.types.is_datetime64tz_dtype\nOutput:\n```python\nis_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\")) # True\n```", "code": "is_datetime64tz_dtype(pd.DatetimeIndex([1, 2, 3], tz=\"US/Eastern\")) # True"}
{"text": "Instance: pandas.api.types.is_extension_array_dtype\nOutput:\n```python\narr = pd.Categorical(['a', 'b'])\nis_extension_array_dtype(arr) # True\n\narr = np.array(['a', 'b'])\nis_extension_array_dtype(arr.dtype) # False\n```", "code": "arr = pd.Categorical(['a', 'b'])\nis_extension_array_dtype(arr) # True\n\narr = np.array(['a', 'b'])\nis_extension_array_dtype(arr.dtype) # False"}
{"text": "Instance: pandas.api.types.is_float_dtype\nOutput:\n```python\nis_float_dtype(float) # True\n```", "code": "is_float_dtype(float) # True"}
{"text": "Instance: pandas.api.types.is_int64_dtype\nOutput:\n```python\nis_int64_dtype(np.array([1, 2], dtype=np.int64)) # True\n```", "code": "is_int64_dtype(np.array([1, 2], dtype=np.int64)) # True"}
{"text": "Instance: pandas.api.types.is_integer_dtype\nOutput:\n```python\nis_integer_dtype(str) # False\n```", "code": "is_integer_dtype(str) # False"}
{"text": "Instance: pandas.api.types.is_interval_dtype\nOutput:\n```python\nis_interval_dtype(pd.IntervalDtype()) # True\n```", "code": "is_interval_dtype(pd.IntervalDtype()) # True"}
{"text": "Instance: pandas.api.types.is_numeric_dtype\nOutput:\n```python\nis_numeric_dtype(str) # False\n```", "code": "is_numeric_dtype(str) # False"}
{"text": "Instance: pandas.api.types.is_object_dtype\nOutput:\n```python\nis_object_dtype(object) # True\n```", "code": "is_object_dtype(object) # True"}
{"text": "Instance: pandas.api.types.is_period_dtype\nOutput:\n```python\nis_period_dtype(pd.PeriodDtype(freq=\"D\")) # True\n```", "code": "is_period_dtype(pd.PeriodDtype(freq=\"D\")) # True"}
{"text": "Instance: pandas.api.types.is_signed_integer_dtype\nOutput:\n```python\nis_signed_integer_dtype(pd.Int8Dtype) # True\n```", "code": "is_signed_integer_dtype(pd.Int8Dtype) # True"}
{"text": "Instance: pandas.api.types.is_string_dtype\nOutput:\n```python\nis_string_dtype(str) # True\n```", "code": "is_string_dtype(str) # True"}
{"text": "Instance: pandas.api.types.is_timedelta64_dtype\nOutput:\n```python\nis_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\")) # returns True\n```", "code": "is_timedelta64_dtype(pd.Series([], dtype=\"timedelta64[ns]\")) # returns True"}
{"text": "Instance: pandas.api.types.is_timedelta64_ns_dtype\nOutput:\n```python\nis_timedelta64_ns_dtype(np.dtype('m8[ns]')) # True\n```", "code": "is_timedelta64_ns_dtype(np.dtype('m8[ns]')) # True"}
{"text": "Instance: pandas.api.types.is_unsigned_integer_dtype\nOutput:\n```python\nis_unsigned_integer_dtype(np.uint64) # True\n```", "code": "is_unsigned_integer_dtype(np.uint64) # True"}
{"text": "Instance: pandas.api.types.is_sparse\nOutput:\n```python\nis_sparse(pd.arrays.SparseArray([0, 0, 1, 0])) # True\n```", "code": "is_sparse(pd.arrays.SparseArray([0, 0, 1, 0])) # True"}
{"text": "Instance: pandas.api.types.is_dict_like\nOutput:\n```python\nis_dict_like({1: 2}) # True\n```", "code": "is_dict_like({1: 2}) # True"}
{"text": "Instance: pandas.api.types.is_file_like\nOutput:\n```python\nis_file_like(buffer) # True\n```", "code": "is_file_like(buffer) # True"}
{"text": "Instance: pandas.api.types.is_list_like\nOutput:\n```python\nis_list_like([1, 2, 3]) # True\n```", "code": "is_list_like([1, 2, 3]) # True"}
{"text": "Instance: pandas.api.types.is_named_tuple\nOutput:\n```python\nis_named_tuple(p) # returns True if p is a named tuple, False otherwise\n```", "code": "is_named_tuple(p) # returns True if p is a named tuple, False otherwise"}
{"text": "Instance: pandas.api.types.is_iterator\nOutput:\n```python\nis_iterator((x for x in [])) # True\n```", "code": "is_iterator((x for x in [])) # True"}
{"text": "Instance: pandas.api.types.is_bool\nOutput:\n```python\npd.api.types.is_bool(True) # True\n\npd.api.types.is_bool(1) # False\n```", "code": "pd.api.types.is_bool(True) # True\n\npd.api.types.is_bool(1) # False"}
{"text": "Instance: pandas.api.types.is_complex\nOutput:\n```python\npd.api.types.is_complex(3 + 4j) # True\n```", "code": "pd.api.types.is_complex(3 + 4j) # True"}
{"text": "Instance: pandas.api.types.is_float\nOutput:\n```python\npd.api.types.is_float(1.0) # True\n\npd.api.types.is_float(1) # False\n```", "code": "pd.api.types.is_float(1.0) # True\n\npd.api.types.is_float(1) # False"}
{"text": "Instance: pandas.api.types.is_hashable\nOutput:\n```python\nis_hashable([1, 2, 3]) # False\n```", "code": "is_hashable([1, 2, 3]) # False"}
{"text": "Instance: pandas.api.types.is_integer\nOutput:\n```python\npd.api.types.is_integer(1) # True\n\npd.api.types.is_integer(1.0) # False\n```", "code": "pd.api.types.is_integer(1) # True\n\npd.api.types.is_integer(1.0) # False"}
{"text": "Instance: pandas.api.types.is_interval\nOutput:\n```python\npandas.api.types.is_interval(pd.Interval(0, 5)) # True\n```", "code": "pandas.api.types.is_interval(pd.Interval(0, 5)) # True"}
{"text": "Instance: pandas.api.types.is_number\nOutput:\n```python\nis_number(1) # True\n```", "code": "is_number(1) # True"}
{"text": "Instance: pandas.api.types.is_re\nOutput:\n```python\nis_re(re.compile(\".*\")) # True\n```", "code": "is_re(re.compile(\".*\")) # True"}
{"text": "Instance: pandas.api.types.is_re_compilable\nOutput:\n```python\nis_re_compilable(\".*\") # True\n```", "code": "is_re_compilable(\".*\") # True"}
{"text": "Instance: pandas.api.types.is_scalar\nOutput:\n```python\npd.api.types.is_scalar(5) # True\n```", "code": "pd.api.types.is_scalar(5) # True"}
{"text": "Instance: pandas.DataFrame.__dataframe__\nOutput:\n```python\ndf_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\n# Output: Index(['Temperature', 'Humidity'], dtype='object')\n\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0    60\n# 1    70\n```", "code": "df_not_necessarily_pandas = pd.DataFrame({'Temperature': [25, 30], 'Humidity': [60, 70]})\ninterchange_object = df_not_necessarily_pandas.__dataframe__()\ninterchange_object.column_names()\n# Output: Index(['Temperature', 'Humidity'], dtype='object')\n\ndf_pandas = (pd.api.interchange.from_dataframe\n             (interchange_object.select_columns_by_name(['Humidity'])))\ndf_pandas\n# Output:\n#    Humidity\n# 0    60\n# 1    70"}
{"text": "Instance: pandas.array\nOutput:\n```python\narr = pd.array([\"a\", None, \"c\"])\n```", "code": "arr = pd.array([\"a\", None, \"c\"])"}
{"text": "Instance: pandas.Index\nOutput:\n```python\nindex = pd.Index([1, 2, 3], dtype='int64')\n```", "code": "index = pd.Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.Index.values\nOutput:\n```python\nidx = pd.Index(['A', 'B', 'C'])\nidx.values # array(['A', 'B', 'C'], dtype=object)\n```", "code": "idx = pd.Index(['A', 'B', 'C'])\nidx.values # array(['A', 'B', 'C'], dtype=object)"}
{"text": "Instance: pandas.Index.is_monotonic_increasing\nOutput:\n```python\npd.Index([1, 2, 3]).is_monotonic_increasing # True\n```", "code": "pd.Index([1, 2, 3]).is_monotonic_increasing # True"}
{"text": "Instance: pandas.Index.is_monotonic_decreasing\nOutput:\n```python\npd.Index([3, 2, 1]).is_monotonic_decreasing # True\n```", "code": "pd.Index([3, 2, 1]).is_monotonic_decreasing # True"}
{"text": "```python\nidx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n                \"Watermelon\"]).astype(\"category\")\nidx.is_unique\n# Output: False\n```", "code": "idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\",\n                \"Watermelon\"]).astype(\"category\")\nidx.is_unique\n# Output: False"}
{"text": "Instance: pandas.Index.has_duplicates\nOutput:\n```python\nidx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\", \"Watermelon\"]).astype(\"category\")\nidx.has_duplicates # True\n```", "code": "idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\", \"Watermelon\"]).astype(\"category\")\nidx.has_duplicates # True"}
{"text": "Instance: pandas.Index.hasnans\nOutput:\n```python\ns = pd.Series([1, 2, 3], index=['a', 'b', None])\ns.index.hasnans # True\n```", "code": "s = pd.Series([1, 2, 3], index=['a', 'b', None])\ns.index.hasnans # True"}
{"text": "Instance: pandas.Index.dtype\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.dtype # dtype('int64')\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.dtype # dtype('int64')"}
{"text": "Instance: pandas.Index.inferred_type\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'cherry'])\nidx.inferred_type # 'unicode'\n```", "code": "idx = pd.Index(['apple', 'banana', 'cherry'])\nidx.inferred_type # 'unicode'"}
{"text": "Instance: pandas.Index.shape\nOutput:\n```python\nidx.shape # outputs tuple, e.g. (3,)\n```", "code": "idx.shape # outputs tuple, e.g. (3,)"}
{"text": "Instance: pandas.Index.name\nOutput:\n```python\nidx = pd.Index([1, 2, 3], name='x')\nidx.name # outputs 'x'\n```", "code": "idx = pd.Index([1, 2, 3], name='x')\nidx.name # outputs 'x'"}
{"text": "Instance: pandas.Index.names\nOutput:\n```python\nindex = pd.Index(['Alice', 'Bob', 'Charlie'], name='Name')\nindex.names # outputs ['Name']\n```", "code": "index = pd.Index(['Alice', 'Bob', 'Charlie'], name='Name')\nindex.names # outputs ['Name']"}
{"text": "Instance: pandas.Index.nbytes\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.nbytes # outputs 24\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.nbytes # outputs 24"}
{"text": "Instance: pandas.Index.ndim\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.ndim # outputs 1\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.ndim # outputs 1"}
{"text": "Instance: pandas.Index.size\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.size # outputs 3\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.size # outputs 3"}
{"text": "Instance: pandas.Index.empty\nOutput:\n```python\nidx = pd.Index([])\nidx.empty # outputs True\n```", "code": "idx = pd.Index([])\nidx.empty # outputs True"}
{"text": "Instance: pandas.Index.T\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.T # Index([1, 2, 3], dtype='int64')\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.T # Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.Index.memory_usage\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.memory_usage() # 24\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.memory_usage() # 24"}
{"text": "Instance: pandas.Index.all\nOutput:\n```python\npd.Index([1, 2, 3]).all() # True\n\npd.Index([0, 1, 2]).all() # False\n```", "code": "pd.Index([1, 2, 3]).all() # True\n\npd.Index([0, 1, 2]).all() # False"}
{"text": "Instance: pandas.Index.any\nOutput:\n```python\nindex = pd.Index([0, 1, 2])\nindex.any() # True\n\nindex = pd.Index([0, 0, 0])\nindex.any() # False\n```", "code": "index = pd.Index([0, 1, 2])\nindex.any() # True\n\nindex = pd.Index([0, 0, 0])\nindex.any() # False"}
{"text": "Instance: pandas.Index.argmin\nOutput:\n```python\ns = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmin() # outputs 0\n```", "code": "s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmin() # outputs 0"}
{"text": "Instance: pandas.Index.argmax\nOutput:\n```python\ns = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmax() # outputs 2\n```", "code": "s = pd.Series({'Corn Flakes': 100.0, 'Almond Delight': 110.0, 'Cinnamon Toast Crunch': 120.0, 'Cocoa Puff': 110.0})\ns.argmax() # outputs 2"}
{"text": "Instance: pandas.Index.copy\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nnew_idx = idx.copy()\nidx is new_idx # False\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nnew_idx = idx.copy()\nidx is new_idx # False"}
{"text": "Instance: pandas.Index.delete\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nidx.delete(1) # Index(['a', 'c'], dtype='object')\n\nidx = pd.Index(['a', 'b', 'c'])\nidx.delete([0, 2]) # Index(['b'], dtype='object')\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nidx.delete(1) # Index(['a', 'c'], dtype='object')\n\nidx = pd.Index(['a', 'b', 'c'])\nidx.delete([0, 2]) # Index(['b'], dtype='object')"}
{"text": "Instance: pandas.Index.drop\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nidx.drop(['a']) # Index(['b', 'c'], dtype='object')\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nidx.drop(['a']) # Index(['b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Index.drop_duplicates\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'apple', 'orange', 'apple', 'kiwi'])\nidx.drop_duplicates(keep='first') # Index(['apple', 'banana', 'orange', 'kiwi'], dtype='object')\n```", "code": "idx = pd.Index(['apple', 'banana', 'apple', 'orange', 'apple', 'kiwi'])\nidx.drop_duplicates(keep='first') # Index(['apple', 'banana', 'orange', 'kiwi'], dtype='object')"}
{"text": "Instance: pandas.Index.duplicated\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'apple', 'orange', 'apple'])\nidx.duplicated()\n# Output: array([False, False,  True, False,  True])\n\nidx.duplicated(keep='first')\n# Output: array([False, False,  True, False,  True])\n\nidx.duplicated(keep='last')\n# Output: array([ True, False,  True, False, False])\n\nidx.duplicated(keep=False)\n# Output: array([ True, False,  True, False,  True])\n```", "code": "idx = pd.Index(['apple', 'banana', 'apple', 'orange', 'apple'])\nidx.duplicated()\n# Output: array([False, False,  True, False,  True])\n\nidx.duplicated(keep='first')\n# Output: array([False, False,  True, False,  True])\n\nidx.duplicated(keep='last')\n# Output: array([ True, False,  True, False, False])\n\nidx.duplicated(keep=False)\n# Output: array([ True, False,  True, False,  True])"}
{"text": "Instance: pandas.Index.equals\nOutput:\n```python\nidx1 = pd.Index([1, 2, 3])\nidx2 = pd.Index([1, 2, 3])\nidx1.equals(idx2) # True\n```", "code": "idx1 = pd.Index([1, 2, 3])\nidx2 = pd.Index([1, 2, 3])\nidx1.equals(idx2) # True"}
{"text": "Instance: pandas.Index.factorize\nOutput:\n```python\ncodes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))\n```", "code": "codes, uniques = pd.factorize(np.array(['b', 'b', 'a', 'c', 'b'], dtype=\"O\"))"}
{"text": "Instance: pandas.Index.identical\nOutput:\n```python\nidx1 = pd.Index(['1', '2', '3'])\nidx2 = pd.Index(['1', '2', '3'])\nidx2.identical(idx1) # True\n\nidx1 = pd.Index(['1', '2', '3'], name=\"A\")\nidx2 = pd.Index(['1', '2', '3'], name=\"B\")\nidx2.identical(idx1) # False\n```", "code": "idx1 = pd.Index(['1', '2', '3'])\nidx2 = pd.Index(['1', '2', '3'])\nidx2.identical(idx1) # True\n\nidx1 = pd.Index(['1', '2', '3'], name=\"A\")\nidx2 = pd.Index(['1', '2', '3'], name=\"B\")\nidx2.identical(idx1) # False"}
{"text": "Instance: pandas.Index.insert\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nidx.insert(1, 'x') # Index(['a', 'x', 'b', 'c'], dtype='object')\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nidx.insert(1, 'x') # Index(['a', 'x', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Index.is_\nOutput:\n```python\nidx1 = pd.Index(['1', '2', '3'])\nidx2 = idx1.view()\nidx1.is_(idx2) # outputs True\n\nidx3 = idx1.copy()\nidx1.is_(idx3) # outputs False\n```", "code": "idx1 = pd.Index(['1', '2', '3'])\nidx2 = idx1.view()\nidx1.is_(idx2) # outputs True\n\nidx3 = idx1.copy()\nidx1.is_(idx3) # outputs False"}
{"text": "Instance: pandas.Index.is_boolean\nOutput:\n```python\nidx = pd.Index([True, False, True])\nidx.is_boolean() # True\n\nidx = pd.Index([\"True\", \"False\", \"True\"])\nidx.is_boolean() # False\n\nidx = pd.Index([True, False, \"True\"])\nidx.is_boolean() # False\n```", "code": "idx = pd.Index([True, False, True])\nidx.is_boolean() # True\n\nidx = pd.Index([\"True\", \"False\", \"True\"])\nidx.is_boolean() # False\n\nidx = pd.Index([True, False, \"True\"])\nidx.is_boolean() # False"}
{"text": "Instance: pandas.Index.is_categorical\nOutput:\n```python\nidx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\", \"Watermelon\"]).astype(\"category\")\nidx.is_categorical() # returns True\n\ns = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\ns.index.is_categorical() # returns False\n```", "code": "idx = pd.Index([\"Watermelon\", \"Orange\", \"Apple\", \"Watermelon\"]).astype(\"category\")\nidx.is_categorical() # returns True\n\ns = pd.Series([\"Peter\", \"Victor\", \"Elisabeth\", \"Mar\"])\ns.index.is_categorical() # returns False"}
{"text": "Instance: pandas.Index.is_floating\nOutput:\n```python\nidx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_floating() # True\n\nidx = pd.Index([1, 2, 3, 4])\nidx.is_floating() # False\n```", "code": "idx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_floating() # True\n\nidx = pd.Index([1, 2, 3, 4])\nidx.is_floating() # False"}
{"text": "Instance: pandas.Index.is_integer\nOutput:\n```python\nidx = pd.Index([1, 2, 3, 4])\nidx.is_integer() # True\n\nidx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_integer() # False\n\nidx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\nidx.is_integer() # False\n```", "code": "idx = pd.Index([1, 2, 3, 4])\nidx.is_integer() # True\n\nidx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_integer() # False\n\nidx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\nidx.is_integer() # False"}
{"text": "Instance: pandas.Index.is_interval\nOutput:\n```python\nidx = pd.Index([pd.Interval(left=0, right=5), pd.Interval(left=5, right=10)])\nidx.is_interval() # outputs True\n\nidx = pd.Index([1, 3, 5, 7])\nidx.is_interval() # outputs False\n```", "code": "idx = pd.Index([pd.Interval(left=0, right=5), pd.Interval(left=5, right=10)])\nidx.is_interval() # outputs True\n\nidx = pd.Index([1, 3, 5, 7])\nidx.is_interval() # outputs False"}
{"text": "Instance: pandas.Index.is_numeric\nOutput:\n```python\nidx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0, np.nan])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\nidx.is_numeric() # False\n```", "code": "idx = pd.Index([1.0, 2.0, 3.0, 4.0])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0, np.nan])\nidx.is_numeric() # True\n\nidx = pd.Index([1, 2, 3, 4.0, np.nan, \"Apple\"])\nidx.is_numeric() # False"}
{"text": "Instance: pandas.Index.is_object\nOutput:\n```python\nidx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\nidx.is_object() # True\n```", "code": "idx = pd.Index([\"Apple\", \"Mango\", \"Watermelon\"])\nidx.is_object() # True"}
{"text": "Instance: pandas.Index.min\nOutput:\n```python\nidx = pd.Index([3, 2, 1])\nidx.min() # outputs 1\n\nidx = pd.Index(['c', 'b', 'a'])\nidx.min() # outputs 'a'\n\nidx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\nidx.min() # outputs ('a', 1)\n```", "code": "idx = pd.Index([3, 2, 1])\nidx.min() # outputs 1\n\nidx = pd.Index(['c', 'b', 'a'])\nidx.min() # outputs 'a'\n\nidx = pd.MultiIndex.from_product([('a', 'b'), (2, 1)])\nidx.min() # outputs ('a', 1)"}
{"text": "Instance: pandas.Index.max\nOutput:\n```python\nidx = pd.Index(['x', 'y', 'z'])\nidx.max() # outputs 'z'\n```", "code": "idx = pd.Index(['x', 'y', 'z'])\nidx.max() # outputs 'z'"}
{"text": "Instance: pandas.Index.reindex\nOutput:\n```python\nidx = pd.Index(['car', 'bike', 'train', 'tractor'])\nidx.reindex(['car', 'bike'])\n```", "code": "idx = pd.Index(['car', 'bike', 'train', 'tractor'])\nidx.reindex(['car', 'bike'])"}
{"text": "Instance: pandas.Index.rename\nOutput:\n```python\nidx = pd.Index(['A', 'C', 'A', 'B'], name='score')\nidx.rename('grade')\n```", "code": "idx = pd.Index(['A', 'C', 'A', 'B'], name='score')\nidx.rename('grade')"}
{"text": "Instance: pandas.Index.repeat\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nidx.repeat(2) # Index(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nidx.repeat(2) # Index(['a', 'a', 'b', 'b', 'c', 'c'], dtype='object')"}
{"text": "Instance: pandas.Index.where\nOutput:\n```python\nidx = pd.Index(['car', 'bike', 'train', 'tractor'])\nidx.where(idx.isin(['car', 'train']), 'other')\n```", "code": "idx = pd.Index(['car', 'bike', 'train', 'tractor'])\nidx.where(idx.isin(['car', 'train']), 'other')"}
{"text": "Instance: pandas.Index.take\nOutput:\n```python\nidx = pd.Index(['a', 'b', 'c'])\nidx.take([2, 2, 1, 2]) # Index(['c', 'c', 'b', 'c'], dtype='object')\n```", "code": "idx = pd.Index(['a', 'b', 'c'])\nidx.take([2, 2, 1, 2]) # Index(['c', 'c', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Index.putmask\nOutput:\n```python\nidx1.putmask([True, False, False], idx2)\n```", "code": "idx1.putmask([True, False, False], idx2)"}
{"text": "Instance: pandas.Index.unique\nOutput:\n```python\nidx = pd.Index([1, 1, 2, 3, 3])\nidx.unique() # Index([1, 2, 3], dtype='int64')\n```", "code": "idx = pd.Index([1, 1, 2, 3, 3])\nidx.unique() # Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.Index.nunique\nOutput:\n```python\ns = pd.Series([1, 3, 5, 7, 7])\ns.nunique() # outputs 4\n```", "code": "s = pd.Series([1, 3, 5, 7, 7])\ns.nunique() # outputs 4"}
{"text": "Instance: pandas.Index.value_counts\nOutput:\n```python\nindex = pd.Index([3, 1, 2, 3, 4, np.nan])\nindex.value_counts()\n```", "code": "index = pd.Index([3, 1, 2, 3, 4, np.nan])\nindex.value_counts()"}
{"text": "Instance: pandas.Index.set_names\nOutput:\n```python\nidx = pd.Index([1, 2, 3, 4])\nidx.set_names('quarter')\n```", "code": "idx = pd.Index([1, 2, 3, 4])\nidx.set_names('quarter')"}
{"text": "Instance: pandas.Index.droplevel\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\nmi.droplevel()\nmi.droplevel(2)\nmi.droplevel('z')\nmi.droplevel(['x', 'y'])\n```", "code": "mi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\nmi.droplevel()\nmi.droplevel(2)\nmi.droplevel('z')\nmi.droplevel(['x', 'y'])"}
{"text": "Instance: pandas.Index.fillna\nOutput:\n```python\nidx = pd.Index([np.nan, np.nan, 3])\nidx.fillna(0) # Index([0.0, 0.0, 3.0], dtype='float64')\n```", "code": "idx = pd.Index([np.nan, np.nan, 3])\nidx.fillna(0) # Index([0.0, 0.0, 3.0], dtype='float64')"}
{"text": "Instance: pandas.Index.dropna\nOutput:\n```python\nidx = pd.Index([1, np.nan, 3])\nidx.dropna() # Index([1.0, 3.0], dtype='float64')\n```", "code": "idx = pd.Index([1, np.nan, 3])\nidx.dropna() # Index([1.0, 3.0], dtype='float64')"}
{"text": "Instance: pandas.Index.isna\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', np.nan])\nidx.isna() # array([False, False,  True])\n```", "code": "idx = pd.Index(['apple', 'banana', np.nan])\nidx.isna() # array([False, False,  True])"}
{"text": "Instance: pandas.Index.notna\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', None, 'orange'])\nidx.notna()\n# Output: array([ True,  True, False,  True])\n```", "code": "idx = pd.Index(['apple', 'banana', None, 'orange'])\nidx.notna()\n# Output: array([ True,  True, False,  True])"}
{"text": "Instance: pandas.Index.astype\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'cherry'])\nidx.astype('category')\n```", "code": "idx = pd.Index(['apple', 'banana', 'cherry'])\nidx.astype('category')"}
{"text": "Instance: pandas.Index.item\nOutput:\n```python\nindex = pd.Index(['a', 'b', 'c'])\nitem = index.item() # 'a'\n```", "code": "index = pd.Index(['a', 'b', 'c'])\nitem = index.item() # 'a'"}
{"text": "Instance: pandas.Index.map\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'cherry'])\nidx.map(lambda x: x.capitalize())\n# Output: Index(['Apple', 'Banana', 'Cherry'], dtype='object')\n```", "code": "idx = pd.Index(['apple', 'banana', 'cherry'])\nidx.map(lambda x: x.capitalize())\n# Output: Index(['Apple', 'Banana', 'Cherry'], dtype='object')"}
{"text": "Instance: pandas.Index.ravel\nOutput:\n```python\nindex = pd.Index(['apple', 'banana', 'cherry'])\nindex.ravel() # Index(['apple', 'banana', 'cherry'], dtype='object')\n```", "code": "index = pd.Index(['apple', 'banana', 'cherry'])\nindex.ravel() # Index(['apple', 'banana', 'cherry'], dtype='object')"}
{"text": "Instance: pandas.Index.to_list\nOutput:\n```python\nidx = pd.Index(['apple', 'banana', 'cherry'])\nidx.to_list() # outputs ['apple', 'banana', 'cherry']\n```", "code": "idx = pd.Index(['apple', 'banana', 'cherry'])\nidx.to_list() # outputs ['apple', 'banana', 'cherry']"}
{"text": "Instance: pandas.Index.to_series\nOutput:\n```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()"}
{"text": "Instance: pandas.Index.to_frame\nOutput:\n```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()"}
{"text": "Instance: pandas.Index.view\nOutput:\n```python\nnew_index = df.index.view()\n```", "code": "new_index = df.index.view()"}
{"text": "Instance: pandas.Index.argsort\nOutput:\n```python\nidx = pd.Index(['b', 'a', 'd', 'c'])\norder = idx.argsort()\nidx[order] # Index(['a', 'b', 'c', 'd'], dtype='object')\n```", "code": "idx = pd.Index(['b', 'a', 'd', 'c'])\norder = idx.argsort()\nidx[order] # Index(['a', 'b', 'c', 'd'], dtype='object')"}
{"text": "Instance: pandas.Index.searchsorted\nOutput:\n```python\nser = pd.Series([1, 2, 3])\nser.searchsorted(4) # 3\n```", "code": "ser = pd.Series([1, 2, 3])\nser.searchsorted(4) # 3"}
{"text": "Instance: pandas.Index.sort_values\nOutput:\n```python\nidx = pd.Index([10, 100, 1, 1000])\nidx.sort_values() # Output: Index([1, 10, 100, 1000], dtype='int64')\n\nidx.sort_values(ascending=False, return_indexer=True) # Output: (Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))\n```", "code": "idx = pd.Index([10, 100, 1, 1000])\nidx.sort_values() # Output: Index([1, 10, 100, 1000], dtype='int64')\n\nidx.sort_values(ascending=False, return_indexer=True) # Output: (Index([1000, 100, 10, 1], dtype='int64'), array([3, 1, 0, 2]))"}
{"text": "Instance: pandas.Index.shift\nOutput:\n```python\nmonth_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\nmonth_starts.shift(10, freq='D') # Shift the DatetimeIndex by 10 days\n```", "code": "month_starts = pd.date_range('1/1/2011', periods=5, freq='MS')\nmonth_starts.shift(10, freq='D') # Shift the DatetimeIndex by 10 days"}
{"text": "Instance: pandas.Index.append\nOutput:\n```python\nidx = pd.Index([1, 2, 3])\nidx.append(pd.Index([4]))\n```", "code": "idx = pd.Index([1, 2, 3])\nidx.append(pd.Index([4]))"}
{"text": "Instance: pandas.Index.join\nOutput:\n```python\nidx1 = pd.Index([1, 2, 3])\nidx2 = pd.Index([4, 5, 6])\nresult = idx1.join(idx2, how='outer')\nresult # Index([1, 2, 3, 4, 5, 6], dtype='int64')\n```", "code": "idx1 = pd.Index([1, 2, 3])\nidx2 = pd.Index([4, 5, 6])\nresult = idx1.join(idx2, how='outer')\nresult # Index([1, 2, 3, 4, 5, 6], dtype='int64')"}
{"text": "Instance: pandas.Index.intersection\nOutput:\n```python\nidx1 = pd.Index(['apple', 'banana', 'orange'])\nidx2 = pd.Index(['banana', 'grape', 'kiwi'])\nidx1.intersection(idx2)\n# Index(['banana'], dtype='object')\n```", "code": "idx1 = pd.Index(['apple', 'banana', 'orange'])\nidx2 = pd.Index(['banana', 'grape', 'kiwi'])\nidx1.intersection(idx2)\n# Index(['banana'], dtype='object')"}
{"text": "Instance: pandas.Index.union\nOutput:\n```python\nidx1 = pd.Index(['apple', 'banana', 'cherry'])\nidx2 = pd.Index(['banana', 'cherry', 'dates'])\nidx1.union(idx2)\nIndex(['apple', 'banana', 'cherry', 'dates'], dtype='object')\n```", "code": "idx1 = pd.Index(['apple', 'banana', 'cherry'])\nidx2 = pd.Index(['banana', 'cherry', 'dates'])\nidx1.union(idx2)\nIndex(['apple', 'banana', 'cherry', 'dates'], dtype='object')"}
{"text": "Instance: pandas.Index.difference\nOutput:\n```python\nidx1 = pd.Index([2, 1, 3, 4])\nidx2 = pd.Index([3, 4, 5, 6])\nidx1.difference(idx2) # Index([1, 2], dtype='int64')\n```", "code": "idx1 = pd.Index([2, 1, 3, 4])\nidx2 = pd.Index([3, 4, 5, 6])\nidx1.difference(idx2) # Index([1, 2], dtype='int64')"}
{"text": "Instance: pandas.Index.symmetric_difference\nOutput:\n```python\nidx1 = pd.Index(['apple', 'banana', 'orange'])\nidx2 = pd.Index(['banana', 'orange', 'grape'])\nidx1.symmetric_difference(idx2)\n# Index(['apple', 'grape'], dtype='object')\n```", "code": "idx1 = pd.Index(['apple', 'banana', 'orange'])\nidx2 = pd.Index(['banana', 'orange', 'grape'])\nidx1.symmetric_difference(idx2)\n# Index(['apple', 'grape'], dtype='object')"}
{"text": "Instance: pandas.Index.asof\nOutput:\n```python\nidx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\nidx.asof('2014-01-01') # Output: '2013-12-31'\n```", "code": "idx = pd.Index(['2013-12-31', '2014-01-02', '2014-01-03'])\nidx.asof('2014-01-01') # Output: '2013-12-31'"}
{"text": "Instance: pandas.Index.asof_locs\nOutput:\n```python\nidx = pd.date_range('2023-06-01', periods=3, freq='D')\nwhere = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00', '2023-06-02 23:59:59'])\nmask = np.ones(3, dtype=bool)\nidx.asof_locs(where, mask) # array([-1,  0,  1])\n```", "code": "idx = pd.date_range('2023-06-01', periods=3, freq='D')\nwhere = pd.DatetimeIndex(['2023-05-30 00:12:00', '2023-06-01 00:00:00', '2023-06-02 23:59:59'])\nmask = np.ones(3, dtype=bool)\nidx.asof_locs(where, mask) # array([-1,  0,  1])"}
{"text": "Instance: pandas.Index.get_indexer\nOutput:\n```python\nindex = pd.Index(['c', 'a', 'b'])\nindex.get_indexer(['a', 'b', 'x']) # array([ 1,  2, -1])\n```", "code": "index = pd.Index(['c', 'a', 'b'])\nindex.get_indexer(['a', 'b', 'x']) # array([ 1,  2, -1])"}
{"text": "Instance: pandas.Index.get_indexer_for\nOutput:\n```python\nidx = pd.Index([np.nan, 'var1', np.nan])\nidx.get_indexer_for([np.nan]) # array([0, 2])\n```", "code": "idx = pd.Index([np.nan, 'var1', np.nan])\nidx.get_indexer_for([np.nan]) # array([0, 2])"}
{"text": "Instance: pandas.Index.get_indexer_non_unique\nOutput:\n```python\nindex = pd.Index(['c', 'b', 'a', 'b', 'b'])\nindex.get_indexer_non_unique(['f', 'b', 's']) # (array([-1,  1,  3,  4, -1]), array([0, 2]))\n```", "code": "index = pd.Index(['c', 'b', 'a', 'b', 'b'])\nindex.get_indexer_non_unique(['f', 'b', 's']) # (array([-1,  1,  3,  4, -1]), array([0, 2]))"}
{"text": "Instance: pandas.Index.get_level_values\nOutput:\n```python\nidx = pd.Index(list('abc'))\nidx.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object')\n```", "code": "idx = pd.Index(list('abc'))\nidx.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.Index.get_loc\nOutput:\n```python\nunique_index = pd.Index(list('abc'))\nunique_index.get_loc('b') # 1\n\nmonotonic_index = pd.Index(list('abbc'))\nmonotonic_index.get_loc('b') # slice(1, 3, None)\n\nnon_monotonic_index = pd.Index(list('abcb'))\nnon_monotonic_index.get_loc('b') # array([False,  True, False,  True])\n```", "code": "unique_index = pd.Index(list('abc'))\nunique_index.get_loc('b') # 1\n\nmonotonic_index = pd.Index(list('abbc'))\nmonotonic_index.get_loc('b') # slice(1, 3, None)\n\nnon_monotonic_index = pd.Index(list('abcb'))\nnon_monotonic_index.get_loc('b') # array([False,  True, False,  True])"}
{"text": "Instance: pandas.Index.get_slice_bound\nOutput:\n```python\nidx = pd.RangeIndex(5)\nidx.get_slice_bound(3, 'left') # 3\n\nidx.get_slice_bound(3, 'right') # 4\n\nidx_duplicate = pd.Index(['a', 'b', 'a', 'c', 'd'])\nidx_duplicate.get_slice_bound('a', 'left') # KeyError: Cannot get left slice bound for non-unique label: 'a'\n```", "code": "idx = pd.RangeIndex(5)\nidx.get_slice_bound(3, 'left') # 3\n\nidx.get_slice_bound(3, 'right') # 4\n\nidx_duplicate = pd.Index(['a', 'b', 'a', 'c', 'd'])\nidx_duplicate.get_slice_bound('a', 'left') # KeyError: Cannot get left slice bound for non-unique label: 'a'"}
{"text": "Instance: pandas.Index.isin\nOutput:\n```python\nidx = pd.Index([1,2,3])\nidx.isin([1, 4]) # array([ True, False, False])\n```", "code": "idx = pd.Index([1,2,3])\nidx.isin([1, 4]) # array([ True, False, False])"}
{"text": "Instance: pandas.Index.slice_indexer\nOutput:\n```python\nidx = pd.Index(list('abcd'))\nidx.slice_indexer(start='b', end='c') # slice(1, 3, None)\n```", "code": "idx = pd.Index(list('abcd'))\nidx.slice_indexer(start='b', end='c') # slice(1, 3, None)"}
{"text": "Instance: pandas.Index.slice_locs\nOutput:\n```python\nidx = pd.Index(list('abcd'))\nidx.slice_locs(start='b', end='c') # outputs (1, 3)\n```", "code": "idx = pd.Index(list('abcd'))\nidx.slice_locs(start='b', end='c') # outputs (1, 3)"}
{"text": "Instance: pandas.RangeIndex\nOutput:\n```python\nindex = pd.RangeIndex(5)\nlist(index) # [0, 1, 2, 3, 4]\n\nindex = pd.RangeIndex(-2, 4)\nlist(index) # [-2, -1, 0, 1, 2, 3]\n\nindex = pd.RangeIndex(0, 10, 2)\nlist(index) # [0, 2, 4, 6, 8]\n\nindex = pd.RangeIndex(2, -10, -3)\nlist(index) # [2, -1, -4, -7]\n\nindex = pd.RangeIndex(0)\nlist(index) # []\n\nindex = pd.RangeIndex(1, 0)\nlist(index) # []\n```", "code": "index = pd.RangeIndex(5)\nlist(index) # [0, 1, 2, 3, 4]\n\nindex = pd.RangeIndex(-2, 4)\nlist(index) # [-2, -1, 0, 1, 2, 3]\n\nindex = pd.RangeIndex(0, 10, 2)\nlist(index) # [0, 2, 4, 6, 8]\n\nindex = pd.RangeIndex(2, -10, -3)\nlist(index) # [2, -1, -4, -7]\n\nindex = pd.RangeIndex(0)\nlist(index) # []\n\nindex = pd.RangeIndex(1, 0)\nlist(index) # []"}
{"text": "Instance: pandas.RangeIndex.start\nOutput:\n```python\nidx.start # 0 for pd.RangeIndex(5)\n```", "code": "idx.start # 0 for pd.RangeIndex(5)"}
{"text": "Instance: pandas.RangeIndex.stop\nOutput:\n```python\nidx = pd.RangeIndex(5)\nidx.stop # 5\n\nidx = pd.RangeIndex(2, -10, -3)\nidx.stop # -10\n```", "code": "idx = pd.RangeIndex(5)\nidx.stop # 5\n\nidx = pd.RangeIndex(2, -10, -3)\nidx.stop # -10"}
{"text": "Instance: pandas.RangeIndex.step\nOutput:\n```python\nidx = pd.RangeIndex(5)\nidx.step # 1\n\nidx = pd.RangeIndex(2, -10, -3)\nidx.step # -3\n\nidx = pd.RangeIndex(1, 0)\nidx.step # 1\n```", "code": "idx = pd.RangeIndex(5)\nidx.step # 1\n\nidx = pd.RangeIndex(2, -10, -3)\nidx.step # -3\n\nidx = pd.RangeIndex(1, 0)\nidx.step # 1"}
{"text": "Instance: pandas.RangeIndex.from_range\nOutput:\n```python\nindex = pd.RangeIndex.from_range(range(5)) # RangeIndex(start=0, stop=5, step=1)\n```", "code": "index = pd.RangeIndex.from_range(range(5)) # RangeIndex(start=0, stop=5, step=1)"}
{"text": "Instance: pandas.CategoricalIndex\nOutput:\n```python\nci = pd.CategoricalIndex([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], ordered=True, categories=[\"c\", \"b\", \"a\"])\nci.min() # outputs 'c'\n```", "code": "ci = pd.CategoricalIndex([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], ordered=True, categories=[\"c\", \"b\", \"a\"])\nci.min() # outputs 'c'"}
{"text": "Instance: pandas.CategoricalIndex.codes\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nci.codes # array([0, 1, 2, 0, 1, 2], dtype=int8)\n```", "code": "ci = pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nci.codes # array([0, 1, 2, 0, 1, 2], dtype=int8)"}
{"text": "Instance: pandas.CategoricalIndex.categories\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'c', 'b', 'a', 'c', 'b'])\nci.categories # Index(['a', 'b', 'c'], dtype='object')\n```", "code": "ci = pd.CategoricalIndex(['a', 'c', 'b', 'a', 'c', 'b'])\nci.categories # Index(['a', 'b', 'c'], dtype='object')"}
{"text": "Instance: pandas.CategoricalIndex.ordered\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\nci.ordered # True\n```", "code": "ci = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\nci.ordered # True"}
{"text": "Instance: pandas.CategoricalIndex.rename_categories\nOutput:\n```python\ncategorical_index = pd.CategoricalIndex(['a', 'a', 'b'])\ncategorical_index.rename_categories([0, 1]) # Output: [0, 0, 1]\n```", "code": "categorical_index = pd.CategoricalIndex(['a', 'a', 'b'])\ncategorical_index.rename_categories([0, 1]) # Output: [0, 0, 1]"}
{"text": "Instance: pandas.CategoricalIndex.reorder_categories\nOutput:\n```python\nci = pd.CategoricalIndex(['apple', 'banana', 'cherry', 'apple'])\nci.reorder_categories(['cherry', 'banana', 'apple'], ordered=True)\n```", "code": "ci = pd.CategoricalIndex(['apple', 'banana', 'cherry', 'apple'])\nci.reorder_categories(['cherry', 'banana', 'apple'], ordered=True)"}
{"text": "Instance: pandas.CategoricalIndex.add_categories\nOutput:\n```python\nc.add_categories(['d', 'a'])\n```", "code": "c.add_categories(['d', 'a'])"}
{"text": "Instance: pandas.CategoricalIndex.remove_categories\nOutput:\n```python\nc = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc.remove_categories(['d', 'a'])\n```", "code": "c = pd.Categorical(['a', 'c', 'b', 'c', 'd'])\nc.remove_categories(['d', 'a'])"}
{"text": "Instance: pandas.CategoricalIndex.remove_unused_categories\nOutput:\n```python\nc.remove_unused_categories()\n```", "code": "c.remove_unused_categories()"}
{"text": "Instance: pandas.CategoricalIndex.set_categories\nOutput:\n```python\nci.set_categories(['A', 'b', 'c'], rename=True)\n```", "code": "ci.set_categories(['A', 'b', 'c'], rename=True)"}
{"text": "Instance: pandas.CategoricalIndex.as_ordered\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'b', 'c', 'a'])\nci.ordered # False\nci = ci.as_ordered()\nci.ordered # True\n```", "code": "ci = pd.CategoricalIndex(['a', 'b', 'c', 'a'])\nci.ordered # False\nci = ci.as_ordered()\nci.ordered # True"}
{"text": "Instance: pandas.CategoricalIndex.as_unordered\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'b', 'c', 'a'], ordered=True)\nci.ordered\n# Output: True\n\nci = ci.as_unordered()\nci.ordered\n# Output: False\n```", "code": "ci = pd.CategoricalIndex(['a', 'b', 'c', 'a'], ordered=True)\nci.ordered\n# Output: True\n\nci = ci.as_unordered()\nci.ordered\n# Output: False"}
{"text": "Instance: pandas.CategoricalIndex.map\nOutput:\n```python\nidx = pd.CategoricalIndex(['a', 'b', 'c'])\nidx.map(lambda x: x.upper())\n```", "code": "idx = pd.CategoricalIndex(['a', 'b', 'c'])\nidx.map(lambda x: x.upper())"}
{"text": "Instance: pandas.CategoricalIndex.equals\nOutput:\n```python\nci = pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nci2 = pd.CategoricalIndex(pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c']))\nci.equals(ci2) # True\n\nci3 = pd.CategoricalIndex(['c', 'b', 'a', 'a', 'b', 'c'])\nci.equals(ci3) # False\n\nci4 = ci.as_ordered()\nci.equals(ci4) # False\n\nci5 = ci.set_categories(['a', 'b', 'c', 'd'])\nci.equals(ci5) # False\n\nci6 = ci.set_categories(['b', 'c', 'a'])\nci.equals(ci6) # True\n```", "code": "ci = pd.CategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'])\nci2 = pd.CategoricalIndex(pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c']))\nci.equals(ci2) # True\n\nci3 = pd.CategoricalIndex(['c', 'b', 'a', 'a', 'b', 'c'])\nci.equals(ci3) # False\n\nci4 = ci.as_ordered()\nci.equals(ci4) # False\n\nci5 = ci.set_categories(['a', 'b', 'c', 'd'])\nci.equals(ci5) # False\n\nci6 = ci.set_categories(['b', 'c', 'a'])\nci.equals(ci6) # True"}
{"text": "Instance: pandas.IntervalIndex\nOutput:\n```python\nidx = pd.interval_range(start=0, end=5)\n```", "code": "idx = pd.interval_range(start=0, end=5)"}
{"text": "Instance: pandas.IntervalIndex.from_arrays\nOutput:\n```python\nidx = pd.IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])\n```", "code": "idx = pd.IntervalIndex.from_arrays([0, 1, 2], [1, 2, 3])"}
{"text": "Instance: pandas.IntervalIndex.from_tuples\nOutput:\n```python\nidx = pd.IntervalIndex.from_tuples([(0, 1), (1, 2)])\n```", "code": "idx = pd.IntervalIndex.from_tuples([(0, 1), (1, 2)])"}
{"text": "Instance: pandas.IntervalIndex.from_breaks\nOutput:\n```python\nidx = pd.IntervalIndex.from_breaks([0, 1, 2, 3])\n```", "code": "idx = pd.IntervalIndex.from_breaks([0, 1, 2, 3])"}
{"text": "Instance: pandas.IntervalIndex.left\nOutput:\n```python\ninterval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\ninterval_index.left # returns array([0, 5, 10])\n```", "code": "interval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\ninterval_index.left # returns array([0, 5, 10])"}
{"text": "Instance: pandas.IntervalIndex.right\nOutput:\n```python\ninterval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\ninterval_index.right # returns array([ 5, 10, 15])\n```", "code": "interval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\ninterval_index.right # returns array([ 5, 10, 15])"}
{"text": "Instance: pandas.IntervalIndex.mid\nOutput:\n```python\ninterval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\nmid_points = interval_index.mid # returns array([2.5, 7.5, 12.5])\n```", "code": "interval_index = pd.IntervalIndex.from_breaks([0, 5, 10, 15])\nmid_points = interval_index.mid # returns array([2.5, 7.5, 12.5])"}
{"text": "Instance: pandas.IntervalIndex.closed\nOutput:\n```python\ninterv_arr.closed # 'right' for an IntervalArray interv_arr with intervals [(0, 1], (1, 5]]\n```", "code": "interv_arr.closed # 'right' for an IntervalArray interv_arr with intervals [(0, 1], (1, 5]]"}
{"text": "Instance: pandas.IntervalIndex.length\nOutput:\n```python\nidx = pd.IntervalIndex.from_breaks([0, 1, 2, 3, 4])\nidx.length # outputs the length of the IntervalIndex, e.g. 4\n```", "code": "idx = pd.IntervalIndex.from_breaks([0, 1, 2, 3, 4])\nidx.length # outputs the length of the IntervalIndex, e.g. 4"}
{"text": "Instance: pandas.IntervalIndex.values\nOutput:\n```python\nidx = pd.interval_range(start=0, end=5)\nidx.values\n# <IntervalArray>\n# [(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]\n# Length: 5, dtype: interval[int64, right]\n```", "code": "idx = pd.interval_range(start=0, end=5)\nidx.values\n# <IntervalArray>\n# [(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]]\n# Length: 5, dtype: interval[int64, right]"}
{"text": "Instance: pandas.IntervalIndex.is_empty\nOutput:\n```python\nivs = [pd.Interval(0, 0, closed='neither'), np.nan]\npd.IntervalIndex(ivs).is_empty # array([ True, False])\n```", "code": "ivs = [pd.Interval(0, 0, closed='neither'), np.nan]\npd.IntervalIndex(ivs).is_empty # array([ True, False])"}
{"text": "Instance: pandas.IntervalIndex.is_non_overlapping_monotonic\nOutput:\n```python\ninterv_idx.is_non_overlapping_monotonic\n```", "code": "interv_idx.is_non_overlapping_monotonic"}
{"text": "Instance: pandas.IntervalIndex.is_overlapping\nOutput:\n```python\nindex = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])\nindex.is_overlapping # True\n```", "code": "index = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])\nindex.is_overlapping # True"}
{"text": "Instance: pandas.IntervalIndex.get_loc\nOutput:\n```python\nindex.get_loc(1) # 0\n```", "code": "index.get_loc(1) # 0"}
{"text": "Instance: pandas.IntervalIndex.get_indexer\nOutput:\n```python\nindex = pd.IntervalIndex.from_tuples([(0, 5), (5, 10), (10, 15)])\nindex.get_indexer([(2, 7), (7, 12), (15, 20)])\n```", "code": "index = pd.IntervalIndex.from_tuples([(0, 5), (5, 10), (10, 15)])\nindex.get_indexer([(2, 7), (7, 12), (15, 20)])"}
{"text": "Instance: pandas.IntervalIndex.set_closed\nOutput:\n```python\nindex = pd.arrays.IntervalArray.from_breaks(range(4))\nindex.set_closed('both')\n```", "code": "index = pd.arrays.IntervalArray.from_breaks(range(4))\nindex.set_closed('both')"}
{"text": "Instance: pandas.IntervalIndex.contains\nOutput:\n```python\nintervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)]\nintervals.contains(0.5) # array([ True, False, False])\n```", "code": "intervals = pd.arrays.IntervalArray.from_tuples([(0, 1), (1, 3), (2, 4)]\nintervals.contains(0.5) # array([ True, False, False])"}
{"text": "Instance: pandas.IntervalIndex.overlaps\nOutput:\n```python\nintervals.overlaps(pd.Interval(1, 3, closed='left')) # array([ True,  True, True])\n```", "code": "intervals.overlaps(pd.Interval(1, 3, closed='left')) # array([ True,  True, True])"}
{"text": "Instance: pandas.IntervalIndex.to_tuples\nOutput:\n```python\nidx.to_tuples() # returns array of tuples representing the intervals, e.g. [(0, 1), (1, 2)]\n```", "code": "idx.to_tuples() # returns array of tuples representing the intervals, e.g. [(0, 1), (1, 2)]"}
{"text": "Instance: pandas.MultiIndex\nOutput:\n```python\narrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\npd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n```", "code": "arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\npd.MultiIndex.from_arrays(arrays, names=('number', 'color'))"}
{"text": "Instance: pandas.MultiIndex.from_arrays\nOutput:\n```python\narrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\npd.MultiIndex.from_arrays(arrays, names=('number', 'color'))\n```", "code": "arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]\npd.MultiIndex.from_arrays(arrays, names=('number', 'color'))"}
{"text": "Instance: pandas.MultiIndex.from_tuples\nOutput:\n```python\ntuples = [(1, 'red'), (1, 'blue'), (2, 'red'), (2, 'blue')]\npd.MultiIndex.from_tuples(tuples, names=('number', 'color'))\n```", "code": "tuples = [(1, 'red'), (1, 'blue'), (2, 'red'), (2, 'blue')]\npd.MultiIndex.from_tuples(tuples, names=('number', 'color'))"}
{"text": "Instance: pandas.MultiIndex.from_product\nOutput:\n```python\npd.MultiIndex.from_product([['apple', 'banana', 'cherry'], ['red', 'yellow']], names=['fruit', 'color'])\n```", "code": "pd.MultiIndex.from_product([['apple', 'banana', 'cherry'], ['red', 'yellow']], names=['fruit', 'color'])"}
{"text": "Instance: pandas.MultiIndex.from_frame\nOutput:\n```python\ndf = pd.DataFrame([['USA', 'Population'], ['USA', 'GDP'],\n                   ['China', 'Population'], ['China', 'GDP']],\n                  columns=['country', 'metric'])\n\npd.MultiIndex.from_frame(df)\n```", "code": "df = pd.DataFrame([['USA', 'Population'], ['USA', 'GDP'],\n                   ['China', 'Population'], ['China', 'GDP']],\n                  columns=['country', 'metric'])\n\npd.MultiIndex.from_frame(df)"}
{"text": "Instance: pandas.MultiIndex.names\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\nmi.names # outputs FrozenList(['x', 'y', 'z'])\n```", "code": "mi = pd.MultiIndex.from_arrays([[1, 2], [3, 4], [5, 6]], names=['x', 'y', 'z'])\nmi.names # outputs FrozenList(['x', 'y', 'z'])"}
{"text": "Instance: pandas.MultiIndex.levels\nOutput:\n```python\nleg_num.index.levels\n```", "code": "leg_num.index.levels"}
{"text": "Instance: pandas.MultiIndex.codes\nOutput:\n```python\ncodes = pd.MultiIndex.from_tuples([('A', 'X'), ('A', 'Y'), ('B', 'X')]).codes\n```", "code": "codes = pd.MultiIndex.from_tuples([('A', 'X'), ('A', 'Y'), ('B', 'X')]).codes"}
{"text": "Instance: pandas.MultiIndex.nlevels\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.nlevels # outputs 1\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.nlevels # outputs 1"}
{"text": "Instance: pandas.MultiIndex.levshape\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['a'], ['b'], ['c']])\nmi.levshape # outputs (1, 1, 1)\n```", "code": "mi = pd.MultiIndex.from_arrays([['a'], ['b'], ['c']])\nmi.levshape # outputs (1, 1, 1)"}
{"text": "Instance: pandas.MultiIndex.dtypes\nOutput:\n```python\nidx.dtypes\n# Output:\n# number     int64\n# color     object\n# dtype: object\n```", "code": "idx.dtypes\n# Output:\n# number     int64\n# color     object\n# dtype: object"}
{"text": "Instance: pandas.MultiIndex.set_levels\nOutput:\n```python\nidx.set_levels([['x', 'y', 'z'], [10, 20, 30]], level=[0, 1])\n```", "code": "idx.set_levels([['x', 'y', 'z'], [10, 20, 30]], level=[0, 1])"}
{"text": "Instance: pandas.MultiIndex.set_codes\nOutput:\n```python\nidx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])\n```", "code": "idx.set_codes([[1, 0, 1, 0], [0, 0, 1, 1]])"}
{"text": "Instance: pandas.MultiIndex.to_flat_index\nOutput:\n```python\nindex = pd.MultiIndex.from_product(\n    [['foo', 'bar'], ['baz', 'qux']],\n    names=['a', 'b'])\nindex.to_flat_index()\n# Index([('foo', 'baz'), ('foo', 'qux'), ('bar', 'baz'), ('bar', 'qux')],\n#       dtype='object')\n```", "code": "index = pd.MultiIndex.from_product(\n    [['foo', 'bar'], ['baz', 'qux']],\n    names=['a', 'b'])\nindex.to_flat_index()\n# Index([('foo', 'baz'), ('foo', 'qux'), ('bar', 'baz'), ('bar', 'qux')],\n#       dtype='object')"}
{"text": "Instance: pandas.MultiIndex.to_frame\nOutput:\n```python\ndf = mi.to_frame()\ndf\n```\n```python\ndf = mi.to_frame(index=False)\ndf\n```\n```python\ndf = mi.to_frame(name=['category1', 'category2'])\ndf\n```", "code": "df = mi.to_frame()\ndf\ndf = mi.to_frame(index=False)\ndf\ndf = mi.to_frame(name=['category1', 'category2'])\ndf"}
{"text": "Instance: pandas.MultiIndex.sortlevel\nOutput:\n```python\nmi.sortlevel()\n```\n```python\nmi.sortlevel(sort_remaining=False)\n```\n```python\nmi.sortlevel(1)\n```\n```python\nmi.sortlevel(1, ascending=False)\n```", "code": "mi.sortlevel()\nmi.sortlevel(sort_remaining=False)\nmi.sortlevel(1)\nmi.sortlevel(1, ascending=False)"}
{"text": "Instance: pandas.MultiIndex.droplevel\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['city', 'population', 'area'])\nmi.droplevel()\n```\n```python\nmi.droplevel(2)\n```\n```python\nmi.droplevel('area')\n```\n```python\nmi.droplevel(['city', 'population'])\n```", "code": "mi = pd.MultiIndex.from_arrays(\n    [[1, 2], [3, 4], [5, 6]], names=['city', 'population', 'area'])\nmi.droplevel()\nmi.droplevel(2)\nmi.droplevel('area')\nmi.droplevel(['city', 'population'])"}
{"text": "Instance: pandas.MultiIndex.swaplevel\nOutput:\n```python\nmi = pd.MultiIndex(levels=[['apple', 'banana'], ['red', 'yellow']],\n                   codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\nmi.swaplevel(0, 1)\n```", "code": "mi = pd.MultiIndex(levels=[['apple', 'banana'], ['red', 'yellow']],\n                   codes=[[0, 0, 1, 1], [0, 1, 0, 1]])\nmi.swaplevel(0, 1)"}
{"text": "Instance: pandas.MultiIndex.reorder_levels\nOutput:\n```python\nmi.reorder_levels(order=[1, 0])\n```\n```python\nmi.reorder_levels(order=['y', 'x'])\n```", "code": "mi.reorder_levels(order=[1, 0])\nmi.reorder_levels(order=['y', 'x'])"}
{"text": "Instance: pandas.MultiIndex.remove_unused_levels\nOutput:\n```python\nmi = pd.MultiIndex.from_product([range(2), list('ab')])\nmi2 = mi[2:].remove_unused_levels()\nmi2.levels # outputs FrozenList([[1], ['a', 'b']])\n```", "code": "mi = pd.MultiIndex.from_product([range(2), list('ab')])\nmi2 = mi[2:].remove_unused_levels()\nmi2.levels # outputs FrozenList([[1], ['a', 'b']])"}
{"text": "Instance: pandas.MultiIndex.drop\nOutput:\n```python\nidx.drop([(1, 'green'), (2, 'purple')])\nidx.drop('green', level='color')\nidx.drop([1, 2], level=0)\n```", "code": "idx.drop([(1, 'green'), (2, 'purple')])\nidx.drop('green', level='color')\nidx.drop([1, 2], level=0)"}
{"text": "Instance: pandas.MultiIndex.copy\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.copy() # Output: MultiIndex([('apple', 'banana', 'cherry')],\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple'], ['banana'], ['cherry']])\nmi.copy() # Output: MultiIndex([('apple', 'banana', 'cherry')],"}
{"text": "Instance: pandas.MultiIndex.append\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple'], ['banana']])\nmi.append(mi) # MultiIndex([('apple', 'banana'), ('apple', 'banana')])\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple'], ['banana']])\nmi.append(mi) # MultiIndex([('apple', 'banana'), ('apple', 'banana')])"}
{"text": "Instance: pandas.MultiIndex.truncate\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([['apple', 'banana', 'cherry'], ['red', 'yellow', 'pink']])\nmi.truncate(before='apple', after='banana')\n```", "code": "mi = pd.MultiIndex.from_arrays([['apple', 'banana', 'cherry'], ['red', 'yellow', 'pink']])\nmi.truncate(before='apple', after='banana')"}
{"text": "Instance: pandas.MultiIndex.get_loc\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_loc('b') # slice(1, 3, None)\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_loc('b') # slice(1, 3, None)"}
{"text": "Instance: pandas.MultiIndex.get_locs\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_locs('b') # array([1, 2], dtype=int64)\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abb'), list('def')])\nmi.get_locs('b') # array([1, 2], dtype=int64)"}
{"text": "Instance: pandas.MultiIndex.get_loc_level\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays([list('abc'), list('def')], names=['Category', 'Type'])\nmi.get_loc_level('b')\n```\n```python\nmi.get_loc_level('e', level='Type')\n```\n```python\nmi.get_loc_level(['b', 'e'])\n```", "code": "mi = pd.MultiIndex.from_arrays([list('abc'), list('def')], names=['Category', 'Type'])\nmi.get_loc_level('b')\nmi.get_loc_level('e', level='Type')\nmi.get_loc_level(['b', 'e'])"}
{"text": "Instance: pandas.MultiIndex.get_indexer\nOutput:\n```python\nindex = pd.MultiIndex.from_tuples([('A', 'X'), ('B', 'Y'), ('C', 'Z')])\nindex.get_indexer([('B', 'Y'), ('C', 'Z'), ('D', 'W')])\n# array([1, 2, -1])\n```", "code": "index = pd.MultiIndex.from_tuples([('A', 'X'), ('B', 'Y'), ('C', 'Z')])\nindex.get_indexer([('B', 'Y'), ('C', 'Z'), ('D', 'W')])\n# array([1, 2, -1])"}
{"text": "Instance: pandas.MultiIndex.get_level_values\nOutput:\n```python\nmi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\nmi.names = ['level_1', 'level_2']\n\nmi.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object', name='level_1')\nmi.get_level_values('level_2') # Index(['d', 'e', 'f'], dtype='object', name='level_2')\n```", "code": "mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))\nmi.names = ['level_1', 'level_2']\n\nmi.get_level_values(0) # Index(['a', 'b', 'c'], dtype='object', name='level_1')\nmi.get_level_values('level_2') # Index(['d', 'e', 'f'], dtype='object', name='level_2')"}
{"text": "Instance: pandas.IndexSlice\nOutput:\n```python\nidx = pd.IndexSlice\ndfmi.loc[idx[:, 'B0':'B1'], :]\n```", "code": "idx = pd.IndexSlice\ndfmi.loc[idx[:, 'B0':'B1'], :]"}
{"text": "Instance: pandas.DatetimeIndex\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx"}
{"text": "Instance: pandas.DatetimeIndex.year\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"YE\"))\ndatetime_series.dt.year"}
{"text": "Instance: pandas.DatetimeIndex.month\nOutput:\n```python\ndatetime_series.dt.month # returns the month component of the DatetimeIndex\n```", "code": "datetime_series.dt.month # returns the month component of the DatetimeIndex"}
{"text": "Instance: pandas.DatetimeIndex.day\nOutput:\n```python\ndatetime_series.dt.day # returns the day component of the datetime series\n```", "code": "datetime_series.dt.day # returns the day component of the datetime series"}
{"text": "Instance: pandas.DatetimeIndex.hour\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"h\"))\ndatetime_series.dt.hour"}
{"text": "Instance: pandas.DatetimeIndex.minute\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"min\"))\ndatetime_series.dt.minute"}
{"text": "Instance: pandas.DatetimeIndex.second\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"s\"))\ndatetime_series.dt.second"}
{"text": "Instance: pandas.DatetimeIndex.microsecond\nOutput:\n```python\ndatetime_series.dt.microsecond\n```", "code": "datetime_series.dt.microsecond"}
{"text": "Instance: pandas.DatetimeIndex.nanosecond\nOutput:\n```python\ndatetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond\n```", "code": "datetime_series = pd.Series(pd.date_range(\"2000-01-01\", periods=3, freq=\"ns\"))\ndatetime_series.dt.nanosecond"}
{"text": "Instance: pandas.DatetimeIndex.date\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.date # array([datetime.date(2020, 1, 1), datetime.date(2020, 2, 1)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.date # array([datetime.date(2020, 1, 1), datetime.date(2020, 2, 1)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.time\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.time # array([datetime.time(10, 0), datetime.time(11, 0)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.time # array([datetime.time(10, 0), datetime.time(11, 0)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.timetz\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.timetz\n# array([datetime.time(10, 0, tzinfo=datetime.timezone.utc), datetime.time(11, 0, tzinfo=datetime.timezone.utc)], dtype=object)\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.timetz\n# array([datetime.time(10, 0, tzinfo=datetime.timezone.utc), datetime.time(11, 0, tzinfo=datetime.timezone.utc)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.dayofyear\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear # Index([1, 32], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear # Index([1, 32], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.day_of_year\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear\n# Output: Index([1, 32], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.dayofyear\n# Output: Index([1, 32], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.dayofweek\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.day_of_week\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.weekday\nOutput:\n```python\ns = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek\n```", "code": "s = pd.date_range('2016-12-31', '2017-01-08', freq='D').to_series()\ns.dt.dayofweek"}
{"text": "Instance: pandas.DatetimeIndex.quarter\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.quarter # Index([1, 1], dtype='int32')\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.quarter # Index([1, 1], dtype='int32')"}
{"text": "Instance: pandas.DatetimeIndex.tz\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.tz # datetime.timezone.utc\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\", \"2/1/2020 11:00:00+00:00\"])\nidx.tz # datetime.timezone.utc"}
{"text": "Instance: pandas.DatetimeIndex.freq\nOutput:\n```python\ndt_index = pd.date_range(start='1/1/2022', periods=5, freq='D')\nfreq = dt_index.freq # outputs <Day>\n```", "code": "dt_index = pd.date_range(start='1/1/2022', periods=5, freq='D')\nfreq = dt_index.freq # outputs <Day>"}
{"text": "Instance: pandas.DatetimeIndex.freqstr\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\"], freq=\"D\")\nidx.freqstr # Output: 'D'\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00:00+00:00\"], freq=\"D\")\nidx.freqstr # Output: 'D'"}
{"text": "Instance: pandas.DatetimeIndex.is_month_start\nOutput:\n```python\nidx = pd.date_range(\"2022-01-01\", periods=3)\nidx.is_month_start # array([True, False, False])\n```", "code": "idx = pd.date_range(\"2022-01-01\", periods=3)\nidx.is_month_start # array([True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_month_end\nOutput:\n```python\nidx = pd.date_range(\"2018-02-27\", periods=3)\nidx.is_month_end # array([False, True, False])\n```", "code": "idx = pd.date_range(\"2018-02-27\", periods=3)\nidx.is_month_end # array([False, True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_quarter_start\nOutput:\n```python\nidx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_start # array([False, False,  True, False])\n```", "code": "idx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_start # array([False, False,  True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_quarter_end\nOutput:\n```python\nidx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_end # array([False,  True, False, False])\n```", "code": "idx = pd.date_range('2017-03-30', periods=4)\nidx.is_quarter_end # array([False,  True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_year_start\nOutput:\n```python\nidx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_start # array([False, False,  True])\n```", "code": "idx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_start # array([False, False,  True])"}
{"text": "Instance: pandas.DatetimeIndex.is_year_end\nOutput:\n```python\nidx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_end # array([False,  True, False])\n```", "code": "idx = pd.date_range(\"2017-12-30\", periods=3)\nidx.is_year_end # array([False,  True, False])"}
{"text": "Instance: pandas.DatetimeIndex.is_leap_year\nOutput:\n```python\nidx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"YE\")\nidx.is_leap_year\n# Output: array([ True, False, False])\n```", "code": "idx = pd.date_range(\"2012-01-01\", \"2015-01-01\", freq=\"YE\")\nidx.is_leap_year\n# Output: array([ True, False, False])"}
{"text": "Instance: pandas.DatetimeIndex.inferred_freq\nOutput:\n```python\nidx = pd.DatetimeIndex([\"2018-01-01\", \"2018-01-03\", \"2018-01-05\"])\nidx.inferred_freq\n# Output: '2D'\n```", "code": "idx = pd.DatetimeIndex([\"2018-01-01\", \"2018-01-03\", \"2018-01-05\"])\nidx.inferred_freq\n# Output: '2D'"}
{"text": "Instance: pandas.DatetimeIndex.indexer_at_time\nOutput:\n```python\nidx = pd.DatetimeIndex([\"1/1/2020 10:00\", \"2/1/2020 11:00\", \"3/1/2020 10:00\"])\nidx.indexer_at_time(\"10:00\") # array([0, 2])\n```", "code": "idx = pd.DatetimeIndex([\"1/1/2020 10:00\", \"2/1/2020 11:00\", \"3/1/2020 10:00\"])\nidx.indexer_at_time(\"10:00\") # array([0, 2])"}
{"text": "Instance: pandas.DatetimeIndex.indexer_between_time\nOutput:\n```python\nidx = pd.date_range(\"2023-01-01\", periods=4, freq=\"h\")\nidx.indexer_between_time(\"00:00\", \"2:00\", include_end=False) # array([0, 1])\n```", "code": "idx = pd.date_range(\"2023-01-01\", periods=4, freq=\"h\")\nidx.indexer_between_time(\"00:00\", \"2:00\", include_end=False) # array([0, 1])"}
{"text": "Instance: pandas.DatetimeIndex.normalize\nOutput:\n```python\nidx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()\n```", "code": "idx = pd.date_range(start='2014-08-01 10:00', freq='h', periods=3, tz='Asia/Calcutta')\nidx.normalize()"}
{"text": "Instance: pandas.DatetimeIndex.strftime\nOutput:\n```python\nrng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')\n```", "code": "rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')"}
{"text": "Instance: pandas.DatetimeIndex.snap\nOutput:\n```python\nidx = pd.DatetimeIndex(['2023-01-01', '2023-01-02', '2023-02-01', '2023-02-02'])\nidx.snap('MS') # snaps the DatetimeIndex to the start of the month\n```", "code": "idx = pd.DatetimeIndex(['2023-01-01', '2023-01-02', '2023-02-01', '2023-02-02'])\nidx.snap('MS') # snaps the DatetimeIndex to the start of the month"}
{"text": "Instance: pandas.DatetimeIndex.tz_convert\nOutput:\n```python\ndti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')\n```", "code": "dti = pd.date_range(start='2014-08-01 09:00', freq='h', periods=3, tz='Europe/Berlin')\ndti.tz_convert('US/Central')"}
{"text": "Instance: pandas.DatetimeIndex.tz_localize\nOutput:\n```python\ntz_aware = tz_naive.tz_localize(tz='US/Eastern')\n```", "code": "tz_aware = tz_naive.tz_localize(tz='US/Eastern')"}
{"text": "Instance: pandas.DatetimeIndex.round\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the DatetimeIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the DatetimeIndex to the nearest hour"}
{"text": "Instance: pandas.DatetimeIndex.floor\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)"}
{"text": "Instance: pandas.DatetimeIndex.ceil\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h')\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h')"}
{"text": "Instance: pandas.DatetimeIndex.month_name\nOutput:\n```python\nidx = pd.date_range(start='2018-01', freq='ME', periods=3)\nidx.month_name()\n```", "code": "idx = pd.date_range(start='2018-01', freq='ME', periods=3)\nidx.month_name()"}
{"text": "Instance: pandas.DatetimeIndex.day_name\nOutput:\n```python\nidx = pd.date_range(start='2018-01-01', freq='D', periods=3)\nidx.day_name()\n# Index(['Monday', 'Tuesday', 'Wednesday'], dtype='object')\n```", "code": "idx = pd.date_range(start='2018-01-01', freq='D', periods=3)\nidx.day_name()\n# Index(['Monday', 'Tuesday', 'Wednesday'], dtype='object')"}
{"text": "Instance: pandas.DatetimeIndex.as_unit\nOutput:\n```python\nidx = pd.DatetimeIndex(['2020-01-02 01:02:03.004005006'])\nidx.as_unit('s') # DatetimeIndex(['2020-01-02 01:02:03'], dtype='datetime64[s]', freq=None)\n```", "code": "idx = pd.DatetimeIndex(['2020-01-02 01:02:03.004005006'])\nidx.as_unit('s') # DatetimeIndex(['2020-01-02 01:02:03'], dtype='datetime64[s]', freq=None)"}
{"text": "Instance: pandas.DatetimeIndex.to_period\nOutput:\n```python\ndf.index.to_period(\"M\") # Converts DatetimeIndex to PeriodIndex with monthly frequency\n```", "code": "df.index.to_period(\"M\") # Converts DatetimeIndex to PeriodIndex with monthly frequency"}
{"text": "Instance: pandas.DatetimeIndex.to_pydatetime\nOutput:\n```python\nidx = pd.date_range('2018-02-27', periods=3)\nidx.to_pydatetime()\n# array([datetime.datetime(2018, 2, 27, 0, 0),\n#        datetime.datetime(2018, 2, 28, 0, 0),\n#        datetime.datetime(2018, 3, 1, 0, 0)], dtype=object)\n```", "code": "idx = pd.date_range('2018-02-27', periods=3)\nidx.to_pydatetime()\n# array([datetime.datetime(2018, 2, 27, 0, 0),\n#        datetime.datetime(2018, 2, 28, 0, 0),\n#        datetime.datetime(2018, 3, 1, 0, 0)], dtype=object)"}
{"text": "Instance: pandas.DatetimeIndex.to_series\nOutput:\n```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_series()"}
{"text": "```python\nidx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()\n```", "code": "idx = pd.Index(['Ant', 'Bear', 'Cow'], name='animal')\nidx.to_frame()"}
{"text": "Instance: pandas.DatetimeIndex.mean\nOutput:\n```python\nidx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.mean() # Outputs Timestamp('2001-01-02 00:00:00')\n```", "code": "idx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.mean() # Outputs Timestamp('2001-01-02 00:00:00')"}
{"text": "Instance: pandas.DatetimeIndex.std\nOutput:\n```python\nidx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.std() # outputs Timedelta('1 days 00:00:00')\n```", "code": "idx = pd.date_range('2001-01-01 00:00', periods=3)\nidx.std() # outputs Timedelta('1 days 00:00:00')"}
{"text": "Instance: pandas.TimedeltaIndex\nOutput:\n```python\ntimedelta_index = pd.TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'])\n```", "code": "timedelta_index = pd.TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'])"}
{"text": "Instance: pandas.TimedeltaIndex.days\nOutput:\n```python\ntdelta_idx.days # Index([0, 10, 20], dtype='int64')\n```", "code": "tdelta_idx.days # Index([0, 10, 20], dtype='int64')"}
{"text": "Instance: pandas.TimedeltaIndex.seconds\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='s')\ntdelta_idx.seconds\n# Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='s')\ntdelta_idx.seconds\n# Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.microseconds\nOutput:\n```python\ntdelta_idx.microseconds # Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx.microseconds # Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.nanoseconds\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='ns')\ntdelta_idx.nanoseconds # Index([1, 2, 3], dtype='int32')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='ns')\ntdelta_idx.nanoseconds # Index([1, 2, 3], dtype='int32')"}
{"text": "Instance: pandas.TimedeltaIndex.components\nOutput:\n```python\ntdelta_idx.components\n```", "code": "tdelta_idx.components"}
{"text": "Instance: pandas.TimedeltaIndex.inferred_freq\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([\"0 days\", \"10 days\", \"20 days\"])\ntdelta_idx.inferred_freq # '10D'\n```", "code": "tdelta_idx = pd.to_timedelta([\"0 days\", \"10 days\", \"20 days\"])\ntdelta_idx.inferred_freq # '10D'"}
{"text": "Instance: pandas.TimedeltaIndex.as_unit\nOutput:\n```python\ntdelta_idx = pd.to_timedelta(['1 day 3 min 2 us 42 ns'])\ntdelta_idx.as_unit('s') # TimedeltaIndex(['1 days 00:03:00'], dtype='timedelta64[s]', freq=None)\n```", "code": "tdelta_idx = pd.to_timedelta(['1 day 3 min 2 us 42 ns'])\ntdelta_idx.as_unit('s') # TimedeltaIndex(['1 days 00:03:00'], dtype='timedelta64[s]', freq=None)"}
{"text": "Instance: pandas.TimedeltaIndex.to_pytimedelta\nOutput:\n```python\ntdelta_idx.to_pytimedelta()\n# array([datetime.timedelta(days=1), datetime.timedelta(days=2), datetime.timedelta(days=3)], dtype=object)\n```", "code": "tdelta_idx.to_pytimedelta()\n# array([datetime.timedelta(days=1), datetime.timedelta(days=2), datetime.timedelta(days=3)], dtype=object)"}
{"text": "Instance: pandas.TimedeltaIndex.to_series\nOutput:\n```python\nidx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\n\nseries = idx.to_series()\nprint(series)\n# Output:\n# duration\n# 1 days   1 days\n# 2 days   2 days\n# 3 days   3 days\n# Name: duration, dtype: timedelta64[ns]\n```", "code": "idx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\n\nseries = idx.to_series()\nprint(series)\n# Output:\n# duration\n# 1 days   1 days\n# 2 days   2 days\n# 3 days   3 days\n# Name: duration, dtype: timedelta64[ns]"}
{"text": "Instance: pandas.TimedeltaIndex.round\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the TimedeltaIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.round('h') # Rounds the TimedeltaIndex to the nearest hour"}
{"text": "Instance: pandas.TimedeltaIndex.floor\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.floor('h') # Outputs DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00', '2018-01-01 12:00:00'], dtype='datetime64[ns]', freq=None)"}
{"text": "Instance: pandas.TimedeltaIndex.ceil\nOutput:\n```python\nrng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h') # Ceil the TimedeltaIndex to the nearest hour\n```", "code": "rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')\nrng.ceil('h') # Ceil the TimedeltaIndex to the nearest hour"}
{"text": "Instance: pandas.TimedeltaIndex.to_frame\nOutput:\n```python\nidx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\ndf = idx.to_frame()\n```", "code": "idx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'], name='duration')\ndf = idx.to_frame()"}
{"text": "Instance: pandas.TimedeltaIndex.mean\nOutput:\n```python\ntdelta_idx = pd.to_timedelta([1, 2, 3], unit='D')\ntdelta_idx.mean() # Outputs Timedelta('2 days 00:00:00')\n```", "code": "tdelta_idx = pd.to_timedelta([1, 2, 3], unit='D')\ntdelta_idx.mean() # Outputs Timedelta('2 days 00:00:00')"}
{"text": "Instance: pandas.PeriodIndex\nOutput:\n```python\nidx = pd.PeriodIndex.from_fields(year=[2000, 2002], quarter=[1, 3])\nidx # outputs PeriodIndex(['2000Q1', '2002Q3'], dtype='period[Q-DEC]')\n```", "code": "idx = pd.PeriodIndex.from_fields(year=[2000, 2002], quarter=[1, 3])\nidx # outputs PeriodIndex(['2000Q1', '2002Q3'], dtype='period[Q-DEC]')"}
{"text": "Instance: pandas.PeriodIndex.day\nOutput:\n```python\nidx = pd.PeriodIndex(['2020-01-31', '2020-02-28'], freq='D')\nidx.day # Index([31, 28], dtype='int64')\n```", "code": "idx = pd.PeriodIndex(['2020-01-31', '2020-02-28'], freq='D')\nidx.day # Index([31, 28], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.dayofweek\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.dayofweek\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.dayofweek"}
{"text": "Instance: pandas.PeriodIndex.day_of_week\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.day_of_week\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.day_of_week"}
{"text": "Instance: pandas.PeriodIndex.dayofyear\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.day_of_year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-10\", \"2023-02-01\", \"2023-03-01\"], freq=\"D\")\nidx.dayofyear\n# Output: Index([10, 32, 60], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.days_in_month\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.daysinmonth\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.days_in_month\n# Output: Index([31, 28, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.end_time\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.end_time\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.end_time"}
{"text": "Instance: pandas.PeriodIndex.freq\nOutput:\n```python\nperiod_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nperiod_index.freq # outputs 'M'\n```", "code": "period_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nperiod_index.freq # outputs 'M'"}
{"text": "Instance: pandas.PeriodIndex.freqstr\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-1\", \"2023-2\", \"2023-3\"], freq=\"M\")\nidx.freqstr # Output: 'M'\n```", "code": "idx = pd.PeriodIndex([\"2023-1\", \"2023-2\", \"2023-3\"], freq=\"M\")\nidx.freqstr # Output: 'M'"}
{"text": "Instance: pandas.PeriodIndex.hour\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:00\", \"2023-01-01 11:00\"], freq='h')\nidx.hour # Index([10, 11], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:00\", \"2023-01-01 11:00\"], freq='h')\nidx.hour # Index([10, 11], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.is_leap_year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.is_leap_year # array([False, True, False])\n```", "code": "idx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.is_leap_year # array([False, True, False])"}
{"text": "Instance: pandas.PeriodIndex.minute\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:30:00\", \"2023-01-01 11:50:00\"], freq='min')\nidx.minute\n# Output: Index([30, 50], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:30:00\", \"2023-01-01 11:50:00\"], freq='min')\nidx.minute\n# Output: Index([30, 50], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.month\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.month # Output: Index([1, 2, 3], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.month # Output: Index([1, 2, 3], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.quarter\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.quarter # Output: Index([1, 1, 1], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.quarter # Output: Index([1, 1, 1], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.qyear\nOutput:\n```python\nperiod_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nquarter = period_index.qyear\n```", "code": "period_index = pd.PeriodIndex(['2021-01', '2021-02', '2021-03'], freq='M')\nquarter = period_index.qyear"}
{"text": "Instance: pandas.PeriodIndex.second\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01 10:00:30\", \"2023-01-01 10:00:31\"], freq='s')\nidx.second # Index([30, 31], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01 10:00:30\", \"2023-01-01 10:00:31\"], freq='s')\nidx.second # Index([30, 31], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.start_time\nOutput:\n```python\nperiod = pd.Period('2012-1-1', freq='D')\nperiod.start_time # Timestamp('2012-01-01 00:00:00')\n```", "code": "period = pd.Period('2012-1-1', freq='D')\nperiod.start_time # Timestamp('2012-01-01 00:00:00')"}
{"text": "Instance: pandas.PeriodIndex.week\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.weekday\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.weekday # Output: Index([6, 0, 1], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01-01\", \"2023-01-02\", \"2023-01-03\"], freq=\"D\")\nidx.weekday # Output: Index([6, 0, 1], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.weekofyear\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.week  # It can be written `weekofyear`\n# Output: Index([5, 9, 13], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.year\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.year # Index([2023, 2024, 2025], dtype='int64')\n```", "code": "idx = pd.PeriodIndex([\"2023\", \"2024\", \"2025\"], freq=\"Y\")\nidx.year # Index([2023, 2024, 2025], dtype='int64')"}
{"text": "Instance: pandas.PeriodIndex.asfreq\nOutput:\n```python\npidx = pd.period_range('2010-01-01', '2015-01-01', freq='Y')\npidx.asfreq('M', how='S')\n```", "code": "pidx = pd.period_range('2010-01-01', '2015-01-01', freq='Y')\npidx.asfreq('M', how='S')"}
{"text": "Instance: pandas.PeriodIndex.strftime\nOutput:\n```python\nrng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')\n```", "code": "rng = pd.date_range(pd.Timestamp(\"2018-03-10 09:00\"), periods=3, freq='s')\nrng.strftime('%B %d, %Y, %r')"}
{"text": "Instance: pandas.PeriodIndex.to_timestamp\nOutput:\n```python\nidx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.to_timestamp()\n# DatetimeIndex(['2023-01-01', '2023-02-01', '2023-03-01'], dtype='datetime64[ns]', freq='MS')\n```", "code": "idx = pd.PeriodIndex([\"2023-01\", \"2023-02\", \"2023-03\"], freq=\"M\")\nidx.to_timestamp()\n# DatetimeIndex(['2023-01-01', '2023-02-01', '2023-03-01'], dtype='datetime64[ns]', freq='MS')"}
{"text": "Instance: pandas.PeriodIndex.from_fields\nOutput:\n```python\nperiods = pd.PeriodIndex.from_fields(year=[2020, 2021, 2022], month=[1, 2, 3], day=[15, 20, 25])\n```", "code": "periods = pd.PeriodIndex.from_fields(year=[2020, 2021, 2022], month=[1, 2, 3], day=[15, 20, 25])"}
{"text": "Instance: pandas.PeriodIndex.from_ordinals\nOutput:\n```python\nordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)\n```", "code": "ordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)"}
{"text": "Instance: pandas.api.types.is_scalar\nOutput:\n```python\npd.api.types.is_scalar(5) # True\n```", "code": "pd.api.types.is_scalar(5) # True"}
{"text": "Instance: pandas.Index\nOutput:\n```python\nindex = pd.Index(['apple', 'banana', 'cherry'])\n```", "code": "index = pd.Index(['apple', 'banana', 'cherry'])"}
{"text": "Instance: pandas.tseries.offsets.DateOffset\nOutput:\n```python\nts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')\n```", "code": "ts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.name\nOutput:\n```python\noffset = pd.offsets.Hour()\noffset.name # 'h'\n```", "code": "offset = pd.offsets.Hour()\noffset.name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.nanos\nOutput:\n```python\noffset = pd.DateOffset(nanos=500)\n```", "code": "offset = pd.DateOffset(nanos=500)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.normalize\nOutput:\n```python\noffset = pd.DateOffset(years=2, months=3, days=5)\nnormalized_offset = offset.normalize()\n```", "code": "offset = pd.DateOffset(years=2, months=3, days=5)\nnormalized_offset = offset.normalize()"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.rule_code\nOutput:\n```python\noffset = pd.tseries.offsets.DateOffset(rule_code='W')\n```", "code": "offset = pd.tseries.offsets.DateOffset(rule_code='W')"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.n\nOutput:\n```python\noffset = pd.DateOffset(n=3)\n```", "code": "offset = pd.DateOffset(n=3)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.DateOffset.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\n(ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M') # 'Fri 16 Dec 2022 15:00'\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\n(ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M') # 'Fri 16 Dec 2022 15:00'"}
{"text": "Instance: pandas.tseries.offsets.BDay\nOutput:\n```python\noffset = pd.tseries.offsets.BDay(5) # Business day offset of 5 days\n```", "code": "offset = pd.tseries.offsets.BDay(5) # Business day offset of 5 days"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # outputs '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # outputs '2bh'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.name\nOutput:\n```python\npd.offsets.BusinessDay().name # 'B'\n```", "code": "pd.offsets.BusinessDay().name # 'B'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(nanos=1000000000)\n```", "code": "offset = pd.tseries.offsets.BusinessDay(nanos=1000000000)"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.normalize\nOutput:\n```python\nbd = pd.tseries.offsets.BusinessDay()\nbd.normalize(pd.Timestamp('2022-12-25')) # Output: Timestamp('2022-12-26 00:00:00')\n```", "code": "bd = pd.tseries.offsets.BusinessDay()\nbd.normalize(pd.Timestamp('2022-12-25')) # Output: Timestamp('2022-12-26 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.rule_code\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(n=1)\noffset.rule_code # 'B'\n```", "code": "offset = pd.tseries.offsets.BusinessDay(n=1)\noffset.rule_code # 'B'"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.n\nOutput:\n```python\noffset = pd.tseries.offsets.BusinessDay(n=2)\n```", "code": "offset = pd.tseries.offsets.BusinessDay(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.weekmask\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessDay(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "bm = pd.tseries.offsets.BusinessDay(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.BusinessDay().holidays(start='2022-01-01', end='2022-12-31')\n```", "code": "holidays = pd.tseries.offsets.BusinessDay().holidays(start='2022-01-01', end='2022-12-31')"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.calendar\nOutput:\n```python\nbday = pd.tseries.offsets.BusinessDay(calendar=pd.tseries.offsets.USFederalHolidayCalendar())\n```", "code": "bday = pd.tseries.offsets.BusinessDay(calendar=pd.tseries.offsets.USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessDay.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 8)\nts + pd.offsets.BusinessHour(n=5) # Timestamp('2022-12-09 14:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 8)\nts + pd.offsets.BusinessHour(n=5) # Timestamp('2022-12-09 14:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # '2bh'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.nanos\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nbh.nanos # 3600000000000\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nbh.nanos # 3600000000000"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.normalize\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nnormalized_date = bh.normalize(pd.Timestamp('2022-12-25 15:30:00'))\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nnormalized_date = bh.normalize(pd.Timestamp('2022-12-25 15:30:00'))"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.rule_code\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nbh.rule_code # outputs 'BH'\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nbh.rule_code # outputs 'BH'"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.n\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(n=2)\n```", "code": "bh = pd.tseries.offsets.BusinessHour(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.start\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(start='09:00')\n```", "code": "bh = pd.tseries.offsets.BusinessHour(start='09:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.end\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nend_time = bh.end('2022-12-31 15:00:00')\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nend_time = bh.end('2022-12-31 15:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.weekmask\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessHour.weekmask(startDay=0, weekdays=[0, 1, 2, 3, 4]) # creates a BusinessHour weekmask starting on Monday and ending on Friday\n```", "code": "bm = pd.tseries.offsets.BusinessHour.weekmask(startDay=0, weekdays=[0, 1, 2, 3, 4]) # creates a BusinessHour weekmask starting on Monday and ending on Friday"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.holidays\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour()\nholidays = bh.holidays(start='2022-01-01', end='2022-12-31')\n```", "code": "bh = pd.tseries.offsets.BusinessHour()\nholidays = bh.holidays(start='2022-01-01', end='2022-12-31')"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.calendar\nOutput:\n```python\nbh = pd.tseries.offsets.BusinessHour(calendar=pd.tseries.offsets.USFederalHolidayCalendar())\n```", "code": "bh = pd.tseries.offsets.BusinessHour(calendar=pd.tseries.offsets.USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessHour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5, 16)\nresult = ts + pd.offsets.CustomBusinessDay()\nprint(result)\n# Output: Timestamp('2022-08-08 16:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5, 16)\nresult = ts + pd.offsets.CustomBusinessDay()\nprint(result)\n# Output: Timestamp('2022-08-08 16:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CDay\nOutput:\n```python\ncustom_business_day = pd.tseries.offsets.CDay(n=1, normalize=True)\n```", "code": "custom_business_day = pd.tseries.offsets.CDay(n=1, normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.nanos\nOutput:\n```python\ncbd = pd.tseries.offsets.CustomBusinessDay(nanos=500000000)\n```", "code": "cbd = pd.tseries.offsets.CustomBusinessDay(nanos=500000000)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.normalize\nOutput:\n```python\ncbd = CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.normalize(pd.Timestamp('2022-01-01')) # Output: Timestamp('2022-01-03 00:00:00')\n```", "code": "cbd = CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.normalize(pd.Timestamp('2022-01-01')) # Output: Timestamp('2022-01-03 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.rule_code\nOutput:\n```python\ncbd = pd.tseries.offsets.CustomBusinessDay(n=1, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.rule_code # outputs 'C'\n```", "code": "cbd = pd.tseries.offsets.CustomBusinessDay(n=1, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbd.rule_code # outputs 'C'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.n\nOutput:\n```python\ncbd = CustomBusinessDay(n=2)\n```", "code": "cbd = CustomBusinessDay(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.weekmask\nOutput:\n```python\nweekmask = pd.tseries.offsets.CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "weekmask = pd.tseries.offsets.CustomBusinessDay(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.calendar\nOutput:\n```python\ncbd = CustomBusinessDay(calendar=USFederalHolidayCalendar())\n```", "code": "cbd = CustomBusinessDay(calendar=USFederalHolidayCalendar())"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.holidays\nOutput:\n```python\ncbd = CustomBusinessDay(holidays=['2022-01-01', '2022-12-25'])\n```", "code": "cbd = CustomBusinessDay(holidays=['2022-01-01', '2022-12-25'])"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessDay.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5, 16)\nts + pd.offsets.CustomBusinessHour(start=\"11:00\")\n# Output: Timestamp('2022-08-08 11:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5, 16)\nts + pd.offsets.CustomBusinessHour(start=\"11:00\")\n# Output: Timestamp('2022-08-08 11:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.freqstr\nOutput:\n```python\npd.offsets.BusinessHour(2).freqstr # '2bh'\n```", "code": "pd.offsets.BusinessHour(2).freqstr # '2bh'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.nanos\nOutput:\n```python\nCustomBusinessHour().nanos # 3600000000000\n```", "code": "CustomBusinessHour().nanos # 3600000000000"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.normalize\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', end='17:00')\ncbh.normalize(pd.Timestamp('2022-01-01 08:30')) # Output: Timestamp('2022-01-01 09:00:00')\n```", "code": "cbh = CustomBusinessHour(start='09:00', end='17:00')\ncbh.normalize(pd.Timestamp('2022-01-01 08:30')) # Output: Timestamp('2022-01-01 09:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.rule_code\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.rule_code # outputs 'CBH-2-0-Mon Tue Wed Thu Fri-00:00:00'\n```", "code": "cbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.rule_code # outputs 'CBH-2-0-Mon Tue Wed Thu Fri-00:00:00'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.n\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, start='09:00')\n```", "code": "cbh = CustomBusinessHour(n=2, start='09:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.weekmask\nOutput:\n```python\ncbh = CustomBusinessHour(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbh = CustomBusinessHour(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.calendar\nOutput:\n```python\ncbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.calendar(start='2022-01-01', end='2022-01-10')\n```", "code": "cbh = CustomBusinessHour(n=2, weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.calendar(start='2022-01-01', end='2022-01-10')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.holidays\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.holidays # outputs ['2022-01-01', '2022-12-25']\n```", "code": "cbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncbh.holidays # outputs ['2022-01-01', '2022-12-25']"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.start\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00')\ncbh.start # outputs Timestamp('2022-01-01 09:00:00')\n```", "code": "cbh = CustomBusinessHour(start='09:00')\ncbh.start # outputs Timestamp('2022-01-01 09:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.end\nOutput:\n```python\ncbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri')\nend_time = cbh.end('2022-01-01 10:30')\n```", "code": "cbh = CustomBusinessHour(start='09:00', weekmask='Mon Tue Wed Thu Fri')\nend_time = cbh.end('2022-01-01 10:30')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessHour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 30)\nts + pd.offsets.MonthEnd() # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 30)\nts + pd.offsets.MonthEnd() # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.name\nOutput:\n```python\npd.tseries.offsets.MonthEnd().name # 'EOM'\n```", "code": "pd.tseries.offsets.MonthEnd().name # 'EOM'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.nanos\nOutput:\n```python\nend_of_month = pd.Timestamp('2022-03-15') + pd.offsets.MonthEnd(nanos=1)\n```", "code": "end_of_month = pd.Timestamp('2022-03-15') + pd.offsets.MonthEnd(nanos=1)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.normalize\nOutput:\n```python\ndates = pd.date_range('2022-01-01', periods=5, freq='M')\nend_of_month = pd.tseries.offsets.MonthEnd().normalize(dates)\n```", "code": "dates = pd.date_range('2022-01-01', periods=5, freq='M')\nend_of_month = pd.tseries.offsets.MonthEnd().normalize(dates)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.rule_code\nOutput:\n```python\nend_of_month = pd.tseries.offsets.MonthEnd()\nend_of_month.rule_code # outputs 'M'\n```", "code": "end_of_month = pd.tseries.offsets.MonthEnd()\nend_of_month.rule_code # outputs 'M'"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.n\nOutput:\n```python\nend_of_month = pd.Timestamp('2022-03-15') + pd.tseries.offsets.MonthEnd(n=1)\n```", "code": "end_of_month = pd.Timestamp('2022-03-15') + pd.tseries.offsets.MonthEnd(n=1)"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.MonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.MonthBegin() # Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.MonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.MonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.MonthBegin() # Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.MonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.name\nOutput:\n```python\npd.tseries.offsets.MonthBegin().name # 'MonthBegin'\n```", "code": "pd.tseries.offsets.MonthBegin().name # 'MonthBegin'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.MonthBegin(nanos=1000000000)\n```", "code": "offset = pd.tseries.offsets.MonthBegin(nanos=1000000000)"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.normalize\nOutput:\n```python\ndate_range = pd.date_range('2022-01-15', periods=5, freq='M')\nnormalized_dates = date_range.to_series().dt.to_period('M').dt.to_timestamp()\n```", "code": "date_range = pd.date_range('2022-01-15', periods=5, freq='M')\nnormalized_dates = date_range.to_series().dt.to_period('M').dt.to_timestamp()"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.MonthBegin.rule_code # outputs 'BM'\n```", "code": "code = pd.tseries.offsets.MonthBegin.rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.MonthBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.MonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.MonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 29)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-11-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-12-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\npd.offsets.BMonthEnd().rollforward(ts) # Timestamp('2022-11-30 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 29)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-11-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthEnd() # Timestamp('2022-12-30 00:00:00')\n\nts = pd.Timestamp(2022, 11, 30)\npd.offsets.BMonthEnd().rollforward(ts) # Timestamp('2022-11-30 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BMonthEnd\nOutput:\n```python\nbm = pd.tseries.offsets.BMonthEnd()\n```", "code": "bm = pd.tseries.offsets.BMonthEnd()"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.freqstr\nOutput:\n```python\npd.offsets.BusinessMonthEnd().freqstr # 'BM'\n```", "code": "pd.offsets.BusinessMonthEnd().freqstr # 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.name\nOutput:\n```python\npd.tseries.offsets.BusinessMonthEnd().name # 'BM'\n```", "code": "pd.tseries.offsets.BusinessMonthEnd().name # 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.nanos\nOutput:\n```python\nbusiness_month_end = pd.tseries.offsets.BusinessMonthEnd()\nbusiness_month_end.nanos # 0\n```", "code": "business_month_end = pd.tseries.offsets.BusinessMonthEnd()\nbusiness_month_end.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.normalize\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthEnd()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "bm = pd.tseries.offsets.BusinessMonthEnd()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.rule_code\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthEnd()\nbm.rule_code # outputs 'BM'\n```", "code": "bm = pd.tseries.offsets.BusinessMonthEnd()\nbm.rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.n\nOutput:\n```python\npd.date_range('2022-01-01', periods=5, freq=pd.offsets.BusinessMonthEnd(n=2))\n```", "code": "pd.date_range('2022-01-01', periods=5, freq=pd.offsets.BusinessMonthEnd(n=2))"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.BMonthBegin() # Timestamp('2023-01-02 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.BMonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 11, 30)\nts + pd.offsets.BMonthBegin() # Timestamp('2022-12-01 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.BMonthBegin() # Timestamp('2023-01-02 00:00:00')\n\nts = pd.Timestamp(2022, 12, 1)\npd.offsets.BMonthBegin().rollback(ts) # Timestamp('2022-12-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BMonthBegin\nOutput:\n```python\nbm = pd.tseries.offsets.BMonthBegin()\n```", "code": "bm = pd.tseries.offsets.BMonthBegin()"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.freqstr\nOutput:\n```python\npd.offsets.BusinessMonthBegin().freqstr # 'BMS'\n```", "code": "pd.offsets.BusinessMonthBegin().freqstr # 'BMS'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.BusinessMonthBegin().name # 'BMS'\n```", "code": "pd.tseries.offsets.BusinessMonthBegin().name # 'BMS'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.nanos\nOutput:\n```python\npd.tseries.offsets.BusinessMonthBegin().nanos # 0\n```", "code": "pd.tseries.offsets.BusinessMonthBegin().nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.normalize\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthBegin()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-01 00:00:00')\n```", "code": "bm = pd.tseries.offsets.BusinessMonthBegin()\nbm.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BusinessMonthBegin().rule_code # outputs 'BM'\n```", "code": "rule_code = pd.tseries.offsets.BusinessMonthBegin().rule_code # outputs 'BM'"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.n\nOutput:\n```python\nbm = pd.tseries.offsets.BusinessMonthBegin(n=1)\n```", "code": "bm = pd.tseries.offsets.BusinessMonthBegin(n=1)"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BusinessMonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthEnd()\nprint(result) # Output: Timestamp('2022-08-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthEnd()\nprint(result) # Output: Timestamp('2022-08-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CBMonthEnd\nOutput:\n```python\ncb_month_end = pd.tseries.offsets.CBMonthEnd()\n```", "code": "cb_month_end = pd.tseries.offsets.CBMonthEnd()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthEnd(5).freqstr # '<5 * CustomBusinessMonthEnds>'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthEnd(5).freqstr # '<5 * CustomBusinessMonthEnds>'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.m_offset\nOutput:\n```python\ncustom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.m_offset # returns <CustomBusinessMonthEnd: n=2>\n```", "code": "custom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.m_offset # returns <CustomBusinessMonthEnd: n=2>"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.name\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.CustomBusinessMonthEnd(n=2).nanos\n```", "code": "offset = pd.tseries.offsets.CustomBusinessMonthEnd(n=2).nanos"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.normalize\nOutput:\n```python\ncustom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-04-29 00:00:00')\n```", "code": "custom_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\ncustom_month_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-04-29 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.rule_code\nOutput:\n```python\ncustom_business_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncustom_business_month_end.rule_code # outputs 'CBM'\n```", "code": "custom_business_month_end = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01', '2022-12-25'])\ncustom_business_month_end.rule_code # outputs 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.n\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.weekmask\nOutput:\n```python\ncbme = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbme = pd.tseries.offsets.CustomBusinessMonthEnd(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.calendar\nOutput:\n```python\ncal = pd.tseries.offsets.CustomBusinessMonthEnd(calendar='indian').calendar()\n```", "code": "cal = pd.tseries.offsets.CustomBusinessMonthEnd(calendar='indian').calendar()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.CustomBusinessMonthEnd().holidays()\n```", "code": "holidays = pd.tseries.offsets.CustomBusinessMonthEnd().holidays()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthBegin()\nprint(result) # Timestamp('2022-09-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 8, 5)\nresult = ts + pd.offsets.CustomBusinessMonthBegin()\nprint(result) # Timestamp('2022-09-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CBMonthBegin\nOutput:\n```python\ncb_month_begin = pd.tseries.offsets.CBMonthBegin()\n```", "code": "cb_month_begin = pd.tseries.offsets.CBMonthBegin()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=[datetime.date(2022, 1, 1), datetime.date(2022, 12, 25)]).freqstr\n```", "code": "pd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=[datetime.date(2022, 1, 1), datetime.date(2022, 12, 25)]).freqstr"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.m_offset\nOutput:\n```python\noffset = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'\n```", "code": "pd.tseries.offsets.CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri', holidays=['2022-01-01']).name # 'CBM'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.nanos\nOutput:\n```python\nCustomBusinessMonthBegin.nanos # 0\n```", "code": "CustomBusinessMonthBegin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.normalize\nOutput:\n```python\ncustom_month_begin = pd.tseries.offsets.CustomBusinessMonthBegin(n=1)\ncustom_month_begin.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2023-01-02 00:00:00')\n```", "code": "custom_month_begin = pd.tseries.offsets.CustomBusinessMonthBegin(n=1)\ncustom_month_begin.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2023-01-02 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.rule_code\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthBegin(month=1, n=1)\ncbm.rule_code # outputs 'CBMS'\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthBegin(month=1, n=1)\ncbm.rule_code # outputs 'CBMS'"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.n\nOutput:\n```python\ncbm = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)\n```", "code": "cbm = pd.tseries.offsets.CustomBusinessMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.weekmask\nOutput:\n```python\ncbm = CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri')\n```", "code": "cbm = CustomBusinessMonthBegin(weekmask='Mon Tue Wed Thu Fri')"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.calendar\nOutput:\n```python\ncbm = CustomBusinessMonthBegin(calendar=USFederalHolidayCalendar())\ncbm.calendar # outputs USFederalHolidayCalendar\n```", "code": "cbm = CustomBusinessMonthBegin(calendar=USFederalHolidayCalendar())\ncbm.calendar # outputs USFederalHolidayCalendar"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.holidays\nOutput:\n```python\nholidays = pd.tseries.offsets.CustomBusinessMonthBegin().holidays()\n```", "code": "holidays = pd.tseries.offsets.CustomBusinessMonthBegin().holidays()"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.CustomBusinessMonthBegin.is_year_end\nOutput:\n```python\nfreq = pd.offsets.Hour(5)\nts = pd.Timestamp(2022, 1, 1)\nfreq.is_year_end(ts) # False\n```", "code": "freq = pd.offsets.Hour(5)\nts = pd.Timestamp(2022, 1, 1)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 14)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 31)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-02-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\npd.offsets.SemiMonthEnd().rollforward(ts) # Timestamp('2022-01-15 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 14)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-01-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 31)\nts + pd.offsets.SemiMonthEnd() # Timestamp('2022-02-15 00:00:00')\n\nts = pd.Timestamp(2022, 1, 15)\npd.offsets.SemiMonthEnd().rollforward(ts) # Timestamp('2022-01-15 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.name\nOutput:\n```python\npd.offsets.SemiMonthEnd().name # 'SM'\n```", "code": "pd.offsets.SemiMonthEnd().name # 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.nanos\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.nanos # 0\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.normalize\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2022-12-15')\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.normalize(pd.Timestamp('2022-12-15')) # Output: Timestamp('2022-12-15')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.rule_code\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.rule_code # 'SM'\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.rule_code # 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.n\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd(n=2)\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.day_of_month\nOutput:\n```python\nsemi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.day_of_month # 15\n```", "code": "semi_month_end = pd.tseries.offsets.SemiMonthEnd()\nsemi_month_end.day_of_month # 15"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.SemiMonthBegin() # Timestamp('2022-01-15 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.SemiMonthBegin() # Timestamp('2022-01-15 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.SemiMonthBegin().freqstr # '<SMS>'\n```", "code": "pd.tseries.offsets.SemiMonthBegin().freqstr # '<SMS>'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.name\nOutput:\n```python\npd.tseries.offsets.SemiMonthBegin().name # 'SMS'\n```", "code": "pd.tseries.offsets.SemiMonthBegin().name # 'SMS'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.nanos\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.nanos # 0\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.normalize\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.normalize(pd.Timestamp('2022-12-15')) # Outputs Timestamp('2022-12-16 00:00:00')\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.normalize(pd.Timestamp('2022-12-15')) # Outputs Timestamp('2022-12-16 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.rule_code\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.rule_code # outputs 'SM'\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.rule_code # outputs 'SM'"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.n\nOutput:\n```python\nsemi_month = pd.tseries.offsets.SemiMonthBegin(n=2)\n```", "code": "semi_month = pd.tseries.offsets.SemiMonthBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.day_of_month\nOutput:\n```python\nsemi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.day_of_month # 1\n```", "code": "semi_month_begin = pd.tseries.offsets.SemiMonthBegin()\nsemi_month_begin.day_of_month # 1"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.SemiMonthBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week\nOutput:\n```python\ndate_object = pd.Timestamp(\"2023-01-13\")\ndate_plus_one_week = date_object + pd.tseries.offsets.Week(n=1)\ndate_next_monday = date_object + pd.tseries.offsets.Week(weekday=0)\ndate_next_sunday = date_object + pd.tseries.offsets.Week(weekday=6)\n```", "code": "date_object = pd.Timestamp(\"2023-01-13\")\ndate_plus_one_week = date_object + pd.tseries.offsets.Week(n=1)\ndate_next_monday = date_object + pd.tseries.offsets.Week(weekday=0)\ndate_next_sunday = date_object + pd.tseries.offsets.Week(weekday=6)"}
{"text": "Instance: pandas.tseries.offsets.Week.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Week.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Week.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Week.nanos\nOutput:\n```python\nweek = pd.tseries.offsets.Week()\nweek.nanos # 604800000000000\n```", "code": "week = pd.tseries.offsets.Week()\nweek.nanos # 604800000000000"}
{"text": "Instance: pandas.tseries.offsets.Week.normalize\nOutput:\n```python\nweek = pd.tseries.offsets.Week(normalize=True)\n```", "code": "week = pd.tseries.offsets.Week(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.Week.rule_code\nOutput:\n```python\nweek_offset = pd.tseries.offsets.Week()\nrule_code = week_offset.rule_code # outputs 'W'\n```", "code": "week_offset = pd.tseries.offsets.Week()\nrule_code = week_offset.rule_code # outputs 'W'"}
{"text": "Instance: pandas.tseries.offsets.Week.n\nOutput:\n```python\nweek = pd.tseries.offsets.Week(n=2)\n```", "code": "week = pd.tseries.offsets.Week(n=2)"}
{"text": "Instance: pandas.tseries.offsets.Week.weekday\nOutput:\n```python\nweek = pd.tseries.offsets.Week()\nweekday = week.weekday # outputs 6 for Saturday\n```", "code": "week = pd.tseries.offsets.Week()\nweekday = week.weekday # outputs 6 for Saturday"}
{"text": "Instance: pandas.tseries.offsets.Week.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Week.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Week.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.WeekOfMonth()\n# Timestamp('2022-01-03 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.WeekOfMonth()\n# Timestamp('2022-01-03 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.name\nOutput:\n```python\npd.offsets.WeekOfMonth().name # 'week'\n```", "code": "pd.offsets.WeekOfMonth().name # 'week'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.nanos\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnanos = week_of_month.nanos\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnanos = week_of_month.nanos"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.normalize\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnormalized_week = week.normalize(pd.Timestamp('2022-01-15'))\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nnormalized_week = week.normalize(pd.Timestamp('2022-01-15'))"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.rule_code\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nrule_code = week_of_month.rule_code # outputs 'WOM-2TUE'\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\nrule_code = week_of_month.rule_code # outputs 'WOM-2TUE'"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.n\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.week\nOutput:\n```python\nweek = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.weekday\nOutput:\n```python\nweek_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)\n```", "code": "week_of_month = pd.tseries.offsets.WeekOfMonth(week=2, weekday=1)"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.WeekOfMonth.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.LastWeekOfMonth() # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.LastWeekOfMonth() # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.freqstr\nOutput:\n```python\npd.tseries.offsets.LastWeekOfMonth(2).freqstr # '2LWOM'\n```", "code": "pd.tseries.offsets.LastWeekOfMonth(2).freqstr # '2LWOM'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.name\nOutput:\n```python\npd.tseries.offsets.LastWeekOfMonth().name # 'LastWeekOfMonth'\n```", "code": "pd.tseries.offsets.LastWeekOfMonth().name # 'LastWeekOfMonth'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.nanos\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(n=1)\nlast_week.nanos # outputs 0\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(n=1)\nlast_week.nanos # outputs 0"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.normalize\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(normalize=True)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.rule_code\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth()\nlast_week.rule_code # 'LWOM'\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth()\nlast_week.rule_code # 'LWOM'"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.n\nOutput:\n```python\nlwom = pd.tseries.offsets.LastWeekOfMonth(n=2)\n```", "code": "lwom = pd.tseries.offsets.LastWeekOfMonth(n=2)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.weekday\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(weekday=2)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(weekday=2)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.week\nOutput:\n```python\nlast_week = pd.tseries.offsets.LastWeekOfMonth(week=0)\n```", "code": "last_week = pd.tseries.offsets.LastWeekOfMonth(week=0)"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.LastWeekOfMonth.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd\nOutput:\n```python\nts + BQuarterEnd(2)\n```", "code": "ts + BQuarterEnd(2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.BQuarterEnd(2).freqstr # '2BQ'\n```", "code": "pd.tseries.offsets.BQuarterEnd(2).freqstr # '2BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.name\nOutput:\n```python\npd.tseries.offsets.BQuarterEnd().name # 'BQuarterEnd'\n```", "code": "pd.tseries.offsets.BQuarterEnd().name # 'BQuarterEnd'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterEnd()\noffset.nanos # 7776000000000\n```", "code": "offset = pd.tseries.offsets.BQuarterEnd()\noffset.nanos # 7776000000000"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.normalize\nOutput:\n```python\nquarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "quarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.rule_code\nOutput:\n```python\nquarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.rule_code # 'BQ'\n```", "code": "quarter_end = pd.tseries.offsets.BQuarterEnd()\nquarter_end.rule_code # 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.n\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterEnd(n=2)\n```", "code": "offset = pd.tseries.offsets.BQuarterEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.startingMonth\nOutput:\n```python\nBQuarterEnd(startingMonth=1) # Business quarter end frequency with starting month as January\n```", "code": "BQuarterEnd(startingMonth=1) # Business quarter end frequency with starting month as January"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin\nOutput:\n```python\nts + BQuarterBegin(2) # Timestamp('2020-09-01 05:01:15')\n```", "code": "ts + BQuarterBegin(2) # Timestamp('2020-09-01 05:01:15')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.BQuarterBegin().freqstr # 'BQ'\n```", "code": "pd.tseries.offsets.BQuarterBegin().freqstr # 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.name\nOutput:\n```python\npd.tseries.offsets.BQuarterBegin().name # 'BQuarterBegin'\n```", "code": "pd.tseries.offsets.BQuarterBegin().name # 'BQuarterBegin'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterBegin()\noffset.nanos # 0\n```", "code": "offset = pd.tseries.offsets.BQuarterBegin()\noffset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.normalize\nOutput:\n```python\ndate = pd.Timestamp('2022-03-15')\nnormalized_date = pd.tseries.offsets.BQuarterBegin().normalize(date) # Output: Timestamp('2022-01-01 00:00:00')\n```", "code": "date = pd.Timestamp('2022-03-15')\nnormalized_date = pd.tseries.offsets.BQuarterBegin().normalize(date) # Output: Timestamp('2022-01-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.BQuarterBegin().rule_code # outputs 'BQ'\n```", "code": "code = pd.tseries.offsets.BQuarterBegin().rule_code # outputs 'BQ'"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.BQuarterBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.BQuarterBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.startingMonth\nOutput:\n```python\nBQuarterBegin(startingMonth=1) # returns a business day offset that represents the start of the quarter with January as the starting month\n```", "code": "BQuarterBegin(startingMonth=1) # returns a business day offset that represents the start of the quarter with January as the starting month"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BQuarterBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterEnd() # Timestamp('2022-03-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterEnd() # Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.freqstr\nOutput:\n```python\npd.tseries.offsets.QuarterEnd(2).freqstr # '2Q'\n```", "code": "pd.tseries.offsets.QuarterEnd(2).freqstr # '2Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.name\nOutput:\n```python\npd.offsets.QuarterEnd().name # 'Q'\n```", "code": "pd.offsets.QuarterEnd().name # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.nanos\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.nanos # 7776000000000\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.nanos # 7776000000000"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.normalize\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.normalize(pd.Timestamp('2022-03-15')) # Output: Timestamp('2022-03-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.rule_code\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.rule_code # 'Q'\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd()\nquarter_end.rule_code # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.n\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd(n=1)\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd(n=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.startingMonth\nOutput:\n```python\nquarter_end = pd.tseries.offsets.QuarterEnd(startingMonth=1)\n```", "code": "quarter_end = pd.tseries.offsets.QuarterEnd(startingMonth=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterBegin() # Timestamp('2022-03-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.QuarterBegin() # Timestamp('2022-03-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.QuarterBegin().freqstr # 'Q'\n```", "code": "pd.tseries.offsets.QuarterBegin().freqstr # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.name\nOutput:\n```python\npd.tseries.offsets.QuarterBegin().name # 'Q'\n```", "code": "pd.tseries.offsets.QuarterBegin().name # 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.nanos\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.nanos # 0\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.normalize\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nnormalized_date = quarter_begin.normalize(pd.Timestamp('2022-06-15'))\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nnormalized_date = quarter_begin.normalize(pd.Timestamp('2022-06-15'))"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.rule_code\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.rule_code # outputs 'Q'\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin()\nquarter_begin.rule_code # outputs 'Q'"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.n\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin(n=1)\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin(n=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.startingMonth\nOutput:\n```python\nquarter_begin = pd.tseries.offsets.QuarterBegin(startingMonth=1)\n```", "code": "quarter_begin = pd.tseries.offsets.QuarterBegin(startingMonth=1)"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.QuarterBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd\nOutput:\n```python\nts = pd.Timestamp('2020-05-24 05:01:15')\nts - BYearEnd()\nts + BYearEnd()\nts + BYearEnd(3)\nts + BYearEnd(-3)\nts + BYearEnd(month=11)\n```", "code": "ts = pd.Timestamp('2020-05-24 05:01:15')\nts - BYearEnd()\nts + BYearEnd()\nts + BYearEnd(3)\nts + BYearEnd(-3)\nts + BYearEnd(month=11)"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.name\nOutput:\n```python\npd.tseries.offsets.BYearEnd().name # 'BYearEnd'\n```", "code": "pd.tseries.offsets.BYearEnd().name # 'BYearEnd'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd(n=2).nanos # returns 63072000000000000\n```", "code": "offset = pd.tseries.offsets.BYearEnd(n=2).nanos # returns 63072000000000000"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd()\nnormalized_date = offset.normalize(pd.Timestamp('2022-12-15'))\n```", "code": "offset = pd.tseries.offsets.BYearEnd()\nnormalized_date = offset.normalize(pd.Timestamp('2022-12-15'))"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BYearEnd().rule_code # outputs 'BYE'\n```", "code": "rule_code = pd.tseries.offsets.BYearEnd().rule_code # outputs 'BYE'"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.n\nOutput:\n```python\noffset = pd.tseries.offsets.BYearEnd(n=2)\n```", "code": "offset = pd.tseries.offsets.BYearEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.month\nOutput:\n```python\nend_of_year = pd.tseries.offsets.BYearEnd()\nend_of_year.month # 12\n```", "code": "end_of_year = pd.tseries.offsets.BYearEnd()\nend_of_year.month # 12"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin\nOutput:\n```python\nts + BYearBegin(2) # Timestamp('2022-01-03 05:01:15')\n```", "code": "ts + BYearBegin(2) # Timestamp('2022-01-03 05:01:15')"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.BYearBegin().freqstr # '<BYS>'\n```", "code": "pd.tseries.offsets.BYearBegin().freqstr # '<BYS>'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.name\nOutput:\n```python\npd.tseries.offsets.BYearBegin().name # 'BYearBegin'\n```", "code": "pd.tseries.offsets.BYearBegin().name # 'BYearBegin'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.nanos\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin()\noffset.nanos # 0\n```", "code": "offset = pd.tseries.offsets.BYearBegin()\noffset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin()\nnormalized_date = offset.normalize(pd.Timestamp('2022-05-15'))\n```", "code": "offset = pd.tseries.offsets.BYearBegin()\nnormalized_date = offset.normalize(pd.Timestamp('2022-05-15'))"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.BYearBegin().rule_code # outputs 'B'\n```", "code": "rule_code = pd.tseries.offsets.BYearBegin().rule_code # outputs 'B'"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.n\nOutput:\n```python\noffset = pd.tseries.offsets.BYearBegin(n=2)\n```", "code": "offset = pd.tseries.offsets.BYearBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.month\nOutput:\n```python\nb_year_begin = pd.tseries.offsets.BYearBegin()\nb_year_begin.month # outputs 1\n```", "code": "b_year_begin = pd.tseries.offsets.BYearBegin()\nb_year_begin.month # outputs 1"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.BYearBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2022-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2023-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd(month=2)\nprint(result) # Timestamp('2022-02-28 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = pd.offsets.YearEnd().rollforward(ts)\nprint(result) # Timestamp('2022-12-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2022-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = ts + pd.offsets.YearEnd()\nprint(result) # Timestamp('2023-12-31 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.YearEnd(month=2)\nprint(result) # Timestamp('2022-02-28 00:00:00')\n\nts = pd.Timestamp(2022, 12, 31)\nresult = pd.offsets.YearEnd().rollforward(ts)\nprint(result) # Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.name\nOutput:\n```python\npd.offsets.YearEnd().name # 'YearEnd'\n```", "code": "pd.offsets.YearEnd().name # 'YearEnd'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.nanos\nOutput:\n```python\npd.tseries.offsets.YearEnd().nanos # 0\n```", "code": "pd.tseries.offsets.YearEnd().nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.normalize\nOutput:\n```python\ndates = pd.date_range('2022-01-01', periods=5, freq='Y')\nend_of_year = pd.tseries.offsets.YearEnd().normalize(dates)\n```", "code": "dates = pd.date_range('2022-01-01', periods=5, freq='Y')\nend_of_year = pd.tseries.offsets.YearEnd().normalize(dates)"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.YearEnd.rule_code # outputs 'A'\n```", "code": "code = pd.tseries.offsets.YearEnd.rule_code # outputs 'A'"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.n\nOutput:\n```python\nyear_end_offset = pd.tseries.offsets.YearEnd(n=2)\n```", "code": "year_end_offset = pd.tseries.offsets.YearEnd(n=2)"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.month\nOutput:\n```python\nend_of_year = pd.tseries.offsets.YearEnd()\nend_of_year.month # outputs 12\n```", "code": "end_of_year = pd.tseries.offsets.YearEnd()\nend_of_year.month # outputs 12"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearEnd.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2024-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.YearBegin(month=2)\n# Output: Timestamp('2022-02-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\npd.offsets.YearBegin().rollback(ts)\n# Output: Timestamp('2023-01-01 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2023-01-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\nts + pd.offsets.YearBegin()\n# Output: Timestamp('2024-01-01 00:00:00')\n\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.YearBegin(month=2)\n# Output: Timestamp('2022-02-01 00:00:00')\n\nts = pd.Timestamp(2023, 1, 1)\npd.offsets.YearBegin().rollback(ts)\n# Output: Timestamp('2023-01-01 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.freqstr\nOutput:\n```python\npd.tseries.offsets.YearBegin().freqstr # 'A-DEC'\n```", "code": "pd.tseries.offsets.YearBegin().freqstr # 'A-DEC'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.kwds\nOutput:\n```python\npd.DateOffset(5).kwds # {}\n```", "code": "pd.DateOffset(5).kwds # {}"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.name\nOutput:\n```python\npd.tseries.offsets.YearBegin().name # 'YearBegin'\n```", "code": "pd.tseries.offsets.YearBegin().name # 'YearBegin'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.nanos\nOutput:\n```python\npd.tseries.offsets.YearBegin.nanos # returns 0\n```", "code": "pd.tseries.offsets.YearBegin.nanos # returns 0"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.normalize\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin(normalize=True)\n```", "code": "year_begin = pd.tseries.offsets.YearBegin(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.YearBegin().rule_code # outputs 'BYEAR'\n```", "code": "code = pd.tseries.offsets.YearBegin().rule_code # outputs 'BYEAR'"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.n\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin(n=2)\n```", "code": "year_begin = pd.tseries.offsets.YearBegin(n=2)"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.month\nOutput:\n```python\nyear_begin = pd.tseries.offsets.YearBegin()\nmonth = year_begin.month # outputs 1\n```", "code": "year_begin = pd.tseries.offsets.YearBegin()\nmonth = year_begin.month # outputs 1"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.YearBegin.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253()\nprint(result) # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253()\nprint(result) # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.FY5253.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.FY5253.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.nanos\nOutput:\n```python\nfy_offset = pd.tseries.offsets.FY5253()\nfy_offset.nanos # 0\n```", "code": "fy_offset = pd.tseries.offsets.FY5253()\nfy_offset.nanos # 0"}
{"text": "Instance: pandas.tseries.offsets.FY5253.normalize\nOutput:\n```python\nfy = pd.tseries.offsets.FY5253()\nnormalized_date = fy.normalize(pd.Timestamp('2022-09-30'))\n```", "code": "fy = pd.tseries.offsets.FY5253()\nnormalized_date = fy.normalize(pd.Timestamp('2022-09-30'))"}
{"text": "Instance: pandas.tseries.offsets.FY5253.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.FY5253.rule_code\n```", "code": "rule_code = pd.tseries.offsets.FY5253.rule_code"}
{"text": "Instance: pandas.tseries.offsets.FY5253.n\nOutput:\n```python\nfy = pd.tseries.offsets.FY5253(n=2)\n```", "code": "fy = pd.tseries.offsets.FY5253(n=2)"}
{"text": "Instance: pandas.tseries.offsets.FY5253.startingMonth\nOutput:\n```python\nfy = FY5253()\nfy.startingMonth # outputs 4\n```", "code": "fy = FY5253()\nfy.startingMonth # outputs 4"}
{"text": "Instance: pandas.tseries.offsets.FY5253.variation\nOutput:\n```python\nfy_variation = pd.tseries.offsets.FY5253.variation\n```", "code": "fy_variation = pd.tseries.offsets.FY5253.variation"}
{"text": "Instance: pandas.tseries.offsets.FY5253.weekday\nOutput:\n```python\noffset = FY5253()\noffset.weekday # outputs 'WEEKDAY'\n```", "code": "offset = FY5253()\noffset.weekday # outputs 'WEEKDAY'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.get_rule_code_suffix\nOutput:\n```python\nsuffix = pd.tseries.offsets.FY5253.get_rule_code_suffix() # returns 'FY5253'\n```", "code": "suffix = pd.tseries.offsets.FY5253.get_rule_code_suffix() # returns 'FY5253'"}
{"text": "Instance: pandas.tseries.offsets.FY5253.get_year_end\nOutput:\n```python\nend_of_year = pd.tseries.offsets.FY5253().get_year_end(pd.Timestamp('2022-01-01'))\n```", "code": "end_of_year = pd.tseries.offsets.FY5253().get_year_end(pd.Timestamp('2022-01-01'))"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253Quarter()\nprint(result) # Timestamp('2022-01-31 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nresult = ts + pd.offsets.FY5253Quarter()\nprint(result) # Timestamp('2022-01-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.kwds\nOutput:\n```python\npd.offsets.FY5253Quarter().kwds\n# Output: {'weekday': 0, 'startingMonth': 1, 'qtr_with_extra_week': 1, 'variation': 'nearest'}\n```", "code": "pd.offsets.FY5253Quarter().kwds\n# Output: {'weekday': 0, 'startingMonth': 1, 'qtr_with_extra_week': 1, 'variation': 'nearest'}"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.nanos\nOutput:\n```python\nFY5253Quarter().nanos # returns 7884000000000\n```", "code": "FY5253Quarter().nanos # returns 7884000000000"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.normalize\nOutput:\n```python\nquarter = pd.tseries.offsets.FY5253Quarter()\nnormalized_quarter = quarter.normalize()\n```", "code": "quarter = pd.tseries.offsets.FY5253Quarter()\nnormalized_quarter = quarter.normalize()"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.FY5253Quarter.rule_code # outputs 'FY5253'\n```", "code": "code = pd.tseries.offsets.FY5253Quarter.rule_code # outputs 'FY5253'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.n\nOutput:\n```python\nqtr = pd.tseries.offsets.FY5253Quarter(n=2)\n```", "code": "qtr = pd.tseries.offsets.FY5253Quarter(n=2)"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.qtr_with_extra_week\nOutput:\n```python\nextra_week_qtr = pd.tseries.offsets.FY5253Quarter.qtr_with_extra_week(2022, 1)\n```", "code": "extra_week_qtr = pd.tseries.offsets.FY5253Quarter.qtr_with_extra_week(2022, 1)"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.startingMonth\nOutput:\n```python\nquarter = FY5253Quarter()\nquarter.startingMonth # 1\n```", "code": "quarter = FY5253Quarter()\nquarter.startingMonth # 1"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.variation\nOutput:\n```python\nvariation = pd.tseries.offsets.FY5253Quarter.variation\n```", "code": "variation = pd.tseries.offsets.FY5253Quarter.variation"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.weekday\nOutput:\n```python\nquarter = pd.tseries.offsets.FY5253Quarter()\nquarter.weekday # outputs 3\n```", "code": "quarter = pd.tseries.offsets.FY5253Quarter()\nquarter.weekday # outputs 3"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.get_rule_code_suffix\nOutput:\n```python\nsuffix = pd.tseries.offsets.FY5253Quarter().get_rule_code_suffix() # outputs 'FY5253Q'\n```", "code": "suffix = pd.tseries.offsets.FY5253Quarter().get_rule_code_suffix() # outputs 'FY5253Q'"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.get_weeks\nOutput:\n```python\nfyq = pd.tseries.offsets.FY5253Quarter(n=1)\nweeks = fyq.get_weeks()\n```", "code": "fyq = pd.tseries.offsets.FY5253Quarter(n=1)\nweeks = fyq.get_weeks()"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False\n```", "code": "pd.DateOffset().is_anchored() # True\npd.DateOffset(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.year_has_extra_week\nOutput:\n```python\nFY5253Quarter.year_has_extra_week(2023) # False\n```", "code": "FY5253Quarter.year_has_extra_week(2023) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.FY5253Quarter.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.Easter()\n# Timestamp('2022-04-17 00:00:00')\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nts + pd.offsets.Easter()\n# Timestamp('2022-04-17 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Easter.freqstr\nOutput:\n```python\npd.tseries.offsets.Easter().freqstr # 'Easter'\n```", "code": "pd.tseries.offsets.Easter().freqstr # 'Easter'"}
{"text": "Instance: pandas.tseries.offsets.Easter.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Easter.name\nOutput:\n```python\npd.tseries.offsets.Easter().name # 'Easter'\n```", "code": "pd.tseries.offsets.Easter().name # 'Easter'"}
{"text": "Instance: pandas.tseries.offsets.Easter.nanos\nOutput:\n```python\neaster = pd.tseries.offsets.Easter()\neaster_nanoseconds = easter.nanos # outputs 0\n```", "code": "easter = pd.tseries.offsets.Easter()\neaster_nanoseconds = easter.nanos # outputs 0"}
{"text": "Instance: pandas.tseries.offsets.Easter.normalize\nOutput:\n```python\neaster = pd.tseries.offsets.Easter()\neaster.normalize(pd.Timestamp('2022-04-17')) # Output: Timestamp('2022-04-17 00:00:00')\n```", "code": "easter = pd.tseries.offsets.Easter()\neaster.normalize(pd.Timestamp('2022-04-17')) # Output: Timestamp('2022-04-17 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Easter.rule_code\nOutput:\n```python\nrule_code = pd.tseries.offsets.Easter.rule_code\n```", "code": "rule_code = pd.tseries.offsets.Easter.rule_code"}
{"text": "Instance: pandas.tseries.offsets.Easter.n\nOutput:\n```python\neaster = pd.tseries.offsets.Easter.nth(n=1)\n```", "code": "easter = pd.tseries.offsets.Easter.nth(n=1)"}
{"text": "Instance: pandas.tseries.offsets.Easter.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_anchored\nOutput:\n```python\npd.DateOffset().is_anchored() # True\n```", "code": "pd.DateOffset().is_anchored() # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Easter.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(3)\n```", "code": "tick = pd.tseries.offsets.Tick(3)"}
{"text": "Instance: pandas.tseries.offsets.Tick.delta\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(delta=5)\n```", "code": "tick = pd.tseries.offsets.Tick(delta=5)"}
{"text": "Instance: pandas.tseries.offsets.Tick.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Tick.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Tick.name\nOutput:\n```python\ntick = pd.tseries.offsets.Tick()\ntick.name # outputs 'tick'\n```", "code": "tick = pd.tseries.offsets.Tick()\ntick.name # outputs 'tick'"}
{"text": "Instance: pandas.tseries.offsets.Tick.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Tick.normalize\nOutput:\n```python\ntick = pd.Timestamp('2022-12-31 23:59:59', tz='US/Eastern')\ntick.normalize() # Output: Timestamp('2022-12-31 00:00:00')\n```", "code": "tick = pd.Timestamp('2022-12-31 23:59:59', tz='US/Eastern')\ntick.normalize() # Output: Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Tick.rule_code\nOutput:\n```python\ntick = pd.tseries.offsets.Tick()\ntick.rule_code # outputs 'TICK'\n```", "code": "tick = pd.tseries.offsets.Tick()\ntick.rule_code # outputs 'TICK'"}
{"text": "Instance: pandas.tseries.offsets.Tick.n\nOutput:\n```python\ntick = pd.tseries.offsets.Tick(n=5)\n```", "code": "tick = pd.tseries.offsets.Tick(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Tick.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Tick.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Day()\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Day()"}
{"text": "Instance: pandas.tseries.offsets.Day.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Day(5)\n```", "code": "delta = pd.tseries.offsets.Day(5)"}
{"text": "Instance: pandas.tseries.offsets.Day.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Day.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Day.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Day.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Day.normalize\nOutput:\n```python\ndate = pd.Timestamp('2022-12-31 08:00:00')\nnormalized_date = pd.tseries.offsets.Day().normalize(date)\n```", "code": "date = pd.Timestamp('2022-12-31 08:00:00')\nnormalized_date = pd.tseries.offsets.Day().normalize(date)"}
{"text": "Instance: pandas.tseries.offsets.Day.rule_code\nOutput:\n```python\nday = pd.tseries.offsets.Day()\nday.rule_code # 'D'\n```", "code": "day = pd.tseries.offsets.Day()\nday.rule_code # 'D'"}
{"text": "Instance: pandas.tseries.offsets.Day.n\nOutput:\n```python\nday = pd.tseries.offsets.Day(3)\n```", "code": "day = pd.tseries.offsets.Day(3)"}
{"text": "Instance: pandas.tseries.offsets.Day.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Day.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Day.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Hour() # Timestamp('2022-12-09 16:00:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Hour() # Timestamp('2022-12-09 16:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Hour.delta\nOutput:\n```python\nhour = pd.tseries.offsets.Hour()\ndelta = hour.delta(hours=2)\n```", "code": "hour = pd.tseries.offsets.Hour()\ndelta = hour.delta(hours=2)"}
{"text": "Instance: pandas.tseries.offsets.Hour.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Hour.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Hour.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Hour.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Hour.normalize\nOutput:\n```python\nhour = pd.Timestamp('2022-12-31 23:45:00')\nnormalized_hour = hour.normalize()\n```", "code": "hour = pd.Timestamp('2022-12-31 23:45:00')\nnormalized_hour = hour.normalize()"}
{"text": "Instance: pandas.tseries.offsets.Hour.rule_code\nOutput:\n```python\nhour_offset = pd.tseries.offsets.Hour()\nhour_offset.rule_code # 'H'\n```", "code": "hour_offset = pd.tseries.offsets.Hour()\nhour_offset.rule_code # 'H'"}
{"text": "Instance: pandas.tseries.offsets.Hour.n\nOutput:\n```python\nhour = pd.tseries.offsets.Hour(n=3)\n```", "code": "hour = pd.tseries.offsets.Hour(n=3)"}
{"text": "Instance: pandas.tseries.offsets.Hour.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Hour.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Minute(n=10) # Timestamp('2022-12-09 15:10:00')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Minute(n=10) # Timestamp('2022-12-09 15:10:00')"}
{"text": "Instance: pandas.tseries.offsets.Minute.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Minute(15)\n```", "code": "delta = pd.tseries.offsets.Minute(15)"}
{"text": "Instance: pandas.tseries.offsets.Minute.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Minute.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Minute.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Minute.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Minute.normalize\nOutput:\n```python\npd.Timestamp('2022-12-31 23:59:00').normalize() # Output: Timestamp('2022-12-31 00:00:00')\n```", "code": "pd.Timestamp('2022-12-31 23:59:00').normalize() # Output: Timestamp('2022-12-31 00:00:00')"}
{"text": "Instance: pandas.tseries.offsets.Minute.rule_code\nOutput:\n```python\nrule = pd.tseries.offsets.Minute.rule_code\n```", "code": "rule = pd.tseries.offsets.Minute.rule_code"}
{"text": "Instance: pandas.tseries.offsets.Minute.n\nOutput:\n```python\noffset = pd.tseries.offsets.Minute(15)\n```", "code": "offset = pd.tseries.offsets.Minute(15)"}
{"text": "Instance: pandas.tseries.offsets.Minute.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Minute.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Second(n=10) # Timestamp('2022-12-09 15:00:10')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Second(n=10) # Timestamp('2022-12-09 15:00:10')"}
{"text": "Instance: pandas.tseries.offsets.Second.delta\nOutput:\n```python\nsecond = pd.tseries.offsets.Second()\nsecond.delta # outputs Timedelta('0 days 00:00:01')\n```", "code": "second = pd.tseries.offsets.Second()\nsecond.delta # outputs Timedelta('0 days 00:00:01')"}
{"text": "Instance: pandas.tseries.offsets.Second.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Second.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Second.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Second.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Second.normalize\nOutput:\n```python\nsecond = pd.tseries.offsets.Second(normalize=True)\n```", "code": "second = pd.tseries.offsets.Second(normalize=True)"}
{"text": "Instance: pandas.tseries.offsets.Second.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.Second.rule_code # returns the rule code for the Second offset\n```", "code": "code = pd.tseries.offsets.Second.rule_code # returns the rule code for the Second offset"}
{"text": "Instance: pandas.tseries.offsets.Second.n\nOutput:\n```python\nsecond_offset = pd.tseries.offsets.Second(n=5)\n```", "code": "second_offset = pd.tseries.offsets.Second(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Second.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Second.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Second.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Milli(n=10) # Timestamp('2022-12-09 15:00:00.010000')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Milli(n=10) # Timestamp('2022-12-09 15:00:00.010000')"}
{"text": "Instance: pandas.tseries.offsets.Milli.delta\nOutput:\n```python\nmilli_offset = pd.tseries.offsets.Milli()\nmilli_offset.delta # Timedelta('0 days 00:00:00.001000')\n```", "code": "milli_offset = pd.tseries.offsets.Milli()\nmilli_offset.delta # Timedelta('0 days 00:00:00.001000')"}
{"text": "Instance: pandas.tseries.offsets.Milli.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Milli.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Milli.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Milli.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Milli.normalize\nOutput:\n```python\nmilli_offset = pd.tseries.offsets.Milli()\nmilli_offset.normalize(pd.Timestamp('2022-12-31 23:59:59.999999999')) # returns Timestamp('2022-12-31 23:59:59.999999999')\n```", "code": "milli_offset = pd.tseries.offsets.Milli()\nmilli_offset.normalize(pd.Timestamp('2022-12-31 23:59:59.999999999')) # returns Timestamp('2022-12-31 23:59:59.999999999')"}
{"text": "Instance: pandas.tseries.offsets.Milli.rule_code\nOutput:\n```python\nmilli = pd.tseries.offsets.Milli()\nmilli.rule_code # outputs 'M'\n```", "code": "milli = pd.tseries.offsets.Milli()\nmilli.rule_code # outputs 'M'"}
{"text": "Instance: pandas.tseries.offsets.Milli.n\nOutput:\n```python\nmilli = pd.tseries.offsets.Milli(5)\n```", "code": "milli = pd.tseries.offsets.Milli(5)"}
{"text": "Instance: pandas.tseries.offsets.Milli.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Milli.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Micro(n=1000) # Timestamp('2022-12-09 15:00:00.001000')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Micro(n=1000) # Timestamp('2022-12-09 15:00:00.001000')"}
{"text": "Instance: pandas.tseries.offsets.Micro.delta\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro()\ndelta = micro.delta(days=1, seconds=10)\n```", "code": "micro = pd.tseries.offsets.Micro()\ndelta = micro.delta(days=1, seconds=10)"}
{"text": "Instance: pandas.tseries.offsets.Micro.freqstr\nOutput:\n```python\npd.DateOffset(5).freqstr # '<5 * DateOffsets>'\n```", "code": "pd.DateOffset(5).freqstr # '<5 * DateOffsets>'"}
{"text": "Instance: pandas.tseries.offsets.Micro.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Micro.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Micro.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Micro.normalize\nOutput:\n```python\nmicro = pd.Timestamp('2022-12-31 23:59:59.999999').normalize()\n```", "code": "micro = pd.Timestamp('2022-12-31 23:59:59.999999').normalize()"}
{"text": "Instance: pandas.tseries.offsets.Micro.rule_code\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro()\nmicro.rule_code # 'U'\n```", "code": "micro = pd.tseries.offsets.Micro()\nmicro.rule_code # 'U'"}
{"text": "Instance: pandas.tseries.offsets.Micro.n\nOutput:\n```python\nmicro = pd.tseries.offsets.Micro(n=5)\n```", "code": "micro = pd.tseries.offsets.Micro(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Micro.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n\nts = pd.Timestamp(2022, 8, 6)\nts.day_name() # 'Saturday'\nfreq = pd.offsets.BusinessDay(1)\nfreq.is_on_offset(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Micro.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano\nOutput:\n```python\nts = pd.Timestamp(2022, 12, 9, 15)\nts + Nano(n=1000) # Timestamp('2022-12-09 15:00:00.000001')\n```", "code": "ts = pd.Timestamp(2022, 12, 9, 15)\nts + Nano(n=1000) # Timestamp('2022-12-09 15:00:00.000001')"}
{"text": "Instance: pandas.tseries.offsets.Nano.delta\nOutput:\n```python\ndelta = pd.tseries.offsets.Nano()\n```", "code": "delta = pd.tseries.offsets.Nano()"}
{"text": "Instance: pandas.tseries.offsets.Nano.freqstr\nOutput:\n```python\npd.offsets.Nano().freqstr # 'ns'\n```", "code": "pd.offsets.Nano().freqstr # 'ns'"}
{"text": "Instance: pandas.tseries.offsets.Nano.kwds\nOutput:\n```python\npd.DateOffset(5).kwds\n```", "code": "pd.DateOffset(5).kwds"}
{"text": "Instance: pandas.tseries.offsets.Nano.name\nOutput:\n```python\npd.offsets.Hour().name # 'h'\n```", "code": "pd.offsets.Hour().name # 'h'"}
{"text": "Instance: pandas.tseries.offsets.Nano.nanos\nOutput:\n```python\npd.offsets.Hour(5).nanos # 18000000000000\n```", "code": "pd.offsets.Hour(5).nanos # 18000000000000"}
{"text": "Instance: pandas.tseries.offsets.Nano.normalize\nOutput:\n```python\noffset = pd.tseries.offsets.Nano()\nnormalized_offset = offset.normalize()\n```", "code": "offset = pd.tseries.offsets.Nano()\nnormalized_offset = offset.normalize()"}
{"text": "Instance: pandas.tseries.offsets.Nano.rule_code\nOutput:\n```python\ncode = pd.tseries.offsets.Nano.rule_code # outputs 'N'\n```", "code": "code = pd.tseries.offsets.Nano.rule_code # outputs 'N'"}
{"text": "Instance: pandas.tseries.offsets.Nano.n\nOutput:\n```python\nn = pd.tseries.offsets.Nano(n=5)\n```", "code": "n = pd.tseries.offsets.Nano(n=5)"}
{"text": "Instance: pandas.tseries.offsets.Nano.copy\nOutput:\n```python\nfreq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False\n```", "code": "freq = pd.DateOffset(1)\nfreq_copy = freq.copy()\nfreq is freq_copy # outputs False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_anchored\nOutput:\n```python\npd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False\n```", "code": "pd.offsets.Hour().is_anchored() # False\npd.offsets.Hour(2).is_anchored() # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_on_offset\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Day(1)\nfreq.is_on_offset(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_month_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_month_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_month_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_quarter_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_quarter_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_quarter_end(ts) # False"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_year_start\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_start(ts) # True"}
{"text": "Instance: pandas.tseries.offsets.Nano.is_year_end\nOutput:\n```python\nts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False\n```", "code": "ts = pd.Timestamp(2022, 1, 1)\nfreq = pd.offsets.Hour(5)\nfreq.is_year_end(ts) # False"}
{"text": "Instance: pandas.PeriodIndex.from_ordinals\nOutput:\n```python\nordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)\n```", "code": "ordinals = [1, 2, 3, 4, 5]\nfreq = 'M'\nperiod_index = pd.PeriodIndex.from_ordinals(ordinals, freq=freq)"}
{"text": "Instance: pandas.tseries.offsets.DateOffset\nOutput:\n```python\nts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')\n```", "code": "ts = pd.Timestamp('2017-01-01 09:10:11')\nts + DateOffset(months=3) # Timestamp('2017-04-01 09:10:11')"}
{"text": "Instance: pandas.core.window.rolling.Rolling.count\nOutput:\n```python\ns = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()\n```", "code": "s = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.sum\nOutput:\n```python\ndf = pd.DataFrame({\"Temperature\": [20, 25, 30, 35, 40], \"Humidity\": [50, 55, 60, 65, 70]})\ndf.rolling(2).sum()\n```\n", "code": "df = pd.DataFrame({\"Temperature\": [20, 25, 30, 35, 40], \"Humidity\": [50, 55, 60, 65, 70]})\ndf.rolling(2).sum()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.mean\nOutput:\n```python\ns = pd.Series([1, 2, 3, 4])\ns.rolling(2).mean() # Outputs rolling mean with window size 2\n```", "code": "s = pd.Series([1, 2, 3, 4])\ns.rolling(2).mean() # Outputs rolling mean with window size 2"}
{"text": "Instance: pandas.core.window.rolling.Rolling.median\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3, 4])\ns.rolling(3).median()\n```", "code": "s = pd.Series([0, 1, 2, 3, 4])\ns.rolling(3).median()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.var\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).var()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).var()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.std\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).std()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.rolling(3).std()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.min\nOutput:\n```python\ns = pd.Series([4, 3, 5, 2, 6])\ns.rolling(3).min() # outputs a Series with rolling minimum values\n```", "code": "s = pd.Series([4, 3, 5, 2, 6])\ns.rolling(3).min() # outputs a Series with rolling minimum values"}
{"text": "Instance: pandas.core.window.rolling.Rolling.max\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nser.rolling(2).max()\n# Output:\n# 0    NaN\n# 1    2.0\n# 2    3.0\n# 3    4.0\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.rolling(2).max()\n# Output:\n# 0    NaN\n# 1    2.0\n# 2    3.0\n# 3    4.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.rolling.Rolling.corr\nOutput:\n```python\ndf = pd.DataFrame(matrix, columns=['Temperature', 'Humidity'])\ndf.rolling(3).corr(pairwise=True)\n```", "code": "df = pd.DataFrame(matrix, columns=['Temperature', 'Humidity'])\ndf.rolling(3).corr(pairwise=True)"}
{"text": "Instance: pandas.core.window.rolling.Rolling.cov\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([1, 4, 5, 8])\nresult = ser1.rolling(2).cov(ser2) # calculates the rolling covariance between ser1 and ser2 with window size 2\n```", "code": "ser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([1, 4, 5, 8])\nresult = ser1.rolling(2).cov(ser2) # calculates the rolling covariance between ser1 and ser2 with window size 2"}
{"text": "Instance: pandas.core.window.rolling.Rolling.skew\nOutput:\n```python\nser = pd.Series([1, 5, 2, 7, 15, 6])\nser.rolling(3).skew().round(6)\n```", "code": "ser = pd.Series([1, 5, 2, 7, 15, 6])\nser.rolling(3).skew().round(6)"}
{"text": "Instance: pandas.core.window.rolling.Rolling.kurt\nOutput:\n```python\ns.rolling(4).kurt()\n```", "code": "s.rolling(4).kurt()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.apply\nOutput:\n```python\nser = pd.Series([1, 6, 5, 4])\nresult = ser.rolling(2).apply(lambda s: s.sum() - s.min())\n```", "code": "ser = pd.Series([1, 6, 5, 4])\nresult = ser.rolling(2).apply(lambda s: s.sum() - s.min())"}
{"text": "Instance: pandas.core.window.rolling.Rolling.aggregate\nOutput:\n```python\ndf.rolling(2).agg({\"A\": \"sum\", \"B\": \"min\"})\n```", "code": "df.rolling(2).agg({\"A\": \"sum\", \"B\": \"min\"})"}
{"text": "Instance: pandas.core.window.rolling.Rolling.quantile\nOutput:\n```python\ns.rolling(2).quantile(.4, interpolation='lower')\n```", "code": "s.rolling(2).quantile(.4, interpolation='lower')"}
{"text": "Instance: pandas.core.window.rolling.Rolling.sem\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3])\ns.rolling(2, min_periods=1).sem()\n```", "code": "s = pd.Series([0, 1, 2, 3])\ns.rolling(2, min_periods=1).sem()"}
{"text": "Instance: pandas.core.window.rolling.Rolling.rank\nOutput:\n```python\ns = pd.Series([1, 4, 2, 3, 5, 3])\ns.rolling(3).rank()\n```", "code": "s = pd.Series([1, 4, 2, 3, 5, 3])\ns.rolling(3).rank()"}
{"text": "Instance: pandas.core.window.rolling.Window.mean\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').mean(std=3)\nprint(result)\n# Output:\n# 0    NaN\n# 1    0.5\n# 2    3.0\n# 3    3.5\n# 4    5.0\n# dtype: float64\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').mean(std=3)\nprint(result)\n# Output:\n# 0    NaN\n# 1    0.5\n# 2    3.0\n# 3    3.5\n# 4    5.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.rolling.Window.sum\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').sum(std=3)\nprint(result)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').sum(std=3)\nprint(result)"}
{"text": "Instance: pandas.core.window.rolling.Window.var\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nser.rolling(2, win_type='gaussian').var(std=3)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nser.rolling(2, win_type='gaussian').var(std=3)"}
{"text": "Instance: pandas.core.window.rolling.Window.std\nOutput:\n```python\nser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').std(std=3)\nprint(result)\n```", "code": "ser = pd.Series([0, 1, 5, 2, 8])\nresult = ser.rolling(2, win_type='gaussian').std(std=3)\nprint(result)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.count\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nresult = ser.expanding().count()\nresult\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nresult = ser.expanding().count()\nresult"}
{"text": "Instance: pandas.core.window.expanding.Expanding.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().sum()\n# Output:\n# a     1.0\n# b     3.0\n# c     6.0\n# d    10.0\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().sum()\n# Output:\n# a     1.0\n# b     3.0\n# c     6.0\n# d    10.0\n# dtype: float64"}
{"text": "Instance: pandas.core.window.expanding.Expanding.mean\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().mean()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().mean()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.median\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().median()\n# Output:\n# a    1.0\n# b    1.5\n# c    2.0\n# d    2.5\n# dtype: float64\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().median()\n# Output:\n# a    1.0\n# b    1.5\n# c    2.0\n# d    2.5\n# dtype: float64"}
{"text": "Instance: pandas.core.window.expanding.Expanding.var\nOutput:\n```python\ns = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.expanding(3).var()\n```", "code": "s = pd.Series([5, 5, 6, 7, 5, 5, 5])\ns.expanding(3).var()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.std\nOutput:\n```python\ns.expanding(3).std()\n```", "code": "s.expanding(3).std()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.min\nOutput:\n```python\nser = pd.Series([2, 3, 4, 1], index=['a', 'b', 'c', 'd'])\nser.expanding().min()\n```", "code": "ser = pd.Series([2, 3, 4, 1], index=['a', 'b', 'c', 'd'])\nser.expanding().min()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.max\nOutput:\n```python\nser = pd.Series([3, 2, 1, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().max()\n```", "code": "ser = pd.Series([3, 2, 1, 4], index=['a', 'b', 'c', 'd'])\nser.expanding().max()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.corr\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser2 = pd.Series([10, 11, 13, 16], index=['a', 'b', 'c', 'd'])\nresult = ser1.expanding().corr(ser2)\nresult\n```\n", "code": "ser1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])\nser2 = pd.Series([10, 11, 13, 16], index=['a', 'b', 'c', 'd'])\nresult = ser1.expanding().corr(ser2)\nresult"}
{"text": "Instance: pandas.core.window.expanding.Expanding.cov\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4], index=['apple', 'banana', 'cherry', 'date'])\nser2 = pd.Series([10, 11, 13, 16], index=['apple', 'banana', 'cherry', 'date'])\nresult = ser1.expanding().cov(ser2)\n```", "code": "ser1 = pd.Series([1, 2, 3, 4], index=['apple', 'banana', 'cherry', 'date'])\nser2 = pd.Series([10, 11, 13, 16], index=['apple', 'banana', 'cherry', 'date'])\nresult = ser1.expanding().cov(ser2)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.skew\nOutput:\n```python\nser = pd.Series([-1, 0, 2, -1, 2], index=['a', 'b', 'c', 'd', 'e'])\nser.expanding().skew()\n```", "code": "ser = pd.Series([-1, 0, 2, -1, 2], index=['a', 'b', 'c', 'd', 'e'])\nser.expanding().skew()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.kurt\nOutput:\n```python\ns.expanding(4).kurt()\n```", "code": "s.expanding(4).kurt()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.apply\nOutput:\n```python\nser.expanding().apply(lambda s: s.max() - 2 * s.min())\n```", "code": "ser.expanding().apply(lambda s: s.max() - 2 * s.min())"}
{"text": "Instance: pandas.core.window.expanding.Expanding.aggregate\nOutput:\n```python\ndf.expanding().aggregate({\"A\": \"sum\", \"B\": \"mean\", \"C\": \"max\"})\n```", "code": "df.expanding().aggregate({\"A\": \"sum\", \"B\": \"mean\", \"C\": \"max\"})"}
{"text": "Instance: pandas.core.window.expanding.Expanding.quantile\nOutput:\n```python\nser.expanding(min_periods=4).quantile(.25)\n```", "code": "ser.expanding(min_periods=4).quantile(.25)"}
{"text": "Instance: pandas.core.window.expanding.Expanding.sem\nOutput:\n```python\ns = pd.Series([0, 1, 2, 3])\ns.expanding().sem()\n```", "code": "s = pd.Series([0, 1, 2, 3])\ns.expanding().sem()"}
{"text": "Instance: pandas.core.window.expanding.Expanding.rank\nOutput:\n```python\ns.expanding().rank(method=\"min\")\n```", "code": "s.expanding().rank(method=\"min\")"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.mean\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nresult = ser.ewm(alpha=.2).mean()\nresult\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nresult = ser.ewm(alpha=.2).mean()\nresult"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).sum()\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).sum()"}
{"text": "```python\nser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).std()\n```", "code": "ser = pd.Series([1, 2, 3, 4])\nser.ewm(alpha=.2).std()"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.var\nOutput:\n```python\nser.ewm(alpha=.2).var()\n```", "code": "ser.ewm(alpha=.2).var()"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.corr\nOutput:\n```python\nser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([10, 11, 13, 16])\nresult = ser1.ewm(alpha=.2).corr(ser2)\n```", "code": "ser1 = pd.Series([1, 2, 3, 4])\nser2 = pd.Series([10, 11, 13, 16])\nresult = ser1.ewm(alpha=.2).corr(ser2)"}
{"text": "Instance: pandas.core.window.ewm.ExponentialMovingWindow.cov\nOutput:\n```python\nser1.ewm(alpha=.2).cov(ser2)\n```", "code": "ser1.ewm(alpha=.2).cov(ser2)"}
{"text": "Instance: pandas.api.indexers.BaseIndexer\nOutput:\n```python\nclass CustomIndexer(BaseIndexer):\n    def get_window_bounds(self, num_values, min_periods, center, closed, step):\n        start = np.empty(num_values, dtype=np.int64)\n        end = np.empty(num_values, dtype=np.int64)\n        for i in range(num_values):\n            start[i] = i\n            end[i] = i + self.window_size\n        return start, end\n```", "code": "class CustomIndexer(BaseIndexer):\n    def get_window_bounds(self, num_values, min_periods, center, closed, step):\n        start = np.empty(num_values, dtype=np.int64)\n        end = np.empty(num_values, dtype=np.int64)\n        for i in range(num_values):\n            start[i] = i\n            end[i] = i + self.window_size\n        return start, end"}
{"text": "Instance: pandas.api.indexers.FixedForwardWindowIndexer\nOutput:\n```python\nindexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\ndf.rolling(window=indexer, min_periods=1).sum()\n```", "code": "indexer = pd.api.indexers.FixedForwardWindowIndexer(window_size=2)\ndf.rolling(window=indexer, min_periods=1).sum()"}
{"text": "Instance: pandas.api.indexers.VariableOffsetWindowIndexer\nOutput:\n```python\nindexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))\n```", "code": "indexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))"}
{"text": "Instance: pandas.tseries.frequencies.to_offset\nOutput:\n```python\noffset = pd.tseries.frequencies.to_offset(\"3H\")\n```", "code": "offset = pd.tseries.frequencies.to_offset(\"3H\")"}
{"text": "Instance: pandas.core.window.rolling.Rolling.count\nOutput:\n```python\ns = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()\n```", "code": "s = pd.Series([2, 3, np.nan, 10])\ns.rolling(2).count()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.__iter__\nOutput:\n```python\nfor x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.__iter__\nOutput:\n```python\nfor x, y in ser.groupby(level=0):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in ser.groupby(level=0):\n    print(f'{x}\\n{y}\\n')"}
{"text": "```python\ndf.groupby(by=[\"a\"]).groups # {1: [0, 1], 7: [2]} for a DataFrame df with column 'a' containing [1, 1, 7]\n```", "code": "df.groupby(by=[\"a\"]).groups # {1: [0, 1], 7: [2]} for a DataFrame df with column 'a' containing [1, 1, 7]"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.groups\nOutput:\n```python\nser.groupby(level=0).groups # {'a': ['a', 'a'], 'b': ['b']} for a Series ser with index ['a', 'a', 'b'] and values [1, 2, 3]\n```", "code": "ser.groupby(level=0).groups # {'a': ['a', 'a'], 'b': ['b']} for a Series ser with index ['a', 'a', 'b'] and values [1, 2, 3]"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.indices\nOutput:\n```python\ndf.groupby(by=[\"a\"]).indices # {1: array([0, 1]), 7: array([2])} for a DataFrame df with column 'a' containing [1, 1, 7]\n```", "code": "df.groupby(by=[\"a\"]).indices # {1: array([0, 1]), 7: array([2])} for a DataFrame df with column 'a' containing [1, 1, 7]"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.indices\nOutput:\n```python\nser.groupby(level=0).indices # {'a': array([0, 1]), 'b': array([2])} for a Series ser grouped by level 0\n```", "code": "ser.groupby(level=0).indices # {'a': array([0, 1]), 'b': array([2])} for a Series ser grouped by level 0"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.get_group\nOutput:\n```python\ndf.groupby(by=[\"category\"]).get_group(\"fruit\") # returns a DataFrame with rows where the 'category' column is equal to 'fruit'\n```", "code": "df.groupby(by=[\"category\"]).get_group(\"fruit\") # returns a DataFrame with rows where the 'category' column is equal to 'fruit'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.get_group\nOutput:\n```python\nser = pd.Series([1, 2, 3], index=['a', 'a', 'b'])\ngrouped = ser.groupby(level=0)\ngrouped.get_group(\"a\") # returns a Series with values where index is 'a'\n```", "code": "ser = pd.Series([1, 2, 3], index=['a', 'a', 'b'])\ngrouped = ser.groupby(level=0)\ngrouped.get_group(\"a\") # returns a Series with values where index is 'a'"}
{"text": "Instance: pandas.Grouper\nOutput:\n```python\ndf.groupby(pd.Grouper(key=\"Animal\")).mean()\n```", "code": "df.groupby(pd.Grouper(key=\"Animal\")).mean()"}
{"text": "Instance: pandas.NamedAgg\nOutput:\n```python\nagg_min = pd.NamedAgg(column=\"temperature\", aggfunc=\"min\")\nagg_max = pd.NamedAgg(column=\"humidity\", aggfunc=\"max\")\ndf.groupby(\"location\").agg(min_temp=agg_min, max_humidity=agg_max)\n```", "code": "agg_min = pd.NamedAgg(column=\"temperature\", aggfunc=\"min\")\nagg_max = pd.NamedAgg(column=\"humidity\", aggfunc=\"max\")\ndf.groupby(\"location\").agg(min_temp=agg_min, max_humidity=agg_max)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.apply\nOutput:\n```python\ng1.apply(lambda x: x * 2 if x.name == 'a' else x / 2)\n```", "code": "g1.apply(lambda x: x * 2 if x.name == 'a' else x / 2)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.apply\nOutput:\n```python\ng1[['Temperature', 'Humidity']].apply(lambda x: x / x.sum())\n```", "code": "g1[['Temperature', 'Humidity']].apply(lambda x: x / x.sum())"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.agg\nOutput:\n```python\ns.groupby([1, 1, 2, 2]).agg(['min', 'max'])\n```", "code": "s.groupby([1, 1, 2, 2]).agg(['min', 'max'])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.agg\nOutput:\n```python\ndf.groupby('A').agg('min')\n```", "code": "df.groupby('A').agg('min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.aggregate\nOutput:\n```python\ns.groupby([1, 1, 2, 2]).agg(['min', 'max'])\n```", "code": "s.groupby([1, 1, 2, 2]).agg(['min', 'max'])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.aggregate\nOutput:\n```python\ndf.groupby('A').agg('min')\n```", "code": "df.groupby('A').agg('min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.transform\nOutput:\n```python\ngrouped.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "grouped.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.transform\nOutput:\n```python\ngrouped = df.groupby('Category')[['Sales', 'Profit']]\ngrouped.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "grouped = df.groupby('Category')[['Sales', 'Profit']]\ngrouped.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.pipe\nOutput:\n```python\ndf.groupby('A').pipe(lambda x: x.max() - x.min())\n```", "code": "df.groupby('A').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.pipe\nOutput:\n```python\ndf.groupby('A').pipe(lambda x: x.max() - x.min())\n```", "code": "df.groupby('A').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.filter\nOutput:\n```python\ngrouped.filter(lambda x: x['Temperature'].mean() > 25)\n```", "code": "grouped.filter(lambda x: x['Temperature'].mean() > 25)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.filter\nOutput:\n```python\ndf = pd.DataFrame({'Category' : ['fruit', 'vegetable', 'fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'Price' : [2, 3, 4, 5, 6, 7],\n                   'Quantity' : [10, 20, 30, 40, 50, 60]})\ngrouped = df.groupby('Category')\ndf.groupby('Category').Price.filter(lambda x: x.mean() > 4)\n```", "code": "df = pd.DataFrame({'Category' : ['fruit', 'vegetable', 'fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'Price' : [2, 3, 4, 5, 6, 7],\n                   'Quantity' : [10, 20, 30, 40, 50, 60]})\ngrouped = df.groupby('Category')\ndf.groupby('Category').Price.filter(lambda x: x.mean() > 4)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.all\nOutput:\n```python\ndf.groupby(by=[\"category\"]).all() # returns a DataFrame with boolean values indicating if all values in each group are True\n```", "code": "df.groupby(by=[\"category\"]).all() # returns a DataFrame with boolean values indicating if all values in each group are True"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.any\nOutput:\n```python\ndf.groupby(by=[\"category\"]).any() # returns a DataFrame indicating whether any element in each group is True\n```", "code": "df.groupby(by=[\"category\"]).any() # returns a DataFrame indicating whether any element in each group is True"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.bfill\nOutput:\n```python\ndf.groupby(level=0).bfill() # fills NaN values with the next non-null value within each group\n```", "code": "df.groupby(level=0).bfill() # fills NaN values with the next non-null value within each group"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.corr\nOutput:\n```python\ndf = pd.DataFrame([(0.2, 0.3), (0.0, 0.6), (0.6, 0.0), (0.2, 0.1)], columns=['height', 'weight'])\ndf.corr(method=histogram_intersection)\n```", "code": "df = pd.DataFrame([(0.2, 0.3), (0.0, 0.6), (0.6, 0.0), (0.2, 0.1)], columns=['height', 'weight'])\ndf.corr(method=histogram_intersection)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.corrwith\nOutput:\n```python\ndf1.corrwith(df2)\n```\n```python\ndf2.corrwith(df1, axis=1)\n```", "code": "df1.corrwith(df2)\ndf2.corrwith(df1, axis=1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.count\nOutput:\n```python\ndf.groupby(\"category\").count() # returns the count of non-NA/null values in each column for each category in the DataFrame\n```", "code": "df.groupby(\"category\").count() # returns the count of non-NA/null values in each column for each category in the DataFrame"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cov\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(20, 3), columns=['temperature', 'humidity', 'pressure'])\ndf.loc[df.index[:5], 'temperature'] = np.nan\ndf.loc[df.index[5:10], 'humidity'] = np.nan\ndf.cov(min_periods=12)\n```", "code": "df = pd.DataFrame(np.random.randn(20, 3), columns=['temperature', 'humidity', 'pressure'])\ndf.loc[df.index[:5], 'temperature'] = np.nan\ndf.loc[df.index[5:10], 'humidity'] = np.nan\ndf.cov(min_periods=12)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumcount\nOutput:\n```python\ndf = pd.DataFrame([['apple'], ['apple'], ['banana'], ['banana'], ['banana'], ['apple']],\n                  columns=['Fruit'])\ndf.groupby('Fruit').cumcount()\n```", "code": "df = pd.DataFrame([['apple'], ['apple'], ['banana'], ['banana'], ['banana'], ['apple']],\n                  columns=['Fruit'])\ndf.groupby('Fruit').cumcount()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cummax\nOutput:\n```python\ndf.groupby(\"Category\").cummax()\n```", "code": "df.groupby(\"Category\").cummax()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cummin\nOutput:\n```python\ndf.groupby(\"b\").cummin() # returns the cumulative minimum for each group based on column 'b'\n```", "code": "df.groupby(\"b\").cummin() # returns the cumulative minimum for each group based on column 'b'"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumprod\nOutput:\n```python\ndf.groupby(\"a\").cumprod()\n```", "code": "df.groupby(\"a\").cumprod()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.cumsum\nOutput:\n```python\ndf.groupby(\"a\").cumsum()\n```", "code": "df.groupby(\"a\").cumsum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.describe\nOutput:\n```python\ndf.groupby('Category').describe()\n```", "code": "df.groupby('Category').describe()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.diff\nOutput:\n```python\ndf.groupby(level=0).diff()\n```", "code": "df.groupby(level=0).diff()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ffill\nOutput:\n```python\ndf = pd.DataFrame(\n    {\n        \"category\": [\"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"X\": [np.nan, 2, np.nan, 3, np.nan],\n        \"Y\": [2, 3, np.nan, np.nan, np.nan],\n        \"Z\": [np.nan, np.nan, 2, np.nan, np.nan],\n    }\n)\n\ndf.groupby(\"category\").ffill()\n```", "code": "df = pd.DataFrame(\n    {\n        \"category\": [\"A\", \"A\", \"B\", \"B\", \"B\"],\n        \"X\": [np.nan, 2, np.nan, 3, np.nan],\n        \"Y\": [2, 3, np.nan, np.nan, np.nan],\n        \"Z\": [np.nan, np.nan, 2, np.nan, np.nan],\n    }\n)\n\ndf.groupby(\"category\").ffill()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.fillna\nOutput:\n```python\ndf.groupby(\"key\").fillna(method=\"ffill\")\n```", "code": "df.groupby(\"key\").fillna(method=\"ffill\")"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()\n```\n", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.head\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['X', 'Y'])\ndf.groupby('X').head(1) # returns the first row of each group based on column 'X'\n```", "code": "df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['X', 'Y'])\ndf.groupby('X').head(1) # returns the first row of each group based on column 'X'"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.idxmax\nOutput:\n```python\ndf.idxmax() # returns the index label of the maximum value in each column\n```", "code": "df.idxmax() # returns the index label of the maximum value in each column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.idxmin\nOutput:\n```python\ndf.idxmin() # returns the index label of the minimum value in each column\n```", "code": "df.idxmin() # returns the index label of the minimum value in each column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3\n```", "code": "df = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.max\nOutput:\n```python\ndf.groupby(\"Category\").max() # returns the maximum value for each column within each group defined by the 'Category' column\n```", "code": "df.groupby(\"Category\").max() # returns the maximum value for each column within each group defined by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.mean\nOutput:\n```python\ndf = pd.DataFrame({'Country': ['USA', 'Canada', 'USA', 'Mexico', 'Canada'],\n                   'Population': [100, 50, 80, 30, 60],\n                   'GDP': [5000, 3000, 4500, 1500, 3500]}, columns=['Country', 'Population', 'GDP'])\n\ndf.groupby('Country').mean()\n```\n", "code": "df = pd.DataFrame({'Country': ['USA', 'Canada', 'USA', 'Mexico', 'Canada'],\n                   'Population': [100, 50, 80, 30, 60],\n                   'GDP': [5000, 3000, 4500, 1500, 3500]}, columns=['Country', 'Population', 'GDP'])\n\ndf.groupby('Country').mean()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.median\nOutput:\n```python\ndf.groupby(level=0).median() # returns the median value for each group in the DataFrameGroupBy object\n```", "code": "df.groupby(level=0).median() # returns the median value for each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.min\nOutput:\n```python\ndf.groupby(\"Category\").min() # returns the minimum value for each group in the DataFrame df grouped by the 'Category' column\n```", "code": "df.groupby(\"Category\").min() # returns the minimum value for each group in the DataFrame df grouped by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ngroup\nOutput:\n```python\ndf.groupby(\"color\").ngroup()\n```", "code": "df.groupby(\"color\").ngroup()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.nth\nOutput:\n```python\ng = df.groupby('A')\ng.nth(0)\n```", "code": "g = df.groupby('A')\ng.nth(0)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.nunique\nOutput:\n```python\ndf = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'color': ['red', 'green', 'yellow', 'green'],\n                   'shape': ['round', 'long', 'round', 'long']})\n\ngrouped = df.groupby('category').nunique()\nprint(grouped)\n```\nThis will output:\n```\n           color  shape\ncategory               \nfruit          2      1\nvegetable      1      2\n```", "code": "df = pd.DataFrame({'category': ['fruit', 'vegetable', 'fruit', 'vegetable'],\n                   'color': ['red', 'green', 'yellow', 'green'],\n                   'shape': ['round', 'long', 'round', 'long']})\n\ngrouped = df.groupby('category').nunique()\nprint(grouped)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.ohlc\nOutput:\n```python\ndf.groupby(level=0).ohlc()\n```", "code": "df.groupby(level=0).ohlc()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.pct_change\nOutput:\n```python\ndf.groupby(\"Category\").pct_change()\n```", "code": "df.groupby(\"Category\").pct_change()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.prod\nOutput:\n```python\ndf.groupby(\"Category\").prod() # calculates the product of each group in the DataFrame df grouped by the 'Category' column\n```", "code": "df.groupby(\"Category\").prod() # calculates the product of each group in the DataFrame df grouped by the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.quantile\nOutput:\n```python\ndf.groupby('key').quantile() # returns the quantile values for each group in the DataFrame\n```", "code": "df.groupby('key').quantile() # returns the quantile values for each group in the DataFrame"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.rank\nOutput:\n```python\ndf['rank'] = df.groupby('group')['value'].rank(method='min')\n```", "code": "df['rank'] = df.groupby('group')['value'].rank(method='min')"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.resample\nOutput:\n```python\ndf.groupby('category').resample('W', on='date').sum()\n```", "code": "df.groupby('category').resample('W', on='date').sum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.rolling\nOutput:\n```python\ndf.groupby('A').rolling(2).sum()\n```", "code": "df.groupby('A').rolling(2).sum()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sample\nOutput:\n```python\ndf.groupby(\"a\").sample(n=1, random_state=1)\n```", "code": "df.groupby(\"a\").sample(n=1, random_state=1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sem\nOutput:\n```python\ndf.groupby(\"category\").sem() # calculates the standard error of the mean for each group in the DataFrame df based on the 'category' column\n```", "code": "df.groupby(\"category\").sem() # calculates the standard error of the mean for each group in the DataFrame df based on the 'category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.shift\nOutput:\n```python\ndf.groupby(\"Category\").shift(1)\n```", "code": "df.groupby(\"Category\").shift(1)"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.size\nOutput:\n```python\ndf.groupby(\"Category\").size() # returns the size of each group in the DataFrameGroupBy object\n```", "code": "df.groupby(\"Category\").size() # returns the size of each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.skew\nOutput:\n```python\ngb = df.groupby([\"class\"])\ngb.skew()\n```", "code": "gb = df.groupby([\"class\"])\ngb.skew()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.std\nOutput:\n```python\ndf.groupby(level=0).std()\n```", "code": "df.groupby(level=0).std()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.sum\nOutput:\n```python\ndf.groupby(\"Category\").sum() # sums up the values in each group based on the 'Category' column\n```", "code": "df.groupby(\"Category\").sum() # sums up the values in each group based on the 'Category' column"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.var\nOutput:\n```python\ndf.groupby(level=0).var() # calculates the variance for each group in the DataFrameGroupBy object\n```", "code": "df.groupby(level=0).var() # calculates the variance for each group in the DataFrameGroupBy object"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.tail\nOutput:\n```python\ndf = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()\n```", "code": "df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.take\nOutput:\n```python\ngb.take([0, 1])\n```", "code": "gb.take([0, 1])"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.value_counts\nOutput:\n```python\ndf.groupby('gender').value_counts()\n```", "code": "df.groupby('gender').value_counts()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.all\nOutput:\n```python\nresult = ser.groupby(level=0).all() # returns a boolean Series indicating if all elements in each group are True\n```", "code": "result = ser.groupby(level=0).all() # returns a boolean Series indicating if all elements in each group are True"}
{"text": "```python\ndf.groupby(by=[\"a\"]).any()\n```", "code": "df.groupby(by=[\"a\"]).any()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.bfill\nOutput:\n```python\ns.groupby(level=0).bfill()\n```", "code": "s.groupby(level=0).bfill()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.corr\nOutput:\n```python\ns1 = pd.Series([.2, .0, .6, .2])\ns2 = pd.Series([.3, .6, .0, .1])\ns1.corr(s2, method=histogram_intersection) # 0.3\n```", "code": "s1 = pd.Series([.2, .0, .6, .2])\ns2 = pd.Series([.3, .6, .0, .1])\ns1.corr(s2, method=histogram_intersection) # 0.3"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.count\nOutput:\n```python\nser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\n# Output:\n# a    2\n# b    0\n# dtype: int64\n```", "code": "ser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\n# Output:\n# a    2\n# b    0\n# dtype: int64"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cov\nOutput:\n```python\ns1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874\n```", "code": "s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])\ns2 = pd.Series([0.12528585, 0.26962463, 0.51111198])\ns1.cov(s2) # -0.01685762652715874"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumcount\nOutput:\n```python\ndf = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']], columns=['Category'])\ndf.groupby('Category').cumcount()\n```", "code": "df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']], columns=['Category'])\ndf.groupby('Category').cumcount()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cummax\nOutput:\n```python\nser = pd.Series([1, 6, 2, 3, 1, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummax()\n```", "code": "ser = pd.Series([1, 6, 2, 3, 1, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummax()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cummin\nOutput:\n```python\nser = pd.Series([1, 6, 2, 3, 0, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummin()\nresult\n```", "code": "ser = pd.Series([1, 6, 2, 3, 0, 4], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).cummin()\nresult"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumprod\nOutput:\n```python\nser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumprod()\n```", "code": "ser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumprod()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.cumsum\nOutput:\n```python\nser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumsum()\nresult\n```", "code": "ser = pd.Series([6, 2, 0], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).cumsum()\nresult"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.describe\nOutput:\n```python\ns = pd.Series(['a', 'b', 'c'])\ns.describe()\n```", "code": "s = pd.Series(['a', 'b', 'c'])\ns.describe()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.diff\nOutput:\n```python\nser.groupby(level=0).diff()\n```", "code": "ser.groupby(level=0).diff()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ffill\nOutput:\n```python\nser = pd.Series([np.nan, 2, 3, np.nan], index=[0, 0, 1, 1])\nresult = ser.groupby(level=0).ffill()\nprint(result)\n```", "code": "ser = pd.Series([np.nan, 2, 3, np.nan], index=[0, 0, 1, 1])\nresult = ser.groupby(level=0).ffill()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.fillna\nOutput:\n```python\nser = pd.Series([1, None, None, 2, None], index=['cat', 'cat', 'cat', 'mouse', 'mouse'])\nfilled_ser = ser.groupby(level=0).fillna(0, limit=1)\nfilled_ser\n```", "code": "ser = pd.Series([1, None, None, 2, None], index=['cat', 'cat', 'cat', 'mouse', 'mouse'])\nfilled_ser = ser.groupby(level=0).fillna(0, limit=1)\nfilled_ser"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()\n```", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9]))\ndf.groupby(\"X\").first()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.head\nOutput:\n```python\ndf = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['Height', 'Weight'])\ndf.groupby('Height').head(1) # returns the first row of each group based on 'Height'\n```", "code": "df = pd.DataFrame([[1, 2], [1, 4], [5, 6]], columns=['Height', 'Weight'])\ndf.groupby('Height').head(1) # returns the first row of each group based on 'Height'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3\n```", "code": "df = pd.DataFrame(dict(X=[1, 1, 3], Y=[5, None, 6], Z=[1, 2, 3]))\ndf.groupby(\"X\").last()\n# Output:\n#    Y  Z\n# X\n# 1  5.0  2\n# 3  6.0  3"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.idxmax\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'\n\ns.idxmax(skipna=False) # Output: nan\n```", "code": "s = pd.Series(data=[1, None, 4, 3, 4], index=['A', 'B', 'C', 'D', 'E'])\ns.idxmax() # Output: 'C'\n\ns.idxmax(skipna=False) # Output: nan"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.idxmin\nOutput:\n```python\ns = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # 'A'\n```", "code": "s = pd.Series(data=[1, None, 4, 1], index=['A', 'B', 'C', 'D'])\ns.idxmin() # 'A'"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.is_monotonic_increasing\nOutput:\n```python\ns = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_increasing\n# Output:\n# Falcon    False\n# Parrot     True\n# dtype: bool\n```", "code": "s = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_increasing\n# Output:\n# Falcon    False\n# Parrot     True\n# dtype: bool"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.is_monotonic_decreasing\nOutput:\n```python\ns = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_decreasing\n# Output:\n# Falcon     True\n# Parrot    False\n# dtype: bool\n```", "code": "s = pd.Series([2, 1, 3, 4], index=['Falcon', 'Falcon', 'Parrot', 'Parrot'])\ns.groupby(level=0).is_monotonic_decreasing\n# Output:\n# Falcon     True\n# Parrot    False\n# dtype: bool"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.max\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).max()\nprint(result)\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).max()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.mean\nOutput:\n```python\ndf = pd.DataFrame({'X': [1, 2, 3, 4, 5],\n                   'Y': [10, 20, 30, 40, 50],\n                   'Z': [100, 200, 300, 400, 500]})\n\ngrouped = df.groupby('X').mean()\nprint(grouped)\n```\nThis will output:\n```\n     Y    Z\nX          \n1  10  100\n2  20  200\n3  30  300\n4  40  400\n5  50  500\n```", "code": "df = pd.DataFrame({'X': [1, 2, 3, 4, 5],\n                   'Y': [10, 20, 30, 40, 50],\n                   'Z': [100, 200, 300, 400, 500]})\n\ngrouped = df.groupby('X').mean()\nprint(grouped)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.median\nOutput:\n```python\nser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).median()\n```", "code": "ser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).median()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.min\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).min()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).min()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ngroup\nOutput:\n```python\ndf.groupby(\"color\").ngroup()\n```", "code": "df.groupby(\"color\").ngroup()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nlargest\nOutput:\n```python\ns.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties\n```", "code": "s.nlargest(3, keep='last') # Outputs the 3 largest values in the Series, keeping the last occurrence in case of ties"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nsmallest\nOutput:\n```python\ns.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')\n```", "code": "s.nsmallest()\ns.nsmallest(3)\ns.nsmallest(3, keep='last')\ns.nsmallest(3, keep='all')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nth\nOutput:\n```python\ng = df.groupby('A')\ng.nth(0)\n```", "code": "g = df.groupby('A')\ng.nth(0)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.nunique\nOutput:\n```python\nser.groupby(level=0).nunique()\n```", "code": "ser.groupby(level=0).nunique()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.unique\nOutput:\n```python\nser = df.groupby('animal')['breed'].unique()\n```", "code": "ser = df.groupby('animal')['breed'].unique()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.ohlc\nOutput:\n```python\nser.groupby(level=0).ohlc()\n```", "code": "ser.groupby(level=0).ohlc()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.pct_change\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).pct_change()\nprint(result)\n```\n", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).pct_change()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.prod\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).prod()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).prod()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.quantile\nOutput:\n```python\ndf = pd.DataFrame([\n    ['apple', 10], ['apple', 20], ['apple', 30],\n    ['banana', 15], ['banana', 25], ['banana', 35]\n], columns=['fruit', 'price'])\ndf.groupby('fruit').quantile()\n```", "code": "df = pd.DataFrame([\n    ['apple', 10], ['apple', 20], ['apple', 30],\n    ['banana', 15], ['banana', 25], ['banana', 35]\n], columns=['fruit', 'price'])\ndf.groupby('fruit').quantile()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.rank\nOutput:\n```python\ndf['rank'] = df.groupby('category')['value'].rank(method='min')\n```", "code": "df['rank'] = df.groupby('category')['value'].rank(method='min')"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.resample\nOutput:\n```python\ndf.groupby('Category').resample('W', include_groups=False).mean()\n```", "code": "df.groupby('Category').resample('W', include_groups=False).mean()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.rolling\nOutput:\n```python\ndf.groupby('A').rolling(2).sum()\n```", "code": "df.groupby('A').rolling(2).sum()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sample\nOutput:\n```python\ndf.groupby(\"a\")[\"b\"].sample(frac=0.5, random_state=2)\n```", "code": "df.groupby(\"a\")[\"b\"].sample(frac=0.5, random_state=2)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sem\nOutput:\n```python\nser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\nprint(result)\n```\n```python\ndata = [[1, 12, 11], [1, 15, 2], [2, 5, 8], [2, 6, 12]]\ndf = pd.DataFrame(data, columns=[\"Astronomy\", \"Chemistry\", \"Physics\"],\n                  index=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\"])\nresult = df.groupby(\"Astronomy\").sem()\nprint(result)\n```\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8],\n                index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nresult = ser.resample('MS').sem()\nprint(result)\n```", "code": "ser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\nprint(result)\ndata = [[1, 12, 11], [1, 15, 2], [2, 5, 8], [2, 6, 12]]\ndf = pd.DataFrame(data, columns=[\"Astronomy\", \"Chemistry\", \"Physics\"],\n                  index=[\"Mercury\", \"Venus\", \"Earth\", \"Mars\"])\nresult = df.groupby(\"Astronomy\").sem()\nprint(result)\nser = pd.Series([1, 3, 2, 4, 3, 8],\n                index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nresult = ser.resample('MS').sem()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.shift\nOutput:\n```python\nser.groupby(level=0).shift(1)\n```", "code": "ser.groupby(level=0).shift(1)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.size\nOutput:\n```python\nser.groupby(level=0).size() # returns a Series with the count of each group in the SeriesGroupBy object\n```", "code": "ser.groupby(level=0).size() # returns a Series with the count of each group in the SeriesGroupBy object"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.skew\nOutput:\n```python\nser = pd.Series([390., 350., 357., np.nan, 22., 20., 30.], index=['Falcon', 'Falcon', 'Falcon', 'Falcon', 'Parrot', 'Parrot', 'Parrot'], name=\"Max Speed\")\nser.groupby(level=0).skew()\n```", "code": "ser = pd.Series([390., 350., 357., np.nan, 22., 20., 30.], index=['Falcon', 'Falcon', 'Falcon', 'Falcon', 'Parrot', 'Parrot', 'Parrot'], name=\"Max Speed\")\nser.groupby(level=0).skew()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.std\nOutput:\n```python\nser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).std()\nprint(result)\n```\n```python\ndata = {'science': [1, 3, 5, 7, 7, 8, 3], 'math': [1, 4, 8, 4, 4, 2, 1]}\ndf = pd.DataFrame(data, index=['dog', 'dog', 'dog', 'mouse', 'mouse', 'mouse', 'mouse'])\nresult = df.groupby(level=0).std()\nprint(result)\n```", "code": "ser = pd.Series([7, 2, 8, 4, 3, 3], index=['a', 'a', 'a', 'b', 'b', 'b'])\nresult = ser.groupby(level=0).std()\nprint(result)\ndata = {'science': [1, 3, 5, 7, 7, 8, 3], 'math': [1, 4, 8, 4, 4, 2, 1]}\ndf = pd.DataFrame(data, index=['dog', 'dog', 'dog', 'mouse', 'mouse', 'mouse', 'mouse'])\nresult = df.groupby(level=0).std()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sum()\nprint(result)\n```\n", "code": "ser = pd.Series([1, 2, 3, 4], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sum()\nprint(result)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.var\nOutput:\n```python\nser.groupby(level=0).var()\n```", "code": "ser.groupby(level=0).var()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.tail\nOutput:\n```python\ndf = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()\n```", "code": "df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]], columns=['Category', 'Value'])\nresult = df.groupby('Category').tail(1)\nresult.head()"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.take\nOutput:\n```python\ngb = df[\"name\"].groupby([1, 1, 2, 2, 2])\ngb.take([0, 1])\ngb.take([-1, -2])\n```", "code": "gb = df[\"name\"].groupby([1, 1, 2, 2, 2])\ngb.take([0, 1])\ngb.take([-1, -2])"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.value_counts\nOutput:\n```python\ngrouped_data['Category'].value_counts() # returns the count of each category in the 'Category' column of the grouped data\n```", "code": "grouped_data['Category'].value_counts() # returns the count of each category in the 'Category' column of the grouped data"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.boxplot\nOutput:\n```python\ngrouped.boxplot(rot=45, fontsize=12, figsize=(8, 10))\n```", "code": "grouped.boxplot(rot=45, fontsize=12, figsize=(8, 10))"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.hist\nOutput:\n```python\nhist = df.hist(bins=3)\n```", "code": "hist = df.hist(bins=3)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.hist\nOutput:\n```python\nlst = ['a', 'a', 'a', 'b', 'b', 'b']\nser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\nhist = ser.hist()\n```", "code": "lst = ['a', 'a', 'a', 'b', 'b', 'b']\nser = pd.Series([1, 2, 2, 4, 6, 6], index=lst)\nhist = ser.hist()"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.plot\nOutput:\n```python\nplot = df.groupby(\"category\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")\n```", "code": "plot = df.groupby(\"category\").plot(kind=\"bar\", title=\"DataFrameGroupBy Plot\")"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.plot\nOutput:\n```python\nplot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")\n```", "code": "plot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")"}
{"text": "Instance: pandas.api.indexers.VariableOffsetWindowIndexer\nOutput:\n```python\nindexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))\n```", "code": "indexer = VariableOffsetWindowIndexer(index=df.index, offset=pd.offsets.Hour(2))"}
{"text": "Instance: pandas.core.groupby.DataFrameGroupBy.__iter__\nOutput:\n```python\nfor x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')\n```\n", "code": "for x, y in df.groupby(by=[\"Category\"]):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.resample.Resampler.__iter__\nOutput:\n```python\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')\n```", "code": "for x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.core.resample.Resampler.groups\nOutput:\n```python\nser.resample('MS').groups # {Timestamp('2023-01-01 00:00:00'): 2, Timestamp('2023-02-01 00:00:00'): 4} for a time series 'ser' resampled by month start\n```", "code": "ser.resample('MS').groups # {Timestamp('2023-01-01 00:00:00'): 2, Timestamp('2023-02-01 00:00:00'): 4} for a time series 'ser' resampled by month start"}
{"text": "Instance: pandas.core.resample.Resampler.indices\nOutput:\n```python\nser.resample('MS').indices\n```", "code": "ser.resample('MS').indices"}
{"text": "Instance: pandas.core.resample.Resampler.get_group\nOutput:\n```python\nser.resample('MS').get_group('2023-01-01')\n```", "code": "ser.resample('MS').get_group('2023-01-01')"}
{"text": "Instance: pandas.core.resample.Resampler.apply\nOutput:\n```python\nr.apply(lambda x: x.max() - x.min())\n```", "code": "r.apply(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.resample.Resampler.aggregate\nOutput:\n```python\nr = s.resample('2s')\nr.agg({'result': lambda x: x.mean() / x.std(), 'total': \"sum\"})\n```", "code": "r = s.resample('2s')\nr.agg({'result': lambda x: x.mean() / x.std(), 'total': \"sum\"})"}
{"text": "Instance: pandas.core.resample.Resampler.transform\nOutput:\n```python\nresampled = s.resample('15min')\nresampled.transform(lambda x: (x - x.mean()) / x.std())\n```", "code": "resampled = s.resample('15min')\nresampled.transform(lambda x: (x - x.mean()) / x.std())"}
{"text": "Instance: pandas.core.resample.Resampler.pipe\nOutput:\n```python\ndf.resample('2D').pipe(lambda x: x.max() - x.min())\n```", "code": "df.resample('2D').pipe(lambda x: x.max() - x.min())"}
{"text": "Instance: pandas.core.resample.Resampler.ffill\nOutput:\n```python\nser.resample('W').ffill(limit=1)\n```", "code": "ser.resample('W').ffill(limit=1)"}
{"text": "Instance: pandas.core.resample.Resampler.bfill\nOutput:\n```python\ndf.resample('15min').bfill(limit=2)\n```", "code": "df.resample('15min').bfill(limit=2)"}
{"text": "Instance: pandas.core.resample.Resampler.nearest\nOutput:\n```python\ns.resample('15min').nearest()\n```", "code": "s.resample('15min').nearest()"}
{"text": "Instance: pandas.core.resample.Resampler.fillna\nOutput:\n```python\ns.resample('30min').fillna(\"nearest\")\n```", "code": "s.resample('30min').fillna(\"nearest\")"}
{"text": "Instance: pandas.core.resample.Resampler.asfreq\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-31', '2023-02-01', '2023-02-28']))\nser.resample('MS').asfreq()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-31', '2023-02-01', '2023-02-28']))\nser.resample('MS').asfreq()"}
{"text": "Instance: pandas.core.resample.Resampler.interpolate\nOutput:\n```python\nseries.resample(\"2s\").interpolate(\"linear\")\n```", "code": "series.resample(\"2s\").interpolate(\"linear\")"}
{"text": "Instance: pandas.core.resample.Resampler.count\nOutput:\n```python\nser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\nresult\n```\n```python\ndata = [[1, np.nan, 3], [1, np.nan, 6], [7, 8, 9]]\ndf = pd.DataFrame(data, columns=[\"A\", \"B\", \"C\"], index=[\"cow\", \"horse\", \"bull\"])\nresult = df.groupby(\"A\").count()\nresult\n```\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nresult = ser.resample('MS').count()\nresult\n```", "code": "ser = pd.Series([1, 2, np.nan], index=['a', 'a', 'b'])\nresult = ser.groupby(level=0).count()\nresult\ndata = [[1, np.nan, 3], [1, np.nan, 6], [7, 8, 9]]\ndf = pd.DataFrame(data, columns=[\"A\", \"B\", \"C\"], index=[\"cow\", \"horse\", \"bull\"])\nresult = df.groupby(\"A\").count()\nresult\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nresult = ser.resample('MS').count()\nresult"}
{"text": "Instance: pandas.core.resample.Resampler.nunique\nOutput:\n```python\nser.resample('MS').nunique()\n```", "code": "ser.resample('MS').nunique()"}
{"text": "Instance: pandas.core.resample.Resampler.first\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9], Date=['2022-01-01', '2022-01-02', '2022-01-03']))\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.resample('D').first()\n```", "code": "df = pd.DataFrame(dict(X=[1, 2, 3], Y=[4, 5, 6], Z=[7, 8, 9], Date=['2022-01-01', '2022-01-02', '2022-01-03']))\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.resample('D').first()"}
{"text": "Instance: pandas.core.resample.Resampler.last\nOutput:\n```python\ndf = pd.DataFrame(dict(X=[10, 20, 30], Y=[15, 25, 35], Z=[20, 30, 40]))\ndf.resample('D').last()\n```", "code": "df = pd.DataFrame(dict(X=[10, 20, 30], Y=[15, 25, 35], Z=[20, 30, 40]))\ndf.resample('D').last()"}
{"text": "Instance: pandas.core.resample.Resampler.max\nOutput:\n```python\nser.resample('MS').max()\n```", "code": "ser.resample('MS').max()"}
{"text": "Instance: pandas.core.resample.Resampler.mean\nOutput:\n```python\nser.resample('MS').mean() # resamples the series 'ser' to monthly frequency and calculates the mean\n```", "code": "ser.resample('MS').mean() # resamples the series 'ser' to monthly frequency and calculates the mean"}
{"text": "Instance: pandas.core.resample.Resampler.median\nOutput:\n```python\nser.resample('MS').median()\n```", "code": "ser.resample('MS').median()"}
{"text": "Instance: pandas.core.resample.Resampler.min\nOutput:\n```python\nser.resample('MS').min() # resamples the series 'ser' to monthly frequency and returns the minimum value for each month\n```", "code": "ser.resample('MS').min() # resamples the series 'ser' to monthly frequency and returns the minimum value for each month"}
{"text": "Instance: pandas.core.resample.Resampler.ohlc\nOutput:\n```python\nser.resample('MS').ohlc()\n```", "code": "ser.resample('MS').ohlc()"}
{"text": "Instance: pandas.core.resample.Resampler.prod\nOutput:\n```python\nser.resample('MS').prod()\n```", "code": "ser.resample('MS').prod()"}
{"text": "Instance: pandas.core.resample.Resampler.size\nOutput:\n```python\nser.resample('MS').size() # resample the time series data by month start frequency and return the size of each group\n```", "code": "ser.resample('MS').size() # resample the time series data by month start frequency and return the size of each group"}
{"text": "Instance: pandas.core.resample.Resampler.sem\nOutput:\n```python\nser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()\n```", "code": "ser = pd.Series([5, 10, 8, 14], index=['a', 'a', 'b', 'b'])\nresult = ser.groupby(level=0).sem()"}
{"text": "Instance: pandas.core.resample.Resampler.std\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').std()\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').std()"}
{"text": "Instance: pandas.core.resample.Resampler.sum\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nser.resample('MS').sum()\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nser.resample('MS').sum()"}
{"text": "Instance: pandas.core.resample.Resampler.var\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').var()\n```\n```python\nser.resample('MS').var(ddof=0)\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').var()\nser.resample('MS').var(ddof=0)"}
{"text": "Instance: pandas.core.resample.Resampler.quantile\nOutput:\n```python\nser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').quantile()\n```\n```python\nser.resample('MS').quantile(.25)\n```", "code": "ser = pd.Series([1, 3, 2, 4, 3, 8], index=pd.DatetimeIndex(['2023-01-01', '2023-01-10', '2023-01-15', '2023-02-01', '2023-02-10', '2023-02-15']))\nser.resample('MS').quantile()\nser.resample('MS').quantile(.25)"}
{"text": "Instance: pandas.core.groupby.SeriesGroupBy.plot\nOutput:\n```python\nplot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")\n```", "code": "plot = ser.groupby(lambda x: x > 0).plot(title=\"SeriesGroupBy Plot\")"}
{"text": "Instance: pandas.core.resample.Resampler.__iter__\nOutput:\n```python\nser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')\n```", "code": "ser = pd.Series([1, 2, 3, 4], index=pd.DatetimeIndex(['2023-01-01', '2023-01-15', '2023-02-01', '2023-02-15']))\nfor x, y in ser.resample('MS'):\n    print(f'{x}\\n{y}\\n')"}
{"text": "Instance: pandas.io.formats.style.Styler\nOutput:\n```python\nstyled_df = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")\n```", "code": "styled_df = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")"}
{"text": "Instance: pandas.io.formats.style.Styler.from_custom_template\nOutput:\n```python\nEasyStyler = Styler.from_custom_template(\"path/to/template\",\n                                         \"template.tpl\",\n                                         )  \n```", "code": "EasyStyler = Styler.from_custom_template(\"path/to/template\",\n                                         \"template.tpl\",\n                                         )"}
{"text": "Instance: pandas.io.formats.style.Styler.env\nOutput:\n```python\nstyler = df.style.set_properties(**{'background-color': 'black', 'color': 'lawngreen', 'border-color': 'white'})\n```", "code": "styler = df.style.set_properties(**{'background-color': 'black', 'color': 'lawngreen', 'border-color': 'white'})"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html\nOutput:\n```python\nhtml = df.style.template_html()\n```", "code": "html = df.style.template_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html_style\nOutput:\n```python\nhtml_style = df.style.template_html_style()\n```", "code": "html_style = df.style.template_html_style()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_html_table\nOutput:\n```python\nhtml_table = styler.template_html_table()\n```", "code": "html_table = styler.template_html_table()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_latex\nOutput:\n```python\nstyled_df.to_latex()\n```", "code": "styled_df.to_latex()"}
{"text": "Instance: pandas.io.formats.style.Styler.template_string\nOutput:\n```python\nstyler.template_string # outputs the template string used for the Styler object\n```", "code": "styler.template_string # outputs the template string used for the Styler object"}
{"text": "Instance: pandas.io.formats.style.Styler.loader\nOutput:\n```python\nloader = pd.io.formats.style.Styler.loader\n```", "code": "loader = pd.io.formats.style.Styler.loader"}
{"text": "Instance: pandas.io.formats.style.Styler.apply\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(5, 2), columns=[\"Temperature\", \"Humidity\"])\ndf.style.apply(highlight_max, color='red')\n```", "code": "df = pd.DataFrame(np.random.randn(5, 2), columns=[\"Temperature\", \"Humidity\"])\ndf.style.apply(highlight_max, color='red')"}
{"text": "Instance: pandas.io.formats.style.Styler.map\nOutput:\n```python\ndf.style.map(color_negative, color='red', subset=[\"Temperature\", \"Humidity\"])\n```", "code": "df.style.map(color_negative, color='red', subset=[\"Temperature\", \"Humidity\"])"}
{"text": "Instance: pandas.io.formats.style.Styler.apply_index\nOutput:\n```python\ndef highlight_x(s):\n    return [\"background-color: yellow;\" if \"x\" in v else \"\" for v in s]\n\ndf.style.apply_index(highlight_x, axis=\"columns\", level=[0, 2])\n```", "code": "def highlight_x(s):\n    return [\"background-color: yellow;\" if \"x\" in v else \"\" for v in s]\n\ndf.style.apply_index(highlight_x, axis=\"columns\", level=[0, 2])"}
{"text": "Instance: pandas.io.formats.style.Styler.map_index\nOutput:\n```python\ndef highlight_x(v):\n    return \"background-color: yellow;\" if \"x\" in v else None\n\ndf.style.map_index(highlight_x, axis=\"columns\", level=[0, 2])\n```", "code": "def highlight_x(v):\n    return \"background-color: yellow;\" if \"x\" in v else None\n\ndf.style.map_index(highlight_x, axis=\"columns\", level=[0, 2])"}
{"text": "Instance: pandas.io.formats.style.Styler.format\nOutput:\n```python\ndf.style.format('{:.2f}', na_rep='MISS', subset=['Column1', 'Column2'])  \n```", "code": "df.style.format('{:.2f}', na_rep='MISS', subset=['Column1', 'Column2'])"}
{"text": "Instance: pandas.io.formats.style.Styler.format_index\nOutput:\n```python\ndf.style.format_index('{:.2f}', axis=1, na_rep='MISS')  \n     2.00   MISS    4.00\n0       1      2       3\n```", "code": "df.style.format_index('{:.2f}', axis=1, na_rep='MISS')  \n     2.00   MISS    4.00\n0       1      2       3"}
{"text": "Instance: pandas.io.formats.style.Styler.relabel_index\nOutput:\n```python\ndf.style.relabel_index([\"A\", \"B\", \"C\"])  \n```", "code": "df.style.relabel_index([\"A\", \"B\", \"C\"])"}
{"text": "Instance: pandas.io.formats.style.Styler.hide\nOutput:\n```python\ndf.style.format(\"{:.1f}\").hide(subset=(slice(None), [\"a\", \"c\"])).hide()\n```", "code": "df.style.format(\"{:.1f}\").hide(subset=(slice(None), [\"a\", \"c\"])).hide()"}
{"text": "Instance: pandas.io.formats.style.Styler.concat\nOutput:\n```python\ndf = pd.DataFrame([[4, 6], [1, 9], [3, 4], [5, 5], [9, 6]],\n                  columns=[\"Math\", \"Science\"],\n                  index=[\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\"])\nstyler = df.style.concat(df.agg([\"sum\"]).style)\n```", "code": "df = pd.DataFrame([[4, 6], [1, 9], [3, 4], [5, 5], [9, 6]],\n                  columns=[\"Math\", \"Science\"],\n                  index=[\"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\"])\nstyler = df.style.concat(df.agg([\"sum\"]).style)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_td_classes\nOutput:\n```python\ndf = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=[\"Temperature\", \"Humidity\", \"Pressure\"])\nclasses = pd.DataFrame([\n    [\"low red\", \"\", \"high blue\"],\n    [\"red\", None, \"blue high\"]\n], index=df.index, columns=df.columns)\ndf.style.set_td_classes(classes)\n```", "code": "df = pd.DataFrame(data=[[1, 2, 3], [4, 5, 6]], columns=[\"Temperature\", \"Humidity\", \"Pressure\"])\nclasses = pd.DataFrame([\n    [\"low red\", \"\", \"high blue\"],\n    [\"red\", None, \"blue high\"]\n], index=df.index, columns=df.columns)\ndf.style.set_td_classes(classes)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_table_styles\nOutput:\n```python\ndf.style.set_table_styles(\n    [{'selector': 'tr:hover',\n      'props': [('background-color', 'yellow')]}\n    ]\n)\n```", "code": "df.style.set_table_styles(\n    [{'selector': 'tr:hover',\n      'props': [('background-color', 'yellow')]}\n    ]\n)"}
{"text": "Instance: pandas.io.formats.style.Styler.set_table_attributes\nOutput:\n```python\ndf.style.set_table_attributes('class=\"pure-table\"')\n```", "code": "df.style.set_table_attributes('class=\"pure-table\"')"}
{"text": "Instance: pandas.io.formats.style.Styler.set_tooltips\nOutput:\n```python\ndf = pd.DataFrame(data=[[0, 1], [2, 3]])\nttips = pd.DataFrame(\n    data=[[\"Min\", \"\"], [np.nan, \"Max\"]], columns=df.columns, index=df.index\n)\ns = df.style.set_tooltips(ttips).to_html()\n```", "code": "df = pd.DataFrame(data=[[0, 1], [2, 3]])\nttips = pd.DataFrame(\n    data=[[\"Min\", \"\"], [np.nan, \"Max\"]], columns=df.columns, index=df.index\n)\ns = df.style.set_tooltips(ttips).to_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.set_caption\nOutput:\n```python\ndf.style.set_caption(\"Sales Data Summary\")\n```", "code": "df.style.set_caption(\"Sales Data Summary\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_sticky\nOutput:\n```python\ndf.style.set_sticky(axis=\"index\")\n```", "code": "df.style.set_sticky(axis=\"index\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_properties\nOutput:\n```python\ndf.style.set_properties(color=\"white\", align=\"right\")\n```", "code": "df.style.set_properties(color=\"white\", align=\"right\")"}
{"text": "Instance: pandas.io.formats.style.Styler.set_uuid\nOutput:\n```python\ndf.style.set_uuid(\"T_20a7d_level0_col0\").set_caption(\"Test\")\n```", "code": "df.style.set_uuid(\"T_20a7d_level0_col0\").set_caption(\"Test\")"}
{"text": "Instance: pandas.io.formats.style.Styler.clear\nOutput:\n```python\ndf.style.clear()\n```", "code": "df.style.clear()"}
{"text": "Instance: pandas.io.formats.style.Styler.pipe\nOutput:\n```python\ndef highlight_last_level(styler):\n    return styler.apply_index(\n        lambda v: \"background-color: pink; color: yellow\", axis=\"columns\",\n        level=styler.columns.nlevels-1\n    )  \ndf.columns = pd.MultiIndex.from_product([[\"Sales\", \"Expenses\"], [\"Q1\", \"Q2\"]])\ndf.style.pipe(highlight_last_level)\n```", "code": "def highlight_last_level(styler):\n    return styler.apply_index(\n        lambda v: \"background-color: pink; color: yellow\", axis=\"columns\",\n        level=styler.columns.nlevels-1\n    )  \ndf.columns = pd.MultiIndex.from_product([[\"Sales\", \"Expenses\"], [\"Q1\", \"Q2\"]])\ndf.style.pipe(highlight_last_level)"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_null\nOutput:\n```python\ndf.style.highlight_null(color='yellow')\n```", "code": "df.style.highlight_null(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_max\nOutput:\n```python\ndf.style.highlight_max(color='yellow')\n```", "code": "df.style.highlight_max(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_min\nOutput:\n```python\ndf.style.highlight_min(color='yellow')\n```", "code": "df.style.highlight_min(color='yellow')"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_between\nOutput:\n```python\ndf.style.highlight_between(left=2.1, right=2.9)\n```", "code": "df.style.highlight_between(left=2.1, right=2.9)"}
{"text": "Instance: pandas.io.formats.style.Styler.highlight_quantile\nOutput:\n```python\ndf.style.highlight_quantile(axis=None, q_left=0.8, color=\"#fffd75\")\n```", "code": "df.style.highlight_quantile(axis=None, q_left=0.8, color=\"#fffd75\")"}
{"text": "Instance: pandas.io.formats.style.Styler.background_gradient\nOutput:\n```python\ndf.style.background_gradient(axis=0)\n```", "code": "df.style.background_gradient(axis=0)"}
{"text": "Instance: pandas.io.formats.style.Styler.text_gradient\nOutput:\n```python\ndf.style.text_gradient(axis=0)\n```", "code": "df.style.text_gradient(axis=0)"}
{"text": "```python\ndf = pd.DataFrame({'Sales': [100, 200, 150, 300], 'Profit': [50, 75, 100, 125]})\ndf.style.bar(subset=['Profit'], color='blue')\n```", "code": "df = pd.DataFrame({'Sales': [100, 200, 150, 300], 'Profit': [50, 75, 100, 125]})\ndf.style.bar(subset=['Profit'], color='blue')"}
{"text": "Instance: pandas.io.formats.style.Styler.bar\nOutput:\n```python\ndf.style.bar(subset=['A'], color='gray')\n```", "code": "df.style.bar(subset=['A'], color='gray')"}
{"text": "Instance: pandas.io.formats.style.Styler.to_html\nOutput:\n```python\nhtml_table = df.style.to_html()\n```", "code": "html_table = df.style.to_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.to_latex\nOutput:\n```python\nstyler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)\n```", "code": "styler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)"}
{"text": "Instance: pandas.io.formats.style.Styler.to_excel\nOutput:\n```python\ndf1.to_excel(\"output.xlsx\")\n```", "code": "df1.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.io.formats.style.Styler.to_string\nOutput:\n```python\ndf.style.to_string() # outputs formatted string representation of the DataFrame\n```", "code": "df.style.to_string() # outputs formatted string representation of the DataFrame"}
{"text": "Instance: pandas.io.formats.style.Styler.export\nOutput:\n```python\nexport = styler.export()\n```", "code": "export = styler.export()"}
{"text": "Instance: pandas.io.formats.style.Styler.use\nOutput:\n```python\nstyler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)\n```", "code": "styler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)"}
{"text": "Instance: pandas.core.resample.Resampler.quantile\nOutput:\n```python\nser.resample('MS').quantile()\n```\n```python\nser.resample('MS').quantile(.25)\n```", "code": "ser.resample('MS').quantile()\nser.resample('MS').quantile(.25)"}
{"text": "Instance: pandas.io.formats.style.Styler\nOutput:\n```python\nstyler = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")\n```", "code": "styler = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")"}
{"text": "Instance: pandas.plotting.andrews_curves\nOutput:\n```python\npd.plotting.andrews_curves(df, 'SepalWidthCm')\n```", "code": "pd.plotting.andrews_curves(df, 'SepalWidthCm')"}
{"text": "Instance: pandas.plotting.autocorrelation_plot\nOutput:\n```python\npd.plotting.autocorrelation_plot(s)\n```", "code": "pd.plotting.autocorrelation_plot(s)"}
{"text": "Instance: pandas.plotting.bootstrap_plot\nOutput:\n```python\ns = pd.Series(np.random.uniform(size=100))\npd.plotting.bootstrap_plot(s)\n```", "code": "s = pd.Series(np.random.uniform(size=100))\npd.plotting.bootstrap_plot(s)"}
{"text": "Instance: pandas.plotting.boxplot\nOutput:\n```python\nboxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])\n```", "code": "boxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])"}
{"text": "Instance: pandas.plotting.deregister_matplotlib_converters\nOutput:\n```python\npd.plotting.deregister_matplotlib_converters()\n```", "code": "pd.plotting.deregister_matplotlib_converters()"}
{"text": "Instance: pandas.plotting.lag_plot\nOutput:\n```python\npd.plotting.lag_plot(df['Temperature'], lag=1)\n```", "code": "pd.plotting.lag_plot(df['Temperature'], lag=1)"}
{"text": "Instance: pandas.plotting.parallel_coordinates\nOutput:\n```python\npd.plotting.parallel_coordinates(df, 'Species', color=('#FF5733', '#33FF57', '#3357FF'))\n```", "code": "pd.plotting.parallel_coordinates(df, 'Species', color=('#FF5733', '#33FF57', '#3357FF'))"}
{"text": "Instance: pandas.plotting.plot_params\nOutput:\n```python\nnp.random.seed(42)\ndf = pd.DataFrame({'Temperature': np.random.randn(10),\n                   'Humidity': np.random.randn(10)},\n                   index=pd.date_range(\"1/1/2000\",\n                   freq='4MS', periods=10))\nwith pd.plotting.plot_params.use(\"x_compat\", True):\n    _ = df[\"Temperature\"].plot(color=\"r\")\n    _ = df[\"Humidity\"].plot(color=\"g\")\n```", "code": "np.random.seed(42)\ndf = pd.DataFrame({'Temperature': np.random.randn(10),\n                   'Humidity': np.random.randn(10)},\n                   index=pd.date_range(\"1/1/2000\",\n                   freq='4MS', periods=10))\nwith pd.plotting.plot_params.use(\"x_compat\", True):\n    _ = df[\"Temperature\"].plot(color=\"r\")\n    _ = df[\"Humidity\"].plot(color=\"g\")"}
{"text": "Instance: pandas.plotting.radviz\nOutput:\n```python\npd.plotting.radviz(df, 'Category')\n```", "code": "pd.plotting.radviz(df, 'Category')"}
{"text": "Instance: pandas.plotting.register_matplotlib_converters\nOutput:\n```python\npd.plotting.register_matplotlib_converters()\n```", "code": "pd.plotting.register_matplotlib_converters()"}
{"text": "Instance: pandas.plotting.scatter_matrix\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(1000, 4), columns=['Height','Weight','Age','Income'])\npd.plotting.scatter_matrix(df, alpha=0.2)\n```", "code": "df = pd.DataFrame(np.random.randn(1000, 4), columns=['Height','Weight','Age','Income'])\npd.plotting.scatter_matrix(df, alpha=0.2)"}
{"text": "Instance: pandas.plotting.table\nOutput:\n```python\ntable = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))\n```", "code": "table = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))"}
{"text": "Instance: pandas.io.formats.style.Styler.use\nOutput:\n```python\nstyler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)\n```", "code": "styler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)"}
{"text": "Instance: pandas.plotting.andrews_curves\nOutput:\n```python\npd.plotting.andrews_curves(df, 'SepalWidthCm')\n```", "code": "pd.plotting.andrews_curves(df, 'SepalWidthCm')"}
{"text": "Instance: pandas.describe_option\nOutput:\n```python\npd.describe_option('display.max_columns')\n```", "code": "pd.describe_option('display.max_columns')"}
{"text": "Instance: pandas.reset_option\nOutput:\n```python\npd.reset_option('display.max_columns')\n```", "code": "pd.reset_option('display.max_columns')"}
{"text": "Instance: pandas.get_option\nOutput:\n```python\npd.get_option('display.max_columns') # returns the maximum number of columns to display, e.g. 4\n```", "code": "pd.get_option('display.max_columns') # returns the maximum number of columns to display, e.g. 4"}
{"text": "Instance: pandas.set_option\nOutput:\n```python\npd.set_option('display.max_columns', 4)\n```", "code": "pd.set_option('display.max_columns', 4)"}
{"text": "Instance: pandas.option_context\nOutput:\n```python\nwith pd.option_context('display.max_rows', 10, 'display.max_columns', 5):\n    # code block where only 10 rows and 5 columns will be displayed\n```", "code": "with pd.option_context('display.max_rows', 10, 'display.max_columns', 5):\n    # code block where only 10 rows and 5 columns will be displayed"}
{"text": "Instance: pandas.set_eng_float_format\nOutput:\n```python\npd.set_eng_float_format(accuracy=1)\n```", "code": "pd.set_eng_float_format(accuracy=1)"}
{"text": "Instance: pandas.plotting.table\nOutput:\n```python\ntable = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))\n```", "code": "table = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))"}
{"text": "Instance: pandas.describe_option\nOutput:\n```python\npd.describe_option('display.max_columns')\n```", "code": "pd.describe_option('display.max_columns')"}
{"text": "Instance: pandas.api.extensions.register_extension_dtype\nOutput:\n```python\n@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\"\n```", "code": "@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\""}
{"text": "Instance: pandas.api.extensions.register_dataframe_accessor\nOutput:\n```python\n@pd.api.extensions.register_dataframe_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def custom_mean(self):\n        # return the custom mean calculation for this DataFrame\n        return self._obj.sum() / self._obj.count()\n\n    def custom_plot(self):\n        # plot this DataFrame's data in a custom way\n        pass\n```", "code": "@pd.api.extensions.register_dataframe_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def custom_mean(self):\n        # return the custom mean calculation for this DataFrame\n        return self._obj.sum() / self._obj.count()\n\n    def custom_plot(self):\n        # plot this DataFrame's data in a custom way\n        pass"}
{"text": "Instance: pandas.api.extensions.register_series_accessor\nOutput:\n```python\n@pd.api.extensions.register_series_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    def custom_method(self):\n        # custom method implementation\n        pass\n\ns = pd.Series([1, 2, 3, 4, 5])\ns.custom.custom_method() # calls the custom method on the series\n```", "code": "@pd.api.extensions.register_series_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    def custom_method(self):\n        # custom method implementation\n        pass\n\ns = pd.Series([1, 2, 3, 4, 5])\ns.custom.custom_method() # calls the custom method on the series"}
{"text": "Instance: pandas.api.extensions.register_index_accessor\nOutput:\n```python\n@pd.api.extensions.register_index_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def unique_values(self):\n        # return unique values in the index\n        return self._obj.unique()\n\n# Usage example\nidx = pd.Index(['A', 'B', 'C', 'A', 'D'])\nidx.custom.unique_values\n```", "code": "@pd.api.extensions.register_index_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def unique_values(self):\n        # return unique values in the index\n        return self._obj.unique()\n\n# Usage example\nidx = pd.Index(['A', 'B', 'C', 'A', 'D'])\nidx.custom.unique_values"}
{"text": "Instance: pandas.api.extensions.ExtensionDtype\nOutput:\n```python\nclass ExtensionDtype:\n    def __from_arrow__(\n        self,\n        array: pyarrow.Array | pyarrow.ChunkedArray\n    ) -> ExtensionArray:\n        ...\n```", "code": "class ExtensionDtype:\n    def __from_arrow__(\n        self,\n        array: pyarrow.Array | pyarrow.ChunkedArray\n    ) -> ExtensionArray:\n        ..."}
{"text": "Instance: pandas.api.extensions.ExtensionArray\nOutput:\n```python\narr = pd.api.extensions.ExtensionArray(['a', 'b', 'c', 'd'])\n```", "code": "arr = pd.api.extensions.ExtensionArray(['a', 'b', 'c', 'd'])"}
{"text": "Instance: pandas.arrays.NumpyExtensionArray\nOutput:\n```python\narr = pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))\n```", "code": "arr = pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))"}
{"text": "Instance: pandas.api.indexers.check_array_indexer\nOutput:\n```python\nmask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask) # array([ True, False])\n```", "code": "mask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask) # array([ True, False])"}
{"text": "Instance: pandas.set_eng_float_format\nOutput:\n```python\npd.set_eng_float_format(accuracy=1)\n```", "code": "pd.set_eng_float_format(accuracy=1)"}
{"text": "Instance: pandas.api.extensions.register_extension_dtype\nOutput:\n```python\n@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\"\n```", "code": "@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\""}
{"text": "Instance: pandas.testing.assert_frame_equal\nOutput:\n```python\nassert_frame_equal(df1, df2, check_dtype=False)\n```", "code": "assert_frame_equal(df1, df2, check_dtype=False)"}
{"text": "Instance: pandas.testing.assert_series_equal\nOutput:\n```python\ntm.assert_series_equal(a, b)\n```", "code": "tm.assert_series_equal(a, b)"}
{"text": "Instance: pandas.testing.assert_index_equal\nOutput:\n```python\ntm.assert_index_equal(a, b)\n```", "code": "tm.assert_index_equal(a, b)"}
{"text": "Instance: pandas.testing.assert_extension_array_equal\nOutput:\n```python\ntm.assert_extension_array_equal(b, c)\n```", "code": "tm.assert_extension_array_equal(b, c)"}
{"text": "Instance: pandas.errors.AbstractMethodError\nOutput:\n```python\nclass Foo:\n    @classmethod\n    def classmethod(cls):\n        raise pd.errors.AbstractMethodError(cls, methodtype=\"classmethod\")\n    def method(self):\n        raise pd.errors.AbstractMethodError(self)\n```", "code": "class Foo:\n    @classmethod\n    def classmethod(cls):\n        raise pd.errors.AbstractMethodError(cls, methodtype=\"classmethod\")\n    def method(self):\n        raise pd.errors.AbstractMethodError(self)"}
{"text": "Instance: pandas.errors.AttributeConflictWarning\nOutput:\n```python\nAttributeConflictWarning: the [index_name] attribute of the existing index is [name1] which conflicts with the new [name2]...\n```", "code": "AttributeConflictWarning: the [index_name] attribute of the existing index is [name1] which conflicts with the new [name2]..."}
{"text": "Instance: pandas.errors.CategoricalConversionWarning\nOutput:\n```python\n# Example of handling CategoricalConversionWarning\nfrom pandas.io.stata import StataReader\n\nwith StataReader('dta_file', chunksize=2) as reader: \n    for i, block in enumerate(reader):\n        print(i, block)\n# CategoricalConversionWarning: One or more series with value labels...\n```", "code": "# Example of handling CategoricalConversionWarning\nfrom pandas.io.stata import StataReader\n\nwith StataReader('dta_file', chunksize=2) as reader: \n    for i, block in enumerate(reader):\n        print(i, block)\n# CategoricalConversionWarning: One or more series with value labels..."}
{"text": "Instance: pandas.errors.ChainedAssignmentError\nOutput:\n```python\ndf[\"A\"][0:3] = 10\n# ChainedAssignmentError: ...\n```", "code": "df[\"A\"][0:3] = 10\n# ChainedAssignmentError: ..."}
{"text": "Instance: pandas.errors.ClosedFileError\nOutput:\n```python\nstore = pd.HDFStore('my-store', 'a')\nstore.close()\nstore.keys()\n# ClosedFileError: my-store file is not open!\n```", "code": "store = pd.HDFStore('my-store', 'a')\nstore.close()\nstore.keys()\n# ClosedFileError: my-store file is not open!"}
{"text": "Instance: pandas.errors.CSSWarning\nOutput:\n```python\ndf.style.applymap(\n    lambda x: 'background-color: blueGreenRed;'\n).to_excel('styled.xlsx')  \n```", "code": "df.style.applymap(\n    lambda x: 'background-color: blueGreenRed;'\n).to_excel('styled.xlsx')"}
{"text": "Instance: pandas.errors.DatabaseError\nOutput:\n```python\npd.read_sql('select * from employees', conn) \n# DatabaseError: Execution failed on sql 'select * from employees': no such table: employees\n```", "code": "pd.read_sql('select * from employees', conn) \n# DatabaseError: Execution failed on sql 'select * from employees': no such table: employees"}
{"text": "Instance: pandas.errors.DataError\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c'])\nser.rolling(2).sum() # Raises DataError: No numeric types to aggregate\n```", "code": "ser = pd.Series(['a', 'b', 'c'])\nser.rolling(2).sum() # Raises DataError: No numeric types to aggregate"}
{"text": "Instance: pandas.errors.DtypeWarning\nOutput:\n```python\ndf = pd.DataFrame({'students': ['Alice', 'Bob', 'Charlie'],\n                   'grades': [85, 'A', 90]})  \ndf.to_csv('grades.csv', index=False)  \ndf2 = pd.read_csv('grades.csv')  \n# DtypeWarning: Columns (1) have mixed types\n\ndf2.iloc[1, 1]  \n'A'\ntype(df2.iloc[1, 1])  \n<class 'str'>\ndf2.iloc[2, 1]  \n90\ntype(df2.iloc[2, 1])  \n<class 'int'>\n\ndf2 = pd.read_csv('grades.csv', dtype={'grades': str})  \n```\n", "code": "df = pd.DataFrame({'students': ['Alice', 'Bob', 'Charlie'],\n                   'grades': [85, 'A', 90]})  \ndf.to_csv('grades.csv', index=False)  \ndf2 = pd.read_csv('grades.csv')  \n# DtypeWarning: Columns (1) have mixed types\n\ndf2.iloc[1, 1]  \n'A'\ntype(df2.iloc[1, 1])  \n<class 'str'>\ndf2.iloc[2, 1]  \n90\ntype(df2.iloc[2, 1])  \n<class 'int'>\n\ndf2 = pd.read_csv('grades.csv', dtype={'grades': str})"}
{"text": "Instance: pandas.errors.DuplicateLabelError\nOutput:\n```python\ns = pd.Series([0, 1, 2], index=['a', 'b', 'c']).set_flags(\n    allows_duplicate_labels=False\n)\ns.reindex(['a', 'a', 'b'])\n# Output: DuplicateLabelError: Index has duplicates.\n#      positions\n# label\n# a        [0, 1]\n```", "code": "s = pd.Series([0, 1, 2], index=['a', 'b', 'c']).set_flags(\n    allows_duplicate_labels=False\n)\ns.reindex(['a', 'a', 'b'])\n# Output: DuplicateLabelError: Index has duplicates.\n#      positions\n# label\n# a        [0, 1]"}
{"text": "Instance: pandas.errors.EmptyDataError\nOutput:\n```python\npd.read_csv(StringIO()) # Raises EmptyDataError: No columns to parse from file\n```", "code": "pd.read_csv(StringIO()) # Raises EmptyDataError: No columns to parse from file"}
{"text": "Instance: pandas.errors.IncompatibilityWarning\nOutput:\n```python\nraise pd.errors.IncompatibilityWarning(\"The versions of pandas and numpy are not compatible. Please check the compatibility matrix.\")\n```", "code": "raise pd.errors.IncompatibilityWarning(\"The versions of pandas and numpy are not compatible. Please check the compatibility matrix.\")"}
{"text": "Instance: pandas.errors.IndexingError\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 35]})\ndf.loc[..., ..., 'Temperature'] \n# IndexingError: indexer may only contain one '...' entry\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 35]})\ndf.loc[..., ..., 'Temperature'] \n# IndexingError: indexer may only contain one '...' entry"}
{"text": "Instance: pandas.errors.InvalidColumnName\nOutput:\n```python\ndf = pd.DataFrame({\"0categories\": pd.Series([2, 2])})\ndf.to_stata('test') \n# InvalidColumnName: Not all pandas column names were valid Stata variable...\n```", "code": "df = pd.DataFrame({\"0categories\": pd.Series([2, 2])})\ndf.to_stata('test') \n# InvalidColumnName: Not all pandas column names were valid Stata variable..."}
{"text": "Instance: pandas.errors.InvalidComparison\nOutput:\n```python\nraise pd.errors.InvalidComparison(\"Cannot compare values of different types: {} and {}\".format(type(val1), type(val2)))\n```", "code": "raise pd.errors.InvalidComparison(\"Cannot compare values of different types: {} and {}\".format(type(val1), type(val2)))"}
{"text": "Instance: pandas.errors.InvalidIndexError\nOutput:\n```python\nidx = pd.MultiIndex.from_product([[\"A\", \"B\"], [1, 2]])\ndf = pd.DataFrame([[10, 20, 30, 40],\n                   [50, 60, 70, 80]], columns=idx)\ndf[:, 1]\n# InvalidIndexError: (slice(None, None, None), 1)\n```", "code": "idx = pd.MultiIndex.from_product([[\"A\", \"B\"], [1, 2]])\ndf = pd.DataFrame([[10, 20, 30, 40],\n                   [50, 60, 70, 80]], columns=idx)\ndf[:, 1]\n# InvalidIndexError: (slice(None, None, None), 1)"}
{"text": "Instance: pandas.errors.InvalidVersion\nOutput:\n```python\ntry:\n    pd.util.version.Version('1.')\nexcept pd.errors.InvalidVersion as e:\n    print(e) # Invalid version: '1.'\n```", "code": "try:\n    pd.util.version.Version('1.')\nexcept pd.errors.InvalidVersion as e:\n    print(e) # Invalid version: '1.'"}
{"text": "Instance: pandas.errors.IntCastingNaNError\nOutput:\n```python\ntry:\n    pd.DataFrame(np.array([[1, np.nan], [2, 3]]), dtype=\"i8\")\nexcept IntCastingNaNError as e:\n    print(\"Error:\", e)\n```", "code": "try:\n    pd.DataFrame(np.array([[1, np.nan], [2, 3]]), dtype=\"i8\")\nexcept IntCastingNaNError as e:\n    print(\"Error:\", e)"}
{"text": "Instance: pandas.errors.LossySetitemError\nOutput:\n```python\nraise pd.errors.LossySetitemError(\"Cannot set a frame with no defined index and a value that cannot be converted to a Series\")\n```", "code": "raise pd.errors.LossySetitemError(\"Cannot set a frame with no defined index and a value that cannot be converted to a Series\")"}
{"text": "Instance: pandas.errors.MergeError\nOutput:\n```python\nleft = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                    \"age\": [25, 30, 35]})\nright = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                     \"occupation\": [\"Engineer\", \"Doctor\", \"Artist\"]})\nleft.join(right, on=\"name\", validate=\"one_to_one\")\n# MergeError: Merge keys are not unique in left dataset; not a one-to-one merge\n```", "code": "left = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                    \"age\": [25, 30, 35]})\nright = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                     \"occupation\": [\"Engineer\", \"Doctor\", \"Artist\"]})\nleft.join(right, on=\"name\", validate=\"one_to_one\")\n# MergeError: Merge keys are not unique in left dataset; not a one-to-one merge"}
{"text": "Instance: pandas.errors.NoBufferPresent\nOutput:\n```python\nraise pandas.errors.NoBufferPresent(\"Buffer not present in the current environment\")\n```", "code": "raise pandas.errors.NoBufferPresent(\"Buffer not present in the current environment\")"}
{"text": "Instance: pandas.errors.NullFrequencyError\nOutput:\n```python\ndf = pd.DatetimeIndex([\"2011-01-01 10:00\", \"2011-01-01\"], freq=None)\ndf.shift(2) # Raises NullFrequencyError: Cannot shift with no freq\n```", "code": "df = pd.DatetimeIndex([\"2011-01-01 10:00\", \"2011-01-01\"], freq=None)\ndf.shift(2) # Raises NullFrequencyError: Cannot shift with no freq"}
{"text": "Instance: pandas.errors.NumbaUtilError\nOutput:\n```python\ndf = pd.DataFrame({\"key\": [\"a\", \"a\", \"b\", \"b\"], \"data\": [1, 2, 3, 4]}, columns=[\"key\", \"data\"])\ndef incorrect_function(x):\n    return sum(x) * 2.7\ndf.groupby(\"key\").agg(incorrect_function, engine=\"numba\")\n# This will raise a NumbaUtilError with the message: The first 2 arguments to incorrect_function must be ['values', 'index']\n```", "code": "df = pd.DataFrame({\"key\": [\"a\", \"a\", \"b\", \"b\"], \"data\": [1, 2, 3, 4]}, columns=[\"key\", \"data\"])\ndef incorrect_function(x):\n    return sum(x) * 2.7\ndf.groupby(\"key\").agg(incorrect_function, engine=\"numba\")\n# This will raise a NumbaUtilError with the message: The first 2 arguments to incorrect_function must be ['values', 'index']"}
{"text": "Instance: pandas.errors.NumExprClobberingError\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 35]})\ndf.query(\"temperature > 40\") \n# NumExprClobberingError: Variables in expression \"(temperature) > (40)\" overlap...\n```", "code": "df = pd.DataFrame({'temperature': [25, 30, 35]})\ndf.query(\"temperature > 40\") \n# NumExprClobberingError: Variables in expression \"(temperature) > (40)\" overlap..."}
{"text": "Instance: pandas.errors.OptionError\nOutput:\n```python\ntry:\n    pd.options.context\nexcept pd.errors.OptionError as e:\n    print(\"OptionError: No such option\")\n```", "code": "try:\n    pd.options.context\nexcept pd.errors.OptionError as e:\n    print(\"OptionError: No such option\")"}
{"text": "Instance: pandas.errors.OutOfBoundsDatetime\nOutput:\n```python\ntry:\n    pd.to_datetime(\"08335394550\")\nexcept pd.errors.OutOfBoundsDatetime as e:\n    print(f\"Error: {e}\")\n```", "code": "try:\n    pd.to_datetime(\"08335394550\")\nexcept pd.errors.OutOfBoundsDatetime as e:\n    print(f\"Error: {e}\")"}
{"text": "Instance: pandas.errors.OutOfBoundsTimedelta\nOutput:\n```python\npd.date_range(start=\"1/1/1700\", freq=\"B\", periods=100000)\n# Traceback (most recent call last):\n# OutOfBoundsTimedelta: Cannot cast 139999 days 00:00:00\n# to unit='ns' without overflow.\n```", "code": "pd.date_range(start=\"1/1/1700\", freq=\"B\", periods=100000)\n# Traceback (most recent call last):\n# OutOfBoundsTimedelta: Cannot cast 139999 days 00:00:00\n# to unit='ns' without overflow."}
{"text": "Instance: pandas.errors.ParserError\nOutput:\n```python\ndata = '''a,b,c\ncat,foo,bar\ndog,foo,\"baz'''\npd.read_csv(StringIO(data), skipfooter=1, engine='python')\n# ParserError: ',' expected after '\"'. Error could possibly be due to parsing errors in the skipped footer rows\n```", "code": "data = '''a,b,c\ncat,foo,bar\ndog,foo,\"baz'''\npd.read_csv(StringIO(data), skipfooter=1, engine='python')\n# ParserError: ',' expected after '\"'. Error could possibly be due to parsing errors in the skipped footer rows"}
{"text": "Instance: pandas.errors.ParserWarning\nOutput:\n```python\ndf = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')\n```", "code": "df = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')"}
{"text": "Instance: pandas.errors.PerformanceWarning\nOutput:\n```python\ndf.loc[(1, 'z')]  \n# PerformanceWarning: indexing past lexsort depth may impact performance.\n```", "code": "df.loc[(1, 'z')]  \n# PerformanceWarning: indexing past lexsort depth may impact performance."}
{"text": "Instance: pandas.errors.PossibleDataLossError\nOutput:\n```python\nstore = pd.HDFStore('my-store', 'a')\nstore.open(\"w\")\n# PossibleDataLossError: Re-opening the file [my-store] with mode [a]...\n```", "code": "store = pd.HDFStore('my-store', 'a')\nstore.open(\"w\")\n# PossibleDataLossError: Re-opening the file [my-store] with mode [a]..."}
{"text": "Instance: pandas.errors.PossiblePrecisionLoss\nOutput:\n```python\ndf = pd.DataFrame({\"population\": pd.Series([1000000, 9999999999999999], dtype=np.int64)})\ndf.to_stata('test') \n# PossiblePrecisionLoss: Column converted from int64 to float64 due to precision loss\n```", "code": "df = pd.DataFrame({\"population\": pd.Series([1000000, 9999999999999999], dtype=np.int64)})\ndf.to_stata('test') \n# PossiblePrecisionLoss: Column converted from int64 to float64 due to precision loss"}
{"text": "Instance: pandas.errors.PyperclipException\nOutput:\n```python\nraise PyperclipException(\"Pyperclip could not find a copy/paste mechanism for your system.\")\n```", "code": "raise PyperclipException(\"Pyperclip could not find a copy/paste mechanism for your system.\")"}
{"text": "Instance: pandas.errors.PyperclipWindowsException\nOutput:\n```python\nraise pd.errors.PyperclipWindowsException(\"Pyperclip could not find a copy/paste mechanism for Windows.\")\n```", "code": "raise pd.errors.PyperclipWindowsException(\"Pyperclip could not find a copy/paste mechanism for Windows.\")"}
{"text": "Instance: pandas.errors.SettingWithCopyError\nOutput:\n```python\npd.options.mode.chained_assignment = 'raise'\ndf = pd.DataFrame({'Temperature': [25, 30, 35, 20, 15]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 'High'\n# SettingWithCopyError: A value is trying to be set on a copy of a slice from a DataFrame.\n```", "code": "pd.options.mode.chained_assignment = 'raise'\ndf = pd.DataFrame({'Temperature': [25, 30, 35, 20, 15]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 'High'\n# SettingWithCopyError: A value is trying to be set on a copy of a slice from a DataFrame."}
{"text": "Instance: pandas.errors.SettingWithCopyWarning\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 28, 35, 32]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 27\n# SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 28, 35, 32]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 27\n# SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame"}
{"text": "Instance: pandas.errors.SpecificationError\nOutput:\n```python\ndf.groupby('A').agg({'B': {'foo': ['sum', 'max']}) \n# SpecificationError: nested renamer is not supported\n```", "code": "df.groupby('A').agg({'B': {'foo': ['sum', 'max']}) \n# SpecificationError: nested renamer is not supported"}
{"text": "Instance: pandas.errors.UndefinedVariableError\nOutput:\n```python\ndf.query(\"A > x\") \n# UndefinedVariableError: name 'x' is not defined\n```", "code": "df.query(\"A > x\") \n# UndefinedVariableError: name 'x' is not defined"}
{"text": "Instance: pandas.errors.UnsortedIndexError\nOutput:\n```python\ndf.loc[(0, \"black\"):(1, \"white\")]\n```", "code": "df.loc[(0, \"black\"):(1, \"white\")]"}
{"text": "Instance: pandas.errors.UnsupportedFunctionCall\nOutput:\n```python\ndf = pd.DataFrame({\"X\": [1, 2, 3, 4],\n                   \"Y\": [\"A\", \"B\", \"C\", \"D\"]}\n                  )\nnp.cumsum(df.groupby([\"X\"]))\n# UnsupportedFunctionCall: numpy operations are not valid with groupby.\n# Use .groupby(...).cumsum() instead\n```", "code": "df = pd.DataFrame({\"X\": [1, 2, 3, 4],\n                   \"Y\": [\"A\", \"B\", \"C\", \"D\"]}\n                  )\nnp.cumsum(df.groupby([\"X\"]))\n# UnsupportedFunctionCall: numpy operations are not valid with groupby.\n# Use .groupby(...).cumsum() instead"}
{"text": "Instance: pandas.errors.ValueLabelTypeMismatch\nOutput:\n```python\ndf = pd.DataFrame({\"categories\": pd.Series([\"a\", 2], dtype=\"category\")})\ndf.to_stata('test') \n# ValueLabelTypeMismatch: Stata value labels (pandas categories) must be str...\n```", "code": "df = pd.DataFrame({\"categories\": pd.Series([\"a\", 2], dtype=\"category\")})\ndf.to_stata('test') \n# ValueLabelTypeMismatch: Stata value labels (pandas categories) must be str..."}
{"text": "Instance: pandas.show_versions\nOutput:\n```python\npd.show_versions()\n```", "code": "pd.show_versions()"}
{"text": "Instance: pandas.test\nOutput:\n```python\npd.test()\n```", "code": "pd.test()"}
{"text": "Instance: pandas.api.indexers.check_array_indexer\nOutput:\n```python\nmask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask)\n```", "code": "mask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask)"}
{"text": "Instance: pandas.testing.assert_frame_equal\nOutput:\n```python\nassert_frame_equal(df1, df2, check_dtype=False)\n```", "code": "assert_frame_equal(df1, df2, check_dtype=False)"}
{"text": "Instance: pandas.NA\nOutput:\n```python\npd.NA # represents missing data in pandas\n```", "code": "pd.NA # represents missing data in pandas"}
{"text": "Instance: pandas.NaT\nOutput:\n```python\npd.NaT # outputs NaT (Not a Time) which represents missing datetime values\n```", "code": "pd.NaT # outputs NaT (Not a Time) which represents missing datetime values"}
{"text": "Instance: pandas.test\nOutput:\n```python\npd.test()\n```", "code": "pd.test()"}
{"text": "Instance: pandas.NA\nOutput:\n```python\npd.NA # represents missing data in pandas\n```", "code": "pd.NA # represents missing data in pandas"}
