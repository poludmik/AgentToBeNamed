{"text": "Instance: pandas.io.formats.style.Styler.bar\nOutput:\n```python\ndf.style.bar(subset=['A'], color='gray')\n```", "code": "df.style.bar(subset=['A'], color='gray')"}
{"text": "Instance: pandas.io.formats.style.Styler.to_html\nOutput:\n```python\nhtml_table = df.style.to_html()\n```", "code": "html_table = df.style.to_html()"}
{"text": "Instance: pandas.io.formats.style.Styler.to_latex\nOutput:\n```python\nstyler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)\n```", "code": "styler.to_latex(\n    caption=\"Selected stock correlation and simple statistics.\",\n    clines=\"skip-last;data\",\n    convert_css=True,\n    position_float=\"centering\",\n    multicol_align=\"|c|\",\n    hrules=True,\n)"}
{"text": "Instance: pandas.io.formats.style.Styler.to_excel\nOutput:\n```python\ndf1.to_excel(\"output.xlsx\")\n```", "code": "df1.to_excel(\"output.xlsx\")"}
{"text": "Instance: pandas.io.formats.style.Styler.to_string\nOutput:\n```python\ndf.style.to_string() # outputs formatted string representation of the DataFrame\n```", "code": "df.style.to_string() # outputs formatted string representation of the DataFrame"}
{"text": "Instance: pandas.io.formats.style.Styler.export\nOutput:\n```python\nexport = styler.export()\n```", "code": "export = styler.export()"}
{"text": "Instance: pandas.io.formats.style.Styler.use\nOutput:\n```python\nstyler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)\n```", "code": "styler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)"}
{"text": "Instance: pandas.core.resample.Resampler.quantile\nOutput:\n```python\nser.resample('MS').quantile()\n```\n```python\nser.resample('MS').quantile(.25)\n```", "code": "ser.resample('MS').quantile()\nser.resample('MS').quantile(.25)"}
{"text": "Instance: pandas.io.formats.style.Styler\nOutput:\n```python\nstyler = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")\n```", "code": "styler = pd.io.formats.style.Styler(df, precision=2, caption=\"My table\")"}
{"text": "Instance: pandas.plotting.andrews_curves\nOutput:\n```python\npd.plotting.andrews_curves(df, 'SepalWidthCm')\n```", "code": "pd.plotting.andrews_curves(df, 'SepalWidthCm')"}
{"text": "Instance: pandas.plotting.autocorrelation_plot\nOutput:\n```python\npd.plotting.autocorrelation_plot(s)\n```", "code": "pd.plotting.autocorrelation_plot(s)"}
{"text": "Instance: pandas.plotting.bootstrap_plot\nOutput:\n```python\ns = pd.Series(np.random.uniform(size=100))\npd.plotting.bootstrap_plot(s)\n```", "code": "s = pd.Series(np.random.uniform(size=100))\npd.plotting.bootstrap_plot(s)"}
{"text": "Instance: pandas.plotting.boxplot\nOutput:\n```python\nboxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])\n```", "code": "boxplot = df.boxplot(column=['Temperature', 'Humidity', 'Pressure'])"}
{"text": "Instance: pandas.plotting.deregister_matplotlib_converters\nOutput:\n```python\npd.plotting.deregister_matplotlib_converters()\n```", "code": "pd.plotting.deregister_matplotlib_converters()"}
{"text": "Instance: pandas.plotting.lag_plot\nOutput:\n```python\npd.plotting.lag_plot(df['Temperature'], lag=1)\n```", "code": "pd.plotting.lag_plot(df['Temperature'], lag=1)"}
{"text": "Instance: pandas.plotting.parallel_coordinates\nOutput:\n```python\npd.plotting.parallel_coordinates(df, 'Species', color=('#FF5733', '#33FF57', '#3357FF'))\n```", "code": "pd.plotting.parallel_coordinates(df, 'Species', color=('#FF5733', '#33FF57', '#3357FF'))"}
{"text": "Instance: pandas.plotting.plot_params\nOutput:\n```python\nnp.random.seed(42)\ndf = pd.DataFrame({'Temperature': np.random.randn(10),\n                   'Humidity': np.random.randn(10)},\n                   index=pd.date_range(\"1/1/2000\",\n                   freq='4MS', periods=10))\nwith pd.plotting.plot_params.use(\"x_compat\", True):\n    _ = df[\"Temperature\"].plot(color=\"r\")\n    _ = df[\"Humidity\"].plot(color=\"g\")\n```", "code": "np.random.seed(42)\ndf = pd.DataFrame({'Temperature': np.random.randn(10),\n                   'Humidity': np.random.randn(10)},\n                   index=pd.date_range(\"1/1/2000\",\n                   freq='4MS', periods=10))\nwith pd.plotting.plot_params.use(\"x_compat\", True):\n    _ = df[\"Temperature\"].plot(color=\"r\")\n    _ = df[\"Humidity\"].plot(color=\"g\")"}
{"text": "Instance: pandas.plotting.radviz\nOutput:\n```python\npd.plotting.radviz(df, 'Category')\n```", "code": "pd.plotting.radviz(df, 'Category')"}
{"text": "Instance: pandas.plotting.register_matplotlib_converters\nOutput:\n```python\npd.plotting.register_matplotlib_converters()\n```", "code": "pd.plotting.register_matplotlib_converters()"}
{"text": "Instance: pandas.plotting.scatter_matrix\nOutput:\n```python\ndf = pd.DataFrame(np.random.randn(1000, 4), columns=['Height','Weight','Age','Income'])\npd.plotting.scatter_matrix(df, alpha=0.2)\n```", "code": "df = pd.DataFrame(np.random.randn(1000, 4), columns=['Height','Weight','Age','Income'])\npd.plotting.scatter_matrix(df, alpha=0.2)"}
{"text": "Instance: pandas.plotting.table\nOutput:\n```python\ntable = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))\n```", "code": "table = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))"}
{"text": "Instance: pandas.io.formats.style.Styler.use\nOutput:\n```python\nstyler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)\n```", "code": "styler = pd.DataFrame([[1, 2], [3, 4]]).style\nstyler2 = pd.DataFrame([[9, 9, 9]]).style\nexport = styler.export()\nstyler2.use(export)"}
{"text": "Instance: pandas.plotting.andrews_curves\nOutput:\n```python\npd.plotting.andrews_curves(df, 'SepalWidthCm')\n```", "code": "pd.plotting.andrews_curves(df, 'SepalWidthCm')"}
{"text": "Instance: pandas.describe_option\nOutput:\n```python\npd.describe_option('display.max_columns')\n```", "code": "pd.describe_option('display.max_columns')"}
{"text": "Instance: pandas.reset_option\nOutput:\n```python\npd.reset_option('display.max_columns')\n```", "code": "pd.reset_option('display.max_columns')"}
{"text": "Instance: pandas.get_option\nOutput:\n```python\npd.get_option('display.max_columns') # returns the maximum number of columns to display, e.g. 4\n```", "code": "pd.get_option('display.max_columns') # returns the maximum number of columns to display, e.g. 4"}
{"text": "Instance: pandas.set_option\nOutput:\n```python\npd.set_option('display.max_columns', 4)\n```", "code": "pd.set_option('display.max_columns', 4)"}
{"text": "Instance: pandas.option_context\nOutput:\n```python\nwith pd.option_context('display.max_rows', 10, 'display.max_columns', 5):\n    # code block where only 10 rows and 5 columns will be displayed\n```", "code": "with pd.option_context('display.max_rows', 10, 'display.max_columns', 5):\n    # code block where only 10 rows and 5 columns will be displayed"}
{"text": "Instance: pandas.set_eng_float_format\nOutput:\n```python\npd.set_eng_float_format(accuracy=1)\n```", "code": "pd.set_eng_float_format(accuracy=1)"}
{"text": "Instance: pandas.plotting.table\nOutput:\n```python\ntable = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))\n```", "code": "table = pd.plotting.table(ax, df, loc='center', cellLoc='center', colWidths=list([.2, .2]))"}
{"text": "Instance: pandas.describe_option\nOutput:\n```python\npd.describe_option('display.max_columns')\n```", "code": "pd.describe_option('display.max_columns')"}
{"text": "Instance: pandas.api.extensions.register_extension_dtype\nOutput:\n```python\n@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\"\n```", "code": "@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\""}
{"text": "Instance: pandas.api.extensions.register_dataframe_accessor\nOutput:\n```python\n@pd.api.extensions.register_dataframe_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def custom_mean(self):\n        # return the custom mean calculation for this DataFrame\n        return self._obj.sum() / self._obj.count()\n\n    def custom_plot(self):\n        # plot this DataFrame's data in a custom way\n        pass\n```", "code": "@pd.api.extensions.register_dataframe_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def custom_mean(self):\n        # return the custom mean calculation for this DataFrame\n        return self._obj.sum() / self._obj.count()\n\n    def custom_plot(self):\n        # plot this DataFrame's data in a custom way\n        pass"}
{"text": "Instance: pandas.api.extensions.register_series_accessor\nOutput:\n```python\n@pd.api.extensions.register_series_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    def custom_method(self):\n        # custom method implementation\n        pass\n\ns = pd.Series([1, 2, 3, 4, 5])\ns.custom.custom_method() # calls the custom method on the series\n```", "code": "@pd.api.extensions.register_series_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    def custom_method(self):\n        # custom method implementation\n        pass\n\ns = pd.Series([1, 2, 3, 4, 5])\ns.custom.custom_method() # calls the custom method on the series"}
{"text": "Instance: pandas.api.extensions.register_index_accessor\nOutput:\n```python\n@pd.api.extensions.register_index_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def unique_values(self):\n        # return unique values in the index\n        return self._obj.unique()\n\n# Usage example\nidx = pd.Index(['A', 'B', 'C', 'A', 'D'])\nidx.custom.unique_values\n```", "code": "@pd.api.extensions.register_index_accessor(\"custom\")\nclass CustomAccessor:\n    def __init__(self, pandas_obj):\n        self._obj = pandas_obj\n\n    @property\n    def unique_values(self):\n        # return unique values in the index\n        return self._obj.unique()\n\n# Usage example\nidx = pd.Index(['A', 'B', 'C', 'A', 'D'])\nidx.custom.unique_values"}
{"text": "Instance: pandas.api.extensions.ExtensionDtype\nOutput:\n```python\nclass ExtensionDtype:\n    def __from_arrow__(\n        self,\n        array: pyarrow.Array | pyarrow.ChunkedArray\n    ) -> ExtensionArray:\n        ...\n```", "code": "class ExtensionDtype:\n    def __from_arrow__(\n        self,\n        array: pyarrow.Array | pyarrow.ChunkedArray\n    ) -> ExtensionArray:\n        ..."}
{"text": "Instance: pandas.api.extensions.ExtensionArray\nOutput:\n```python\narr = pd.api.extensions.ExtensionArray(['a', 'b', 'c', 'd'])\n```", "code": "arr = pd.api.extensions.ExtensionArray(['a', 'b', 'c', 'd'])"}
{"text": "Instance: pandas.arrays.NumpyExtensionArray\nOutput:\n```python\narr = pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))\n```", "code": "arr = pd.arrays.NumpyExtensionArray(np.array([0, 1, 2, 3]))"}
{"text": "Instance: pandas.api.indexers.check_array_indexer\nOutput:\n```python\nmask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask) # array([ True, False])\n```", "code": "mask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask) # array([ True, False])"}
{"text": "Instance: pandas.set_eng_float_format\nOutput:\n```python\npd.set_eng_float_format(accuracy=1)\n```", "code": "pd.set_eng_float_format(accuracy=1)"}
{"text": "Instance: pandas.api.extensions.register_extension_dtype\nOutput:\n```python\n@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\"\n```", "code": "@register_extension_dtype\nclass MyExtensionDtype(ExtensionDtype):\n    name = \"myextension\""}
{"text": "Instance: pandas.testing.assert_frame_equal\nOutput:\n```python\nassert_frame_equal(df1, df2, check_dtype=False)\n```", "code": "assert_frame_equal(df1, df2, check_dtype=False)"}
{"text": "Instance: pandas.testing.assert_series_equal\nOutput:\n```python\ntm.assert_series_equal(a, b)\n```", "code": "tm.assert_series_equal(a, b)"}
{"text": "Instance: pandas.testing.assert_index_equal\nOutput:\n```python\ntm.assert_index_equal(a, b)\n```", "code": "tm.assert_index_equal(a, b)"}
{"text": "Instance: pandas.testing.assert_extension_array_equal\nOutput:\n```python\ntm.assert_extension_array_equal(b, c)\n```", "code": "tm.assert_extension_array_equal(b, c)"}
{"text": "Instance: pandas.errors.AbstractMethodError\nOutput:\n```python\nclass Foo:\n    @classmethod\n    def classmethod(cls):\n        raise pd.errors.AbstractMethodError(cls, methodtype=\"classmethod\")\n    def method(self):\n        raise pd.errors.AbstractMethodError(self)\n```", "code": "class Foo:\n    @classmethod\n    def classmethod(cls):\n        raise pd.errors.AbstractMethodError(cls, methodtype=\"classmethod\")\n    def method(self):\n        raise pd.errors.AbstractMethodError(self)"}
{"text": "Instance: pandas.errors.AttributeConflictWarning\nOutput:\n```python\nAttributeConflictWarning: the [index_name] attribute of the existing index is [name1] which conflicts with the new [name2]...\n```", "code": "AttributeConflictWarning: the [index_name] attribute of the existing index is [name1] which conflicts with the new [name2]..."}
{"text": "Instance: pandas.errors.CategoricalConversionWarning\nOutput:\n```python\n# Example of handling CategoricalConversionWarning\nfrom pandas.io.stata import StataReader\n\nwith StataReader('dta_file', chunksize=2) as reader: \n    for i, block in enumerate(reader):\n        print(i, block)\n# CategoricalConversionWarning: One or more series with value labels...\n```", "code": "# Example of handling CategoricalConversionWarning\nfrom pandas.io.stata import StataReader\n\nwith StataReader('dta_file', chunksize=2) as reader: \n    for i, block in enumerate(reader):\n        print(i, block)\n# CategoricalConversionWarning: One or more series with value labels..."}
{"text": "Instance: pandas.errors.ChainedAssignmentError\nOutput:\n```python\ndf[\"A\"][0:3] = 10\n# ChainedAssignmentError: ...\n```", "code": "df[\"A\"][0:3] = 10\n# ChainedAssignmentError: ..."}
{"text": "Instance: pandas.errors.ClosedFileError\nOutput:\n```python\nstore = pd.HDFStore('my-store', 'a')\nstore.close()\nstore.keys()\n# ClosedFileError: my-store file is not open!\n```", "code": "store = pd.HDFStore('my-store', 'a')\nstore.close()\nstore.keys()\n# ClosedFileError: my-store file is not open!"}
{"text": "Instance: pandas.errors.CSSWarning\nOutput:\n```python\ndf.style.applymap(\n    lambda x: 'background-color: blueGreenRed;'\n).to_excel('styled.xlsx')  \n```", "code": "df.style.applymap(\n    lambda x: 'background-color: blueGreenRed;'\n).to_excel('styled.xlsx')"}
{"text": "Instance: pandas.errors.DatabaseError\nOutput:\n```python\npd.read_sql('select * from employees', conn) \n# DatabaseError: Execution failed on sql 'select * from employees': no such table: employees\n```", "code": "pd.read_sql('select * from employees', conn) \n# DatabaseError: Execution failed on sql 'select * from employees': no such table: employees"}
{"text": "Instance: pandas.errors.DataError\nOutput:\n```python\nser = pd.Series(['a', 'b', 'c'])\nser.rolling(2).sum() # Raises DataError: No numeric types to aggregate\n```", "code": "ser = pd.Series(['a', 'b', 'c'])\nser.rolling(2).sum() # Raises DataError: No numeric types to aggregate"}
{"text": "Instance: pandas.errors.DtypeWarning\nOutput:\n```python\ndf = pd.DataFrame({'students': ['Alice', 'Bob', 'Charlie'],\n                   'grades': [85, 'A', 90]})  \ndf.to_csv('grades.csv', index=False)  \ndf2 = pd.read_csv('grades.csv')  \n# DtypeWarning: Columns (1) have mixed types\n\ndf2.iloc[1, 1]  \n'A'\ntype(df2.iloc[1, 1])  \n<class 'str'>\ndf2.iloc[2, 1]  \n90\ntype(df2.iloc[2, 1])  \n<class 'int'>\n\ndf2 = pd.read_csv('grades.csv', dtype={'grades': str})  \n```\n", "code": "df = pd.DataFrame({'students': ['Alice', 'Bob', 'Charlie'],\n                   'grades': [85, 'A', 90]})  \ndf.to_csv('grades.csv', index=False)  \ndf2 = pd.read_csv('grades.csv')  \n# DtypeWarning: Columns (1) have mixed types\n\ndf2.iloc[1, 1]  \n'A'\ntype(df2.iloc[1, 1])  \n<class 'str'>\ndf2.iloc[2, 1]  \n90\ntype(df2.iloc[2, 1])  \n<class 'int'>\n\ndf2 = pd.read_csv('grades.csv', dtype={'grades': str})"}
{"text": "Instance: pandas.errors.DuplicateLabelError\nOutput:\n```python\ns = pd.Series([0, 1, 2], index=['a', 'b', 'c']).set_flags(\n    allows_duplicate_labels=False\n)\ns.reindex(['a', 'a', 'b'])\n# Output: DuplicateLabelError: Index has duplicates.\n#      positions\n# label\n# a        [0, 1]\n```", "code": "s = pd.Series([0, 1, 2], index=['a', 'b', 'c']).set_flags(\n    allows_duplicate_labels=False\n)\ns.reindex(['a', 'a', 'b'])\n# Output: DuplicateLabelError: Index has duplicates.\n#      positions\n# label\n# a        [0, 1]"}
{"text": "Instance: pandas.errors.EmptyDataError\nOutput:\n```python\npd.read_csv(StringIO()) # Raises EmptyDataError: No columns to parse from file\n```", "code": "pd.read_csv(StringIO()) # Raises EmptyDataError: No columns to parse from file"}
{"text": "Instance: pandas.errors.IncompatibilityWarning\nOutput:\n```python\nraise pd.errors.IncompatibilityWarning(\"The versions of pandas and numpy are not compatible. Please check the compatibility matrix.\")\n```", "code": "raise pd.errors.IncompatibilityWarning(\"The versions of pandas and numpy are not compatible. Please check the compatibility matrix.\")"}
{"text": "Instance: pandas.errors.IndexingError\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 35]})\ndf.loc[..., ..., 'Temperature'] \n# IndexingError: indexer may only contain one '...' entry\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 35]})\ndf.loc[..., ..., 'Temperature'] \n# IndexingError: indexer may only contain one '...' entry"}
{"text": "Instance: pandas.errors.InvalidColumnName\nOutput:\n```python\ndf = pd.DataFrame({\"0categories\": pd.Series([2, 2])})\ndf.to_stata('test') \n# InvalidColumnName: Not all pandas column names were valid Stata variable...\n```", "code": "df = pd.DataFrame({\"0categories\": pd.Series([2, 2])})\ndf.to_stata('test') \n# InvalidColumnName: Not all pandas column names were valid Stata variable..."}
{"text": "Instance: pandas.errors.InvalidComparison\nOutput:\n```python\nraise pd.errors.InvalidComparison(\"Cannot compare values of different types: {} and {}\".format(type(val1), type(val2)))\n```", "code": "raise pd.errors.InvalidComparison(\"Cannot compare values of different types: {} and {}\".format(type(val1), type(val2)))"}
{"text": "Instance: pandas.errors.InvalidIndexError\nOutput:\n```python\nidx = pd.MultiIndex.from_product([[\"A\", \"B\"], [1, 2]])\ndf = pd.DataFrame([[10, 20, 30, 40],\n                   [50, 60, 70, 80]], columns=idx)\ndf[:, 1]\n# InvalidIndexError: (slice(None, None, None), 1)\n```", "code": "idx = pd.MultiIndex.from_product([[\"A\", \"B\"], [1, 2]])\ndf = pd.DataFrame([[10, 20, 30, 40],\n                   [50, 60, 70, 80]], columns=idx)\ndf[:, 1]\n# InvalidIndexError: (slice(None, None, None), 1)"}
{"text": "Instance: pandas.errors.InvalidVersion\nOutput:\n```python\ntry:\n    pd.util.version.Version('1.')\nexcept pd.errors.InvalidVersion as e:\n    print(e) # Invalid version: '1.'\n```", "code": "try:\n    pd.util.version.Version('1.')\nexcept pd.errors.InvalidVersion as e:\n    print(e) # Invalid version: '1.'"}
{"text": "Instance: pandas.errors.IntCastingNaNError\nOutput:\n```python\ntry:\n    pd.DataFrame(np.array([[1, np.nan], [2, 3]]), dtype=\"i8\")\nexcept IntCastingNaNError as e:\n    print(\"Error:\", e)\n```", "code": "try:\n    pd.DataFrame(np.array([[1, np.nan], [2, 3]]), dtype=\"i8\")\nexcept IntCastingNaNError as e:\n    print(\"Error:\", e)"}
{"text": "Instance: pandas.errors.LossySetitemError\nOutput:\n```python\nraise pd.errors.LossySetitemError(\"Cannot set a frame with no defined index and a value that cannot be converted to a Series\")\n```", "code": "raise pd.errors.LossySetitemError(\"Cannot set a frame with no defined index and a value that cannot be converted to a Series\")"}
{"text": "Instance: pandas.errors.MergeError\nOutput:\n```python\nleft = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                    \"age\": [25, 30, 35]})\nright = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                     \"occupation\": [\"Engineer\", \"Doctor\", \"Artist\"]})\nleft.join(right, on=\"name\", validate=\"one_to_one\")\n# MergeError: Merge keys are not unique in left dataset; not a one-to-one merge\n```", "code": "left = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                    \"age\": [25, 30, 35]})\nright = pd.DataFrame({\"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n                     \"occupation\": [\"Engineer\", \"Doctor\", \"Artist\"]})\nleft.join(right, on=\"name\", validate=\"one_to_one\")\n# MergeError: Merge keys are not unique in left dataset; not a one-to-one merge"}
{"text": "Instance: pandas.errors.NoBufferPresent\nOutput:\n```python\nraise pandas.errors.NoBufferPresent(\"Buffer not present in the current environment\")\n```", "code": "raise pandas.errors.NoBufferPresent(\"Buffer not present in the current environment\")"}
{"text": "Instance: pandas.errors.NullFrequencyError\nOutput:\n```python\ndf = pd.DatetimeIndex([\"2011-01-01 10:00\", \"2011-01-01\"], freq=None)\ndf.shift(2) # Raises NullFrequencyError: Cannot shift with no freq\n```", "code": "df = pd.DatetimeIndex([\"2011-01-01 10:00\", \"2011-01-01\"], freq=None)\ndf.shift(2) # Raises NullFrequencyError: Cannot shift with no freq"}
{"text": "Instance: pandas.errors.NumbaUtilError\nOutput:\n```python\ndf = pd.DataFrame({\"key\": [\"a\", \"a\", \"b\", \"b\"], \"data\": [1, 2, 3, 4]}, columns=[\"key\", \"data\"])\ndef incorrect_function(x):\n    return sum(x) * 2.7\ndf.groupby(\"key\").agg(incorrect_function, engine=\"numba\")\n# This will raise a NumbaUtilError with the message: The first 2 arguments to incorrect_function must be ['values', 'index']\n```", "code": "df = pd.DataFrame({\"key\": [\"a\", \"a\", \"b\", \"b\"], \"data\": [1, 2, 3, 4]}, columns=[\"key\", \"data\"])\ndef incorrect_function(x):\n    return sum(x) * 2.7\ndf.groupby(\"key\").agg(incorrect_function, engine=\"numba\")\n# This will raise a NumbaUtilError with the message: The first 2 arguments to incorrect_function must be ['values', 'index']"}
{"text": "Instance: pandas.errors.NumExprClobberingError\nOutput:\n```python\ndf = pd.DataFrame({'temperature': [25, 30, 35]})\ndf.query(\"temperature > 40\") \n# NumExprClobberingError: Variables in expression \"(temperature) > (40)\" overlap...\n```", "code": "df = pd.DataFrame({'temperature': [25, 30, 35]})\ndf.query(\"temperature > 40\") \n# NumExprClobberingError: Variables in expression \"(temperature) > (40)\" overlap..."}
{"text": "Instance: pandas.errors.OptionError\nOutput:\n```python\ntry:\n    pd.options.context\nexcept pd.errors.OptionError as e:\n    print(\"OptionError: No such option\")\n```", "code": "try:\n    pd.options.context\nexcept pd.errors.OptionError as e:\n    print(\"OptionError: No such option\")"}
{"text": "Instance: pandas.errors.OutOfBoundsDatetime\nOutput:\n```python\ntry:\n    pd.to_datetime(\"08335394550\")\nexcept pd.errors.OutOfBoundsDatetime as e:\n    print(f\"Error: {e}\")\n```", "code": "try:\n    pd.to_datetime(\"08335394550\")\nexcept pd.errors.OutOfBoundsDatetime as e:\n    print(f\"Error: {e}\")"}
{"text": "Instance: pandas.errors.OutOfBoundsTimedelta\nOutput:\n```python\npd.date_range(start=\"1/1/1700\", freq=\"B\", periods=100000)\n# Traceback (most recent call last):\n# OutOfBoundsTimedelta: Cannot cast 139999 days 00:00:00\n# to unit='ns' without overflow.\n```", "code": "pd.date_range(start=\"1/1/1700\", freq=\"B\", periods=100000)\n# Traceback (most recent call last):\n# OutOfBoundsTimedelta: Cannot cast 139999 days 00:00:00\n# to unit='ns' without overflow."}
{"text": "Instance: pandas.errors.ParserError\nOutput:\n```python\ndata = '''a,b,c\ncat,foo,bar\ndog,foo,\"baz'''\npd.read_csv(StringIO(data), skipfooter=1, engine='python')\n# ParserError: ',' expected after '\"'. Error could possibly be due to parsing errors in the skipped footer rows\n```", "code": "data = '''a,b,c\ncat,foo,bar\ndog,foo,\"baz'''\npd.read_csv(StringIO(data), skipfooter=1, engine='python')\n# ParserError: ',' expected after '\"'. Error could possibly be due to parsing errors in the skipped footer rows"}
{"text": "Instance: pandas.errors.ParserWarning\nOutput:\n```python\ndf = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')\n```", "code": "df = pd.read_csv(io.StringIO(csv), sep='[;,]', engine='python')"}
{"text": "Instance: pandas.errors.PerformanceWarning\nOutput:\n```python\ndf.loc[(1, 'z')]  \n# PerformanceWarning: indexing past lexsort depth may impact performance.\n```", "code": "df.loc[(1, 'z')]  \n# PerformanceWarning: indexing past lexsort depth may impact performance."}
{"text": "Instance: pandas.errors.PossibleDataLossError\nOutput:\n```python\nstore = pd.HDFStore('my-store', 'a')\nstore.open(\"w\")\n# PossibleDataLossError: Re-opening the file [my-store] with mode [a]...\n```", "code": "store = pd.HDFStore('my-store', 'a')\nstore.open(\"w\")\n# PossibleDataLossError: Re-opening the file [my-store] with mode [a]..."}
{"text": "Instance: pandas.errors.PossiblePrecisionLoss\nOutput:\n```python\ndf = pd.DataFrame({\"population\": pd.Series([1000000, 9999999999999999], dtype=np.int64)})\ndf.to_stata('test') \n# PossiblePrecisionLoss: Column converted from int64 to float64 due to precision loss\n```", "code": "df = pd.DataFrame({\"population\": pd.Series([1000000, 9999999999999999], dtype=np.int64)})\ndf.to_stata('test') \n# PossiblePrecisionLoss: Column converted from int64 to float64 due to precision loss"}
{"text": "Instance: pandas.errors.PyperclipException\nOutput:\n```python\nraise PyperclipException(\"Pyperclip could not find a copy/paste mechanism for your system.\")\n```", "code": "raise PyperclipException(\"Pyperclip could not find a copy/paste mechanism for your system.\")"}
{"text": "Instance: pandas.errors.PyperclipWindowsException\nOutput:\n```python\nraise pd.errors.PyperclipWindowsException(\"Pyperclip could not find a copy/paste mechanism for Windows.\")\n```", "code": "raise pd.errors.PyperclipWindowsException(\"Pyperclip could not find a copy/paste mechanism for Windows.\")"}
{"text": "Instance: pandas.errors.SettingWithCopyError\nOutput:\n```python\npd.options.mode.chained_assignment = 'raise'\ndf = pd.DataFrame({'Temperature': [25, 30, 35, 20, 15]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 'High'\n# SettingWithCopyError: A value is trying to be set on a copy of a slice from a DataFrame.\n```", "code": "pd.options.mode.chained_assignment = 'raise'\ndf = pd.DataFrame({'Temperature': [25, 30, 35, 20, 15]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 'High'\n# SettingWithCopyError: A value is trying to be set on a copy of a slice from a DataFrame."}
{"text": "Instance: pandas.errors.SettingWithCopyWarning\nOutput:\n```python\ndf = pd.DataFrame({'Temperature': [25, 30, 28, 35, 32]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 27\n# SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame\n```", "code": "df = pd.DataFrame({'Temperature': [25, 30, 28, 35, 32]}, columns=['Temperature'])\ndf.loc[0:3]['Temperature'] = 27\n# SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame"}
{"text": "Instance: pandas.errors.SpecificationError\nOutput:\n```python\ndf.groupby('A').agg({'B': {'foo': ['sum', 'max']}) \n# SpecificationError: nested renamer is not supported\n```", "code": "df.groupby('A').agg({'B': {'foo': ['sum', 'max']}) \n# SpecificationError: nested renamer is not supported"}
{"text": "Instance: pandas.errors.UndefinedVariableError\nOutput:\n```python\ndf.query(\"A > x\") \n# UndefinedVariableError: name 'x' is not defined\n```", "code": "df.query(\"A > x\") \n# UndefinedVariableError: name 'x' is not defined"}
{"text": "Instance: pandas.errors.UnsortedIndexError\nOutput:\n```python\ndf.loc[(0, \"black\"):(1, \"white\")]\n```", "code": "df.loc[(0, \"black\"):(1, \"white\")]"}
{"text": "Instance: pandas.errors.UnsupportedFunctionCall\nOutput:\n```python\ndf = pd.DataFrame({\"X\": [1, 2, 3, 4],\n                   \"Y\": [\"A\", \"B\", \"C\", \"D\"]}\n                  )\nnp.cumsum(df.groupby([\"X\"]))\n# UnsupportedFunctionCall: numpy operations are not valid with groupby.\n# Use .groupby(...).cumsum() instead\n```", "code": "df = pd.DataFrame({\"X\": [1, 2, 3, 4],\n                   \"Y\": [\"A\", \"B\", \"C\", \"D\"]}\n                  )\nnp.cumsum(df.groupby([\"X\"]))\n# UnsupportedFunctionCall: numpy operations are not valid with groupby.\n# Use .groupby(...).cumsum() instead"}
{"text": "Instance: pandas.errors.ValueLabelTypeMismatch\nOutput:\n```python\ndf = pd.DataFrame({\"categories\": pd.Series([\"a\", 2], dtype=\"category\")})\ndf.to_stata('test') \n# ValueLabelTypeMismatch: Stata value labels (pandas categories) must be str...\n```", "code": "df = pd.DataFrame({\"categories\": pd.Series([\"a\", 2], dtype=\"category\")})\ndf.to_stata('test') \n# ValueLabelTypeMismatch: Stata value labels (pandas categories) must be str..."}
{"text": "Instance: pandas.show_versions\nOutput:\n```python\npd.show_versions()\n```", "code": "pd.show_versions()"}
{"text": "Instance: pandas.test\nOutput:\n```python\npd.test()\n```", "code": "pd.test()"}
{"text": "Instance: pandas.api.indexers.check_array_indexer\nOutput:\n```python\nmask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask)\n```", "code": "mask = pd.array([True, False])\narr = pd.array([1, 2])\npd.api.indexers.check_array_indexer(arr, mask)"}
{"text": "Instance: pandas.testing.assert_frame_equal\nOutput:\n```python\nassert_frame_equal(df1, df2, check_dtype=False)\n```", "code": "assert_frame_equal(df1, df2, check_dtype=False)"}
{"text": "Instance: pandas.NA\nOutput:\n```python\npd.NA # represents missing data in pandas\n```", "code": "pd.NA # represents missing data in pandas"}
{"text": "Instance: pandas.NaT\nOutput:\n```python\npd.NaT # outputs NaT (Not a Time) which represents missing datetime values\n```", "code": "pd.NaT # outputs NaT (Not a Time) which represents missing datetime values"}
{"text": "Instance: pandas.test\nOutput:\n```python\npd.test()\n```", "code": "pd.test()"}
{"text": "Instance: pandas.NA\nOutput:\n```python\npd.NA # represents missing data in pandas\n```", "code": "pd.NA # represents missing data in pandas"}
