{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Select rows where they consume more than 10.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Select rows where they consume more than 10.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    result = df[df['fuel_consum_end'] - df['fuel_consum_start)'] > 10]\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Select rows which has cost of service within the top 20 percents of data.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Select rows which has cost of service within the top 20 percents of data.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the temperature value at the 80th percentile\n    top_20_percent_temp = df['cost_of_service'].quantile(0.80)\n\n    # Select rows which has temperature within the top 20 percent of data\n    result = df[df['cost_of_service'] >= top_20_percent_temp]\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Give me the cycle where elongation is the biggest on average based on length data'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Give me the cycle where elongation is the biggest on average based on length data' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the biggest elongation based on acceleration data\n    biggest_elongation = df[df['length_mean'] == df['length_mean'].min()]\n\n    # Return the cycle where elongation is the biggest on average\n    return biggest_elongation\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: ' Give me the minimum of median forces in newtons measurment unit'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task ' Give me the minimum of median forces in newtons measurment unit' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the median force in newtons\n    median_force_newtons = df['force_kN_abs_mean'] * 1000  # Convert kN to newtons\n    min_median_force_newtons = median_force_newtons.min()  # Calculate the minimum\n\n    # Return the minimum of median powers of driving cycles in watts\n    return min_median_force_newtons\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Give me the median of average forces of transitions in meganewtons measurment unit'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Give me the median of average forces of transitions in meganewtons measurment unit' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the average force in megawatts\n    df['power_mN_mean'] = df['force_kN_abs_mean'] \/ 1000\n\n    # Calculate the median of the average force in meganewtons\n    median_force_mN = df['power_mN_mean'].median()\n\n    # Return the result\n    return median_force_mN\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'What's the amount of unique maintenance schedules of transport schedules in the data'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'What's the amount of unique maintenance schedules of transport schedules in the data' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Get the amount of unique maintenance schedules in the 'maintenance_schedule' column\n    n_unique_maintenance_schedule = df['maintenance_schedule'].nunique()\n\n    # Return the result\n    return n_unique_maintenance_schedule\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'How many unique operational statuses are there in the data (about the transportation period)'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'How many unique operational statuses are there in the data (about the transportation period)' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the amount of unique operational statuses in the 'operational_status' column\n    n_unique_operational_status = df['operational_status'].nunique()\n\n    # Return the result\n    return n_unique_operational_status\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'What is the biggest length gone by single trip. Each row is a trip.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'What is the biggest length gone by single trip. Each row is a trip.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    biggest_length = df[\"length_total\"].max()\n\n    return biggest_length\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'What 's the most common model in the data?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'What 's the most common model in the data?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Count the occurrences of model and find the most common one\n    most_common_model = df['model'].mode()[0]\n\n    # Return the most common model\n    return most_common_model\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'What is the least commo year in the data.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'What is the least commo year in the data.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Count the occurrences of each year\n    year_counts = df['year'].value_counts()\n\n    # Find the least commonly occurring year\n    least_common_year = year_counts.idxmin()\n\n    # Return the least commonly occurring year\n    return least_common_year\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'How many records were recorded by a VO id type?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'How many records were recorded by a VO id type?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Filter records with 'VO'\n    vo_records = df[df['vehicle_id'].str.contains('VO', case=False, na=False)]\n\n    # Count the number of records\n    num_records = len(vo_records)\n\n    # Return the number of records\n    return num_records\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Check if all first service dates are earlier or equal to end service dates. Return 1 for all correct, 0 for any incorrect.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Check if all first service dates are earlier or equal to end service dates. Return 1 for all correct, 0 for any incorrect.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Check if all first service dates are earlier or equal to end service dates\n    result = 1 if (df['first_service_date'] <= df['last_service_date']).all() else 0\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Check if all begin service dates are earlier to next service dates. Return 1 for all correct, 0 for any incorrect.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Check if all begin service dates are earlier to next service dates. Return 1 for all correct, 0 for any incorrect.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Check if all 'first_service_date' dates are earlier than 'next_service_date'\n    result = 1 if (df['first_service_date'] < df['next_service_date']).all() else 0\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Which model has the highest average positive fuel record?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Which model has the highest average positive fuel record?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Group the data by model and calculate the average positive fuel record\n    avg_fuel_pos = df.groupby('model')['fuel_pos'].mean()\n\n    # Find the model with the highest average positive fuel record\n    highest_avg_fuel_pos = avg_fuel_pos.idxmax()\n\n    # Return the model with the highest average positive fuel record\n    return highest_avg_fuel_pos\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Which service type has the highest average cost of service?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Which service type has the highest average cost of service?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Group the DataFrame by service type and calculate the average cost of service for each group\n    avg_cost_of_service_by_service_type = df.groupby('service_type')['cost_of_service'].mean()\n\n    # Find the service type with the highest average cost of service\n    service_type_highest_avg_cost_of_service = avg_cost_of_service_by_service_type.idxmax()\n\n    # Return the service type with the highest average cost of service\n    return service_type_highest_avg_cost_of_service\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'What is the size of the longest record?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'What is the size of the longest record?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the length of the longest record\n    longest_record_length = df['length_total'].max()\n\n    # Return the result\n    return longest_record_length\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Select 5 first occuring rows with the biggest average length'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Select 5 first occuring rows with the biggest average length' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Sort the DataFrame by 'length_mean' in descending order and select the first 5 rows\n    result = df.sort_values(by='length_mean', ascending=False).head(5)\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Select such rows, which occur after and including March of 2022 based on the current_year_month column.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Select such rows, which occur after and including March of 2022 based on the current_year_month column.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Filter the DataFrame based on the given condition. From the JSON sample values it is seen that  the current_year_month column has integer values. Comparing with an integer.\n    df0 = df[df['current_year_month'] >= 202203]\n    return df0\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Count the total number of negative values across the current_mileage and initial_mileage columns.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      vehicle_id    model  year purchase_date  initial_mileage  current_mileage maintenance_schedule  current_year_month service_date first_service_date  force_kN_abs_mean last_service_date   service_type  cost_of_service next_service_date operational_status  fuel_consum_start  fuel_consum_end driver_assigned  length_mean  length_total  fuel_pos  fuel_neg\n    0     VH3187  Model S  1990    2022-03-01            14271            46616            Quarterly              202305   2024-02-07         2020-09-12                4.0        2023-08-11     Oil Change           707.41        2024-08-12        Operational              13.68            15.36        Driver C         4.65        296.17      3.53      4.04\n    1     VH6258  Model 3  2021    2022-01-30            25029            27486          Semi-annual              202209   2023-07-25         2020-09-29                5.0        2023-06-01  Tire Rotation            77.04        2025-04-23        Operational               8.08            19.99        Driver D         8.09        899.85      8.55      1.70\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'vehicle_id', 'sample_values': ['VH3187', 'VH6258']}, {'column_name': 'model', 'sample_values': ['Model S', 'Model 3']}, {'column_name': 'year', 'sample_values': [1990, 2021]}, {'column_name': 'purchase_date', 'sample_values': [Timestamp('2022-03-01 00:00:00'), Timestamp('2022-01-30 00:00:00')]}, {'column_name': 'initial_mileage', 'sample_values': [14271, 25029]}, {'column_name': 'current_mileage', 'sample_values': [46616, 27486]}, {'column_name': 'maintenance_schedule', 'sample_values': ['Quarterly', 'Semi-annual']}, {'column_name': 'current_year_month', 'sample_values': [202305, 202209]}, {'column_name': 'service_date', 'sample_values': [Timestamp('2024-02-07 00:00:00'), Timestamp('2023-07-25 00:00:00')]}, {'column_name': 'first_service_date', 'sample_values': [Timestamp('2020-09-12 00:00:00'), Timestamp('2020-09-29 00:00:00')]}, {'column_name': 'force_kN_abs_mean', 'sample_values': [4.0, 5.0]}, {'column_name': 'last_service_date', 'sample_values': [Timestamp('2023-08-11 00:00:00'), Timestamp('2023-06-01 00:00:00')]}, {'column_name': 'service_type', 'sample_values': ['Oil Change', 'Tire Rotation']}, {'column_name': 'cost_of_service', 'sample_values': [707.41, 77.04]}, {'column_name': 'next_service_date', 'sample_values': [Timestamp('2024-08-12 00:00:00'), Timestamp('2025-04-23 00:00:00')]}, {'column_name': 'operational_status', 'sample_values': ['Operational', 'Operational']}, {'column_name': 'fuel_consum_start', 'sample_values': [13.68, 8.08]}, {'column_name': 'fuel_consum_end', 'sample_values': [15.36, 19.99]}, {'column_name': 'driver_assigned', 'sample_values': ['Driver C', 'Driver D']}, {'column_name': 'length_mean', 'sample_values': [4.65, 8.09]}, {'column_name': 'length_total', 'sample_values': [296.17, 899.85]}, {'column_name': 'fuel_pos', 'sample_values': [3.53, 8.55]}, {'column_name': 'fuel_neg', 'sample_values': [4.04, 1.7]}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Count the total number of negative values across the current_mileage and initial_mileage columns.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Count the total number of negative values across the 'current_mileage' and 'initial_mileage' columns\n    count_negative_values = (df['current_mileage'] < 0).sum() + (df['initial_mileage'] < 0).sum()\n\n    # Return the total count of negative values\n    return count_negative_values\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Select first occuring top 3 largest money amounts in euros'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Select first occuring top 3 largest money amounts in euros' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Select the top 3 largest amounts in euros\n    top_3_amounts = df.nlargest(3, 'Amount_EUR')\n\n    # Return the result\n    return top_3_amounts\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'top 11 largest euro amounts values'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'top 11 largest euro amounts values' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Sort the DataFrame by 'Amount_EUR' in descending order and select the top 11 rows\n    top_11_largest_euro_amounts = df.nlargest(11, 'Amount_EUR')\n\n    # Return the top 11 largest euro amounts\n    return top_11_largest_euro_amounts\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'GIVE ME TOP 7 EUR CZK EXCHSANGE RATES. I WANT TEHM.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'GIVE ME TOP 7 EUR CZK EXCHSANGE RATES. I WANT TEHM.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Sort the DataFrame by the 'exchange_rate_eur_czk' column in descending order and select the top 7 rows\n    result = df.sort_values(by='exchange_rate_eur_czk', ascending=False).head(7)\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'i need top 15 percent of biggest differences in the eur czk rate and the usd czk rate of the one distinct transaction cycle'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'i need top 15 percent of biggest differences in the eur czk rate and the usd czk rate of the one distinct transaction cycle' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the difference in the eur czk rate and the usd czk rate\n    df['rate_difference'] = df['exchange_rate_eur_czk'] - df['exchange_rate_usd_czk']\n\n    # Calculate the top 15 percent of the biggest rate differences\n    top_percentile = df.nlargest(int(len(df) * 0.15), 'rate_difference')\n\n    return top_percentile\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'rows with czk fees bigger or equal to 300, latency smaller than 475, where year is 2023 and batch status is Failed'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'rows with czk fees bigger or equal to 300, latency smaller than 475, where year is 2023 and batch status is Failed' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    result = df[(df['Fees CZK'] >= 300) & (df['Latency ms'] < 475) & (df['Date'].str.contains('2023')) & (df['Batch Status'] == 'Failed')]\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Give me the mean of paid amount in dollars by location'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Give me the mean of paid amount in dollars by location' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Group the DataFrame by location and calculate the mean paid amount in dollars\n    result = df.groupby('Location')['Amount_USD'].mean()\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'sum the transfer amounts in euros by every approval status'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'sum the transfer amounts in euros by every approval status' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Grouping the DataFrame by 'Approval Status' and summing the amounts in euros for every approval status\n    result = df.groupby('Approval Status')['Amount_EUR'].sum()\n\n    # Returning the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'To compare the sum to the mean of the czk fee by every transaction type via aggregation'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'To compare the sum to the mean of the czk fee by every transaction type via aggregation' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Group the data by 'Transaction Type' and calculate the sum and mean of the 'Fees CZK'\n    result = df.groupby('Transaction Type')['Fees CZK'].agg(['sum', 'mean'])\n\n    # Return the result\n    return result\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'what are transaction id of the first occuring transaction with status after of Pending and it's eur czk exchange rate?'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'what are transaction id of the first occuring transaction with status after of Pending and it's eur czk exchange rate?' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Filter the DataFrame for the first occurring transaction with Status After of Pending\n    filtered_df = df[df['Status After'] == 'Pending'].head(1)\n\n    # Extract the transaction id and the eur czk exchange rate\n    id = filtered_df['Transaction ID'].values[0]\n    exchange_rate = filtered_df['exchange_rate_eur_czk'].values[0]\n\n    # Return the transaction id and its exchange rate as a tuple\n    return id, exchange_rate\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Count rows for each currency type with date after January 2023'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Count rows for each currency type with date after January 2023' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Convert Date to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    # Filter rows with Date after January 2023\n    df = df[df['Date'] >= '2023-01-01']\n\n    # Count rows for each currency\n    count_per_currency = df['Currency'].value_counts()\n\n    return count_per_currency\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Find transactions where fees in eur were bigger than the average fee in usd and tag by 'eur_bigger' col'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Find transactions where fees in eur were bigger than the average fee in usd and tag by 'eur_bigger' col' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Calculate the average of the usd fees\n    avg_fees_usd = df['Fees USD'].mean()\n\n    # Find transactions where fees in eur were bigger than the average fee in usd and tag by 'eur_bigger' col\n    df['eur_bigger'] = df['Fees EUR'] > avg_fees_usd\n\n    # Return the updated DataFrame\n    return df\n```"}
{"input":"```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef solve(df: pd.DataFrame):\n    \"\"\" Function to solve the user query: 'Find the currency with the most significant difference in exchange_rate_eur_czk and exchange_rate_usd_czk for transactions that have a postal code greater than 60000.'.\n\n    DataFrame `df` is fixed.\n         \n    The resut of `print(df.head(2))` is:\n      Transaction ID        Date      Time  Amount_USD  Amount_EUR Currency Sender Account Receiver Account Transaction Type Location Status Before Status After Status Final  Fees USD  Fees EUR  Fees CZK  exchange_rate_eur_czk  exchange_rate_usd_czk Authentication Method Customer ID Merchant ID Transaction Platform Device Used Network Type       IP Address Country Code    City  Postal Code Region Region_k Time Zone  Latency ms   Session ID Browser       OS App Version Error Code Resolution Attempt Follow-up Date Agent ID Resolution Status Comments Notification Sent Read Receipt Modification Flag Previous Transaction ID Linked Transaction ID  Batch ID Batch Status Processing Time queue_time_start queue_time_end Approval Status Approval ID\n    0       TX797961  2023-12-03  16:02:05     4528.54     2759.14      EUR     SA00493590       RA00744315         Transfer      ATM     Cancelled    Processed    Completed     14.61     80.23    363.00                  25.26                  22.54           Fingerprint  CU00036985  ME00046888           Mobile App      iPhone           5G    162.115.68.49           CZ  Berlin        50577   East   RK3335       CST         209  SID66194824    Edge      iOS       5.8.6        NaN                 No            NaN      NaN          Resolved      NaN               Yes          Yes               Yes                TX943889              TX776574  BID20786      Pending          534 ms     16:02:05.699   16:02:05.699        Approved    AID46307\n    1       TX655158  2023-06-07  16:02:05     1306.27     4170.99      USD     SA00718748       RA00349664       Withdrawal   Branch     Cancelled    Cancelled       Failed     44.67     85.80   2316.68                  25.30                  21.66           Fingerprint  CU00018681  ME00293220           Mobile App     Desktop           5G  152.147.231.236           US  London        54665   East   RK6011       CST         157  SID90615934    Edge  Windows       5.8.3        NaN                 No            NaN      NaN          Resolved      NaN                No          Yes               Yes                     NaN              TX616913  BID93494    Completed          541 ms     16:02:05.699   16:02:05.699         Pending    AID74119\n        \n    Here is also a list of column names along with the first sample values for your convenience (each column is represented as a separate json object within a list):\n    [{'column_name': 'Transaction ID', 'sample_values': ['TX797961', 'TX655158']}, {'column_name': 'Date', 'sample_values': ['2023-12-03', '2023-06-07']}, {'column_name': 'Time', 'sample_values': ['16:02:05', '16:02:05']}, {'column_name': 'Amount_USD', 'sample_values': [4528.54, 1306.27]}, {'column_name': 'Amount_EUR', 'sample_values': [2759.14, 4170.99]}, {'column_name': 'Currency', 'sample_values': ['EUR', 'USD']}, {'column_name': 'Sender Account', 'sample_values': ['SA00493590', 'SA00718748']}, {'column_name': 'Receiver Account', 'sample_values': ['RA00744315', 'RA00349664']}, {'column_name': 'Transaction Type', 'sample_values': ['Transfer', 'Withdrawal']}, {'column_name': 'Location', 'sample_values': ['ATM', 'Branch']}, {'column_name': 'Status Before', 'sample_values': ['Cancelled', 'Cancelled']}, {'column_name': 'Status After', 'sample_values': ['Processed', 'Cancelled']}, {'column_name': 'Status Final', 'sample_values': ['Completed', 'Failed']}, {'column_name': 'Fees USD', 'sample_values': [14.61, 44.67]}, {'column_name': 'Fees EUR', 'sample_values': [80.23, 85.8]}, {'column_name': 'Fees CZK', 'sample_values': [363.0, 2316.68]}, {'column_name': 'exchange_rate_eur_czk', 'sample_values': [25.26, 25.3]}, {'column_name': 'exchange_rate_usd_czk', 'sample_values': [22.54, 21.66]}, {'column_name': 'Authentication Method', 'sample_values': ['Fingerprint', 'Fingerprint']}, {'column_name': 'Customer ID', 'sample_values': ['CU00036985', 'CU00018681']}, {'column_name': 'Merchant ID', 'sample_values': ['ME00046888', 'ME00293220']}, {'column_name': 'Transaction Platform', 'sample_values': ['Mobile App', 'Mobile App']}, {'column_name': 'Device Used', 'sample_values': ['iPhone', 'Desktop']}, {'column_name': 'Network Type', 'sample_values': ['5G', '5G']}, {'column_name': 'IP Address', 'sample_values': ['162.115.68.49', '152.147.231.236']}, {'column_name': 'Country Code', 'sample_values': ['CZ', 'US']}, {'column_name': 'City', 'sample_values': ['Berlin', 'London']}, {'column_name': 'Postal Code', 'sample_values': [50577, 54665]}, {'column_name': 'Region', 'sample_values': ['East', 'East']}, {'column_name': 'Region_k', 'sample_values': ['RK3335', 'RK6011']}, {'column_name': 'Time Zone', 'sample_values': ['CST', 'CST']}, {'column_name': 'Latency ms', 'sample_values': [209, 157]}, {'column_name': 'Session ID', 'sample_values': ['SID66194824', 'SID90615934']}, {'column_name': 'Browser', 'sample_values': ['Edge', 'Edge']}, {'column_name': 'OS', 'sample_values': ['iOS', 'Windows']}, {'column_name': 'App Version', 'sample_values': ['5.8.6', '5.8.3']}, {'column_name': 'Error Code', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Attempt', 'sample_values': ['No', 'No']}, {'column_name': 'Follow-up Date', 'sample_values': [nan, nan]}, {'column_name': 'Agent ID', 'sample_values': [nan, nan]}, {'column_name': 'Resolution Status', 'sample_values': ['Resolved', 'Resolved']}, {'column_name': 'Comments', 'sample_values': [nan, nan]}, {'column_name': 'Notification Sent', 'sample_values': ['Yes', 'No']}, {'column_name': 'Read Receipt', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Modification Flag', 'sample_values': ['Yes', 'Yes']}, {'column_name': 'Previous Transaction ID', 'sample_values': ['TX943889', nan]}, {'column_name': 'Linked Transaction ID', 'sample_values': ['TX776574', 'TX616913']}, {'column_name': 'Batch ID', 'sample_values': ['BID20786', 'BID93494']}, {'column_name': 'Batch Status', 'sample_values': ['Pending', 'Completed']}, {'column_name': 'Processing Time', 'sample_values': ['534 ms', '541 ms']}, {'column_name': 'queue_time_start', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'queue_time_end', 'sample_values': ['16:02:05.699', '16:02:05.699']}, {'column_name': 'Approval Status', 'sample_values': ['Approved', 'Pending']}, {'column_name': 'Approval ID', 'sample_values': ['AID46307', 'AID74119']}]\n    \n\n    Args:\n        df: pandas DataFrame\n\n    Returns:\n        Variable containing the answer to the task 'Find the currency with the most significant difference in exchange_rate_eur_czk and exchange_rate_usd_czk for transactions that have a postal code greater than 60000.' (typed e.g. float, DataFrame, list, string, dict, etc.).\n    \"\"\"\n","output":"    # Filter transactions with Postal Code greater than 60000\n    filtered_df = df[df['Postal Code'] > 60000]\n\n    # Calculate the difference in exchange_rate_eur_czk and exchange_rate_usd_czk\n    filtered_df['rate_diff'] = filtered_df['exchange_rate_usd_czk'] - filtered_df['exchange_rate_eur_czk']\n\n    # Find the currency with the most significant difference\n    result = filtered_df.loc[filtered_df['rate_diff'].idxmax()]['Currency']\n\n    return result\n```"}
